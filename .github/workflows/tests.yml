name: Tests

on:
  push:
    branches:
      - master
    tags:
      - "*"
  pull_request:

env:
  min_go_version: "~1.21.12"

jobs:
  lint_test:
    name: Lint
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - run: ./scripts/lint_allowed_geth_imports.sh
        shell: bash
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.min_go_version }}
          check-latest: true
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.56
          working-directory: .
          args: --timeout 10m
          skip-pkg-cache: true
      - name: Run shellcheck
        shell: bash
        run: scripts/shellcheck.sh
      - name: Run actionlint
        shell: bash
        run: scripts/actionlint.sh

  unit_test:
    name: Golang Unit Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-20.04, ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.min_go_version }}
          check-latest: true
      - name: Set timeout on Windows # Windows UT run slower and need a longer timeout
        shell: bash
        if: matrix.os == 'windows-latest'
        run: echo "TIMEOUT=1200s" >> "$GITHUB_ENV"
      - run: go mod download
        shell: bash
      - run: ./scripts/build.sh
        shell: bash
      - run: ./scripts/build_test.sh
        env:
          TIMEOUT: ${{ env.TIMEOUT }}
        shell: bash
      - run: ./scripts/coverage.sh
        shell: bash

  e2e_precompile:
    name: e2e precompile tests
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.min_go_version }}
          check-latest: true
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.13"
      - name: NPM Clean Install
        run: npm ci
        working-directory: ./contracts
      - name: Hardhat Clean
        run: npx hardhat clean
        working-directory: ./contracts
      - name: Hardhat Compile
        run: npx hardhat compile
        working-directory: ./contracts
      - name: Install AvalancheGo Release
        shell: bash
        run: BASEDIR=/tmp/e2e-test AVALANCHEGO_BUILD_PATH=/tmp/e2e-test/avalanchego ./scripts/install_avalanchego_release.sh
      - name: Build Subnet-EVM Plugin Binary
        shell: bash
        run: ./scripts/build.sh
      - name: Run E2E Precompile Tests
        shell: bash
        run: AVALANCHEGO_BUILD_PATH=/tmp/e2e-test/avalanchego DATA_DIR=/tmp/e2e-test/precompile-data ./scripts/run_ginkgo_precompile.sh
      - name: Upload Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: subnet-evm-e2e-logs-precompile
          path: /tmp/e2e-test/precompile-data
          retention-days: 5
  e2e_warp:
    name: e2e warp tests
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.min_go_version }}
          check-latest: true
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.13"
      - name: NPM Clean Install
        run: npm ci
        working-directory: ./contracts
      - name: Hardhat Clean
        run: npx hardhat clean
        working-directory: ./contracts
      - name: Hardhat Compile
        run: npx hardhat compile
        working-directory: ./contracts
      - name: Install AvalancheGo Release
        shell: bash
        run: BASEDIR=/tmp/e2e-test AVALANCHEGO_BUILD_PATH=/tmp/e2e-test/avalanchego ./scripts/install_avalanchego_release.sh
      - name: Build Subnet-EVM Plugin Binary
        shell: bash
        run: ./scripts/build.sh
      - name: Run Warp E2E Tests
        uses: ava-labs/avalanchego/.github/actions/run-monitored-tmpnet-cmd@v1.11.11-monitoring-url
        with:
          run: AVALANCHEGO_BUILD_PATH=/tmp/e2e-test/avalanchego ./scripts/run_ginkgo_warp.sh
          prometheus_id: ${{ secrets.PROMETHEUS_ID || '' }}
          prometheus_password: ${{ secrets.PROMETHEUS_PASSWORD || '' }}
          loki_id: ${{ secrets.LOKI_ID || '' }}
          loki_password: ${{ secrets.LOKI_PASSWORD || '' }}
      - name: Upload tmpnet network dir for warp testing
        uses: ava-labs/avalanchego/.github/actions/upload-tmpnet-artifact@v1-actions
        if: always()
        with:
          name: warp-tmpnet-data
  e2e_load:
    name: e2e load tests
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.min_go_version }}
          check-latest: true
      - name: Install AvalancheGo Release
        shell: bash
        run: BASEDIR=/tmp/e2e-test AVALANCHEGO_BUILD_PATH=/tmp/e2e-test/avalanchego ./scripts/install_avalanchego_release.sh
      - name: Build Subnet-EVM Plugin Binary
        shell: bash
        run: ./scripts/build.sh
      - name: Run E2E Load Tests
        uses: ava-labs/avalanchego/.github/actions/run-monitored-tmpnet-cmd@v1.11.11-monitoring-url
        with:
          run: AVALANCHEGO_BUILD_PATH=/tmp/e2e-test/avalanchego ./scripts/run_ginkgo_load.sh
          prometheus_id: ${{ secrets.PROMETHEUS_ID || '' }}
          prometheus_password: ${{ secrets.PROMETHEUS_PASSWORD || '' }}
          loki_id: ${{ secrets.LOKI_ID || '' }}
          loki_password: ${{ secrets.LOKI_PASSWORD || '' }}
      - name: Upload tmpnet network dir for load testing
        uses: ava-labs/avalanchego/.github/actions/upload-tmpnet-artifact@v1-actions
        if: always()
        with:
          name: load-tmpnet-data
  mock_gen:
    name: MockGen Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.min_go_version }}
          check-latest: true
      - shell: bash
        run: scripts/mock.gen.sh
      - shell: bash
        run: .github/workflows/check-clean-branch.sh
  test_build_image:
    name: Image build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check image build
        shell: bash
        run: bash -x scripts/tests.build_docker_image.sh
  test_build_antithesis_images:
    name: Build Antithesis images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.min_go_version }}
          check-latest: true
      - name: Install AvalancheGo Release
        shell: bash
        run: BASEDIR=/tmp/e2e-test AVALANCHEGO_BUILD_PATH=/tmp/e2e-test/avalanchego ./scripts/install_avalanchego_release.sh
      - name: Build Subnet-EVM Plugin Binary
        shell: bash
        run: ./scripts/build.sh
      - name: Check that the antithesis workload is sane
        shell: bash
        run: go run ./tests/antithesis --avalanchego-path=/tmp/e2e-test/avalanchego/avalanchego --duration=60s
      - name: Check antithesis image build
        shell: bash
        run: bash -x scripts/tests.build_antithesis_images.sh
