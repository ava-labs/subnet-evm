name: Tests

on:
  push:
    branches:
      - master
    tags:
      - "*"
  pull_request:
  merge_group:
    types: [checks_requested]

jobs:
  lint_test:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: ./scripts/run_task.sh lint_allowed_eth_imports
        shell: bash
      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
      - name: golangci-lint
        uses: golangci/golangci-lint-action@3a919529898de77ec3da873e3063ca4b10e7f5cc #v3
        with:
          version: v1.63
          working-directory: .
          args: --timeout 10m
          skip-pkg-cache: true
      - name: Run shellcheck
        shell: bash
        run: ./scripts/run_task.sh shellcheck
      - name: Run actionlint
        shell: bash
        run: ./scripts/run_task.sh actionlint
      - name: go mod tidy
        run: |
          go mod tidy
          git diff --exit-code
      - name: Ensure consistent avalanchego version
        shell: bash
        run: |
          ./scripts/run_task.sh update_avalanchego_version
          git diff --exit-code

  unit_test:
    name: Golang Unit Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-22.04, ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
      - run: go mod download
        shell: bash
      - name: fjl/gencodec generated files are up to date
        run: |
          grep -lr -E '^// Code generated by github\.com\/fjl\/gencodec\. DO NOT EDIT\.$' . | xargs -r rm
          go generate -run "github.com/fjl/gencodec" ./...
          git add --intent-to-add --all
          git diff --exit-code
      - name: Mocks are up to date
        shell: bash
        run: |
          grep -lr -E '^// Code generated by MockGen\. DO NOT EDIT\.$' . | xargs -r rm
          go generate -run "go.uber.org/mock/mockgen" ./...
          git add --intent-to-add --all
          git diff --exit-code
      - run: ./scripts/run_task.sh build
        shell: bash
      - run: ./scripts/run_task.sh build-test
        env:
          TIMEOUT: ${{ env.TIMEOUT }}
        shell: bash
      - run: ./scripts/run_task.sh coverage
        shell: bash

  e2e_precompile:
    name: e2e precompile tests
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.13"
      - name: NPM Clean Install
        run: npm ci
        working-directory: ./contracts
      - name: Hardhat Clean
        run: npx hardhat clean
        working-directory: ./contracts
      - name: Hardhat Compile
        run: npx hardhat compile
        working-directory: ./contracts
      - name: Run E2E Precompile Tests
        shell: bash
        run: ./scripts/run_task.sh test-e2e-precompile-ci
      - name: Upload Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: subnet-evm-e2e-logs-precompile
          path: /tmp/e2e-test/precompile-data
          retention-days: 5
  e2e_warp:
    name: e2e warp tests
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.13"
      - name: NPM Clean Install
        run: npm ci
        working-directory: ./contracts
      - name: Hardhat Clean
        run: npx hardhat clean
        working-directory: ./contracts
      - name: Hardhat Compile
        run: npx hardhat compile
        working-directory: ./contracts
      - name: Run Warp E2E Tests
        uses: ava-labs/avalanchego/.github/actions/run-monitored-tmpnet-cmd@092cf182dd92b66a8ab882b657d3ae52b174c913
        with:
          run: ./scripts/run_task.sh test-e2e-warp-ci
          run_env: AVALANCHEGO_BUILD_PATH=/tmp/e2e-test/avalanchego
          artifact_prefix: warp
          prometheus_username: ${{ secrets.PROMETHEUS_ID || '' }}
          prometheus_password: ${{ secrets.PROMETHEUS_PASSWORD || '' }}
          loki_username: ${{ secrets.LOKI_ID || '' }}
          loki_password: ${{ secrets.LOKI_PASSWORD || '' }}
  e2e_load:
    name: e2e load tests
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
      - name: Run E2E Load Tests
        uses: ava-labs/avalanchego/.github/actions/run-monitored-tmpnet-cmd@092cf182dd92b66a8ab882b657d3ae52b174c913
        with:
          run: ./scripts/run_task.sh test-e2e-load-ci
          run_env: AVALANCHEGO_BUILD_PATH=/tmp/e2e-test/avalanchego
          artifact_prefix: load
          prometheus_username: ${{ secrets.PROMETHEUS_ID || '' }}
          prometheus_password: ${{ secrets.PROMETHEUS_PASSWORD || '' }}
          loki_username: ${{ secrets.LOKI_ID || '' }}
          loki_password: ${{ secrets.LOKI_PASSWORD || '' }}
  test_build_image:
    name: Image build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install qemu (required for cross-platform builds)
        run: |
          sudo apt update
          sudo apt -y install qemu-system qemu-user-static
      - name: Check image build
        shell: bash
        run: ./scripts/run_task.sh test-build-image
  test_build_antithesis_images:
    name: Build Antithesis images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
      - name: Check antithesis image build
        shell: bash
        run: ./scripts/run_task.sh test-build-antithesis-images-ci
