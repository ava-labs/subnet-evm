// Code generated
// This file is a generated precompile contract config with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package test2

import (
	"errors"
	"fmt"
	"math/big"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/precompile/contract"
	"github.com/ava-labs/subnet-evm/vmerrs"

	_ "embed"

	"github.com/ethereum/go-ethereum/common"
)

const (
	// Gas costs for each function. These are set to 1 by default.
	// You should set a gas cost for each function in your contract.
	// Generally, you should not set gas costs very low as this may cause your network to be vulnerable to DoS attacks.
	// There are some predefined gas costs in contract/utils.go that you can use.
	GetTestGasCost uint64 = 1 /* SET A GAS COST HERE */
	SetTestGasCost uint64 = 1 /* SET A GAS COST HERE */
)

// CUSTOM CODE STARTS HERE
// Reference imports to suppress errors from unused imports. This code and any unnecessary imports can be removed.
var (
	_ = abi.JSON
	_ = errors.New
	_ = big.NewInt
)

// Singleton StatefulPrecompiledContract and signatures.
var (

	// TestRawABI contains the raw ABI of Test contract.
	//go:embed contract.abi
	TestRawABI string

	TestABI = contract.ParseABI(TestRawABI)

	TestPrecompile = createTestPrecompile()
)

type GetTestOutput struct {
	Test1 uint8
	Test2 uint16
}

// PackGetTest packs the include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackGetTest() ([]byte, error) {
	return TestABI.Pack("getTest")
}

// PackGetTestOutput attempts to pack given [outputStruct] of type GetTestOutput
// to conform the ABI outputs.
func PackGetTestOutput(outputStruct GetTestOutput) ([]byte, error) {
	return TestABI.PackOutput("getTest",
		outputStruct.Test1,
		outputStruct.Test2,
	)
}

func getTest(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, GetTestGasCost); err != nil {
		return nil, 0, err
	}
	// no input provided for this function

	// CUSTOM CODE STARTS HERE
	var output GetTestOutput // CUSTOM CODE FOR AN OUTPUT
	packedOutput, err := PackGetTestOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackSetTestInput attempts to unpack [input] into the uint8 type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackSetTestInput(input []byte) (uint8, error) {
	res, err := TestABI.UnpackInput("setTest", input)
	if err != nil {
		return 0, err
	}
	unpacked := *abi.ConvertType(res[0], new(uint8)).(*uint8)
	return unpacked, nil
}

// PackSetTest packs [test1] of type uint8 into the appropriate arguments for setTest.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackSetTest(test1 uint8) ([]byte, error) {
	return TestABI.Pack("setTest", test1)
}

func setTest(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, SetTestGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// attempts to unpack [input] into the arguments to the SetTestInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackSetTestInput(input)
	if err != nil {
		fmt.Println("called set Test", "err", err)
		return nil, remainingGas, err
	}

	fmt.Println("called set Test", "input", inputStruct)
	// CUSTOM CODE STARTS HERE
	_ = inputStruct // CUSTOM CODE OPERATES ON INPUT
	// this function does not return an output, leave this one as is
	packedOutput := []byte{}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// createTestPrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.

func createTestPrecompile() contract.StatefulPrecompiledContract {
	var functions []*contract.StatefulPrecompileFunction

	abiFunctionMap := map[string]contract.RunStatefulPrecompileFunc{
		"getTest": getTest,
		"setTest": setTest,
	}

	for name, function := range abiFunctionMap {
		method, ok := TestABI.Methods[name]
		if !ok {
			panic(fmt.Errorf("given method (%s) does not exist in the ABI", name))
		}
		functions = append(functions, contract.NewStatefulPrecompileFunction(method.ID, function))
	}
	// Construct the contract with no fallback function.
	statefulContract, err := contract.NewStatefulPrecompileContract(nil, functions)
	if err != nil {
		panic(err)
	}
	return statefulContract
}
