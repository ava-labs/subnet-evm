// Code generated
// This file is a generated precompile contract config with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package blocklist

import (
	"errors"
	"fmt"
	"math/big"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/precompile/contract"

	_ "embed"

	"github.com/ava-labs/libevm/common"
	"github.com/ava-labs/libevm/core/vm"
)

const (
	// Gas costs for each function. These are set to 1 by default.
	// You should set a gas cost for each function in your contract.
	// Generally, you should not set gas costs very low as this may cause your network to be vulnerable to DoS attacks.
	// There are some predefined gas costs in contract/utils.go that you can use.
	AdminGasCost          uint64 = 1 /* SET A GAS COST HERE */
	BlockAddressGasCost   uint64 = 1 /* SET A GAS COST HERE */
	ChangeAdminGasCost    uint64 = 1 /* SET A GAS COST HERE */
	ReadBlockListGasCost  uint64 = 1 /* SET A GAS COST HERE */
	UnblockAddressGasCost uint64 = 1 /* SET A GAS COST HERE */
)

// CUSTOM CODE STARTS HERE
// Reference imports to suppress errors from unused imports. This code and any unnecessary imports can be removed.
var (
	_ = abi.JSON
	_ = errors.New
	_ = big.NewInt
	_ = vm.ErrOutOfGas
	_ = common.Big0
)

// Singleton StatefulPrecompiledContract and signatures.
var (

	// BlockListRawABI contains the raw ABI of BlockList contract.
	//go:embed contract.abi
	BlockListRawABI string

	BlockListABI = contract.ParseABI(BlockListRawABI)

	BlockListPrecompile = createBlockListPrecompile()
)

type BlockAddressInput struct {
	Addr   common.Address
	Reason string
}

type UnblockAddressInput struct {
	Addr   common.Address
	Reason string
}

// PackAdmin packs the include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackAdmin() ([]byte, error) {
	return BlockListABI.Pack("admin")
}

// PackAdminOutput attempts to pack given addr of type common.Address
// to conform the ABI outputs.
func PackAdminOutput(addr common.Address) ([]byte, error) {
	return BlockListABI.PackOutput("admin", addr)
}

// UnpackAdminOutput attempts to unpack given [output] into the common.Address type output
// assumes that [output] does not include selector (omits first 4 func signature bytes)
func UnpackAdminOutput(output []byte) (common.Address, error) {
	res, err := BlockListABI.Unpack("admin", output)
	if err != nil {
		return common.Address{}, err
	}
	unpacked := *abi.ConvertType(res[0], new(common.Address)).(*common.Address)
	return unpacked, nil
}

func admin(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, AdminGasCost); err != nil {
		return nil, 0, err
	}
	// no input provided for this function

	// CUSTOM CODE STARTS HERE

	var output common.Address // CUSTOM CODE FOR AN OUTPUT
	packedOutput, err := PackAdminOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackBlockAddressInput attempts to unpack [input] as BlockAddressInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackBlockAddressInput(input []byte) (BlockAddressInput, error) {
	inputStruct := BlockAddressInput{}
	err := BlockListABI.UnpackInputIntoInterface(&inputStruct, "blockAddress", input, false)

	return inputStruct, err
}

// PackBlockAddress packs [inputStruct] of type BlockAddressInput into the appropriate arguments for blockAddress.
func PackBlockAddress(inputStruct BlockAddressInput) ([]byte, error) {
	return BlockListABI.Pack("blockAddress", inputStruct.Addr, inputStruct.Reason)
}

func blockAddress(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, BlockAddressGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vm.ErrWriteProtection
	}
	// attempts to unpack [input] into the arguments to the BlockAddressInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackBlockAddressInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	_ = inputStruct // CUSTOM CODE OPERATES ON INPUT
	// this function does not return an output, leave this one as is
	packedOutput := []byte{}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackChangeAdminInput attempts to unpack [input] into the common.Address type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackChangeAdminInput(input []byte) (common.Address, error) {
	res, err := BlockListABI.UnpackInput("changeAdmin", input, false)
	if err != nil {
		return common.Address{}, err
	}
	unpacked := *abi.ConvertType(res[0], new(common.Address)).(*common.Address)
	return unpacked, nil
}

// PackChangeAdmin packs [addr] of type common.Address into the appropriate arguments for changeAdmin.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackChangeAdmin(addr common.Address) ([]byte, error) {
	return BlockListABI.Pack("changeAdmin", addr)
}

func changeAdmin(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, ChangeAdminGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vm.ErrWriteProtection
	}
	// attempts to unpack [input] into the arguments to the ChangeAdminInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackChangeAdminInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	_ = inputStruct // CUSTOM CODE OPERATES ON INPUT
	// this function does not return an output, leave this one as is
	packedOutput := []byte{}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackReadBlockListInput attempts to unpack [input] into the common.Address type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackReadBlockListInput(input []byte) (common.Address, error) {
	res, err := BlockListABI.UnpackInput("readBlockList", input, false)
	if err != nil {
		return common.Address{}, err
	}
	unpacked := *abi.ConvertType(res[0], new(common.Address)).(*common.Address)
	return unpacked, nil
}

// PackReadBlockList packs [addr] of type common.Address into the appropriate arguments for readBlockList.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackReadBlockList(addr common.Address) ([]byte, error) {
	return BlockListABI.Pack("readBlockList", addr)
}

// PackReadBlockListOutput attempts to pack given role of type *big.Int
// to conform the ABI outputs.
func PackReadBlockListOutput(role *big.Int) ([]byte, error) {
	return BlockListABI.PackOutput("readBlockList", role)
}

// UnpackReadBlockListOutput attempts to unpack given [output] into the *big.Int type output
// assumes that [output] does not include selector (omits first 4 func signature bytes)
func UnpackReadBlockListOutput(output []byte) (*big.Int, error) {
	res, err := BlockListABI.Unpack("readBlockList", output)
	if err != nil {
		return new(big.Int), err
	}
	unpacked := *abi.ConvertType(res[0], new(*big.Int)).(**big.Int)
	return unpacked, nil
}

func readBlockList(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, ReadBlockListGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the ReadBlockListInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackReadBlockListInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	_ = inputStruct // CUSTOM CODE OPERATES ON INPUT

	var output *big.Int // CUSTOM CODE FOR AN OUTPUT
	packedOutput, err := PackReadBlockListOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackUnblockAddressInput attempts to unpack [input] as UnblockAddressInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackUnblockAddressInput(input []byte) (UnblockAddressInput, error) {
	inputStruct := UnblockAddressInput{}
	err := BlockListABI.UnpackInputIntoInterface(&inputStruct, "unblockAddress", input, false)

	return inputStruct, err
}

// PackUnblockAddress packs [inputStruct] of type UnblockAddressInput into the appropriate arguments for unblockAddress.
func PackUnblockAddress(inputStruct UnblockAddressInput) ([]byte, error) {
	return BlockListABI.Pack("unblockAddress", inputStruct.Addr, inputStruct.Reason)
}

func unblockAddress(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, UnblockAddressGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vm.ErrWriteProtection
	}
	// attempts to unpack [input] into the arguments to the UnblockAddressInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackUnblockAddressInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	_ = inputStruct // CUSTOM CODE OPERATES ON INPUT
	// this function does not return an output, leave this one as is
	packedOutput := []byte{}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// createBlockListPrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.

func createBlockListPrecompile() contract.StatefulPrecompiledContract {
	var functions []*contract.StatefulPrecompileFunction

	abiFunctionMap := map[string]contract.RunStatefulPrecompileFunc{
		"admin":          admin,
		"blockAddress":   blockAddress,
		"changeAdmin":    changeAdmin,
		"readBlockList":  readBlockList,
		"unblockAddress": unblockAddress,
	}

	for name, function := range abiFunctionMap {
		method, ok := BlockListABI.Methods[name]
		if !ok {
			panic(fmt.Errorf("given method (%s) does not exist in the ABI", name))
		}
		functions = append(functions, contract.NewStatefulPrecompileFunction(method.ID, function))
	}
	// Construct the contract with no fallback function.
	statefulContract, err := contract.NewStatefulPrecompileContract(nil, functions)
	if err != nil {
		panic(err)
	}
	return statefulContract
}
