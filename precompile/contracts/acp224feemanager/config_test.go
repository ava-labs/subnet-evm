// Code generated
// This file is a generated precompile config test with the skeleton of test functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package acp224feemanager

// import (
// 	"testing"

// 	"github.com/ava-labs/subnet-evm/commontype"
// 	"github.com/ava-labs/subnet-evm/precompile/allowlist/allowlisttest"
// 	"github.com/ava-labs/subnet-evm/precompile/precompileconfig"
// 	"github.com/ava-labs/subnet-evm/precompile/precompiletest"
// 	"github.com/ava-labs/subnet-evm/utils"

// 	"github.com/ava-labs/libevm/common"
// 	"go.uber.org/mock/gomock"
// )

// // TestVerify tests the verification of Config.
// func TestVerify(t *testing.T) {
// 	admins := []common.Address{allowlisttest.TestAdminAddr}
// 	enableds := []common.Address{allowlisttest.TestEnabledAddr}
// 	managers := []common.Address{allowlisttest.TestManagerAddr}
// 	tests := map[string]precompiletest.ConfigVerifyTest{
// 		"valid config": {
// 			Config: NewConfig(utils.NewUint64(3), admins, enableds, managers, &commontype.ACP224FeeConfig{
// 				TargetGas:         utils.NewUint64(1000000),
// 				MinGasPrice:       utils.NewUint64(1000000),
// 				TimeToFillCapacity: utils.NewUint64(1000000),
// 				TimeToDouble:      utils.NewUint64(1000000),
// 			}),
// 			ChainConfig: func() precompileconfig.ChainConfig {
// 				config := precompileconfig.NewMockChainConfig(gomock.NewController(t))
// 				config.EXPECT().IsDurango(gomock.Any()).Return(true).AnyTimes()
// 				return config
// 			}(),
// 			ExpectedError: "",
// 		},
// 		// CUSTOM CODE STARTS HERE
// 		// Add your own Verify tests here, e.g.:
// 		// "your custom test name": {
// 		// 	Config: NewConfig(utils.NewUint64(3), admins, enableds, managers),
// 		// 	ExpectedError: ErrYourCustomError.Error(),
// 		// },
// 	}
// 	// Verify the precompile with the allowlist.
// 	// This adds allowlist verify tests to your custom tests
// 	// and runs them all together.
// 	// Even if you don't add any custom tests, keep this. This will still
// 	// run the default allowlist verify tests.
// 	allowlisttest.VerifyPrecompileWithAllowListTests(t, Module, tests)
// }

// // TestEqual tests the equality of Config with other precompile configs.
// func TestEqual(t *testing.T) {
// 	admins := []common.Address{allowlisttest.TestAdminAddr}
// 	enableds := []common.Address{allowlisttest.TestEnabledAddr}
// 	managers := []common.Address{allowlisttest.TestManagerAddr}
// 	tests := map[string]precompiletest.ConfigEqualTest{
// 		"non-nil config and nil other": {
// 			Config:   NewConfig(utils.NewUint64(3), admins, enableds, managers),
// 			Other:    nil,
// 			Expected: false,
// 		},
// 		"different type": {
// 			Config:   NewConfig(utils.NewUint64(3), admins, enableds, managers),
// 			Other:    precompileconfig.NewMockConfig(gomock.NewController(t)),
// 			Expected: false,
// 		},
// 		"different timestamp": {
// 			Config:   NewConfig(utils.NewUint64(3), admins, enableds, managers),
// 			Other:    NewConfig(utils.NewUint64(4), admins, enableds, managers),
// 			Expected: false,
// 		},
// 		"same config": {
// 			Config:   NewConfig(utils.NewUint64(3), admins, enableds, managers),
// 			Other:    NewConfig(utils.NewUint64(3), admins, enableds, managers),
// 			Expected: true,
// 		},
// 		// CUSTOM CODE STARTS HERE
// 		// Add your own Equal tests here
// 	}
// 	// Run allow list equal tests.
// 	// This adds allowlist equal tests to your custom tests
// 	// and runs them all together.
// 	// Even if you don't add any custom tests, keep this. This will still
// 	// run the default allowlist equal tests.
// 	allowlisttest.EqualPrecompileWithAllowListTests(t, Module, tests)
// }
