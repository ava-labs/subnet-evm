// Code generated
// This file is a generated precompile contract test with the skeleton of test functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package acp224feemanager

import (
	"math/big"
	"testing"

	"github.com/ava-labs/libevm/common"
	"github.com/ava-labs/libevm/core/vm"
	"github.com/ava-labs/subnet-evm/commontype"
	"github.com/ava-labs/subnet-evm/precompile/allowlist/allowlisttest"
	"github.com/ava-labs/subnet-evm/precompile/precompiletest"
	"github.com/stretchr/testify/require"
)

var (
	_ = vm.ErrOutOfGas
	_ = big.NewInt
	_ = common.Big0
	_ = require.New
)

// These tests are run against the precompile contract directly with
// the given input and expected output. They're just a guide to
// help you write your own tests. These tests are for general cases like
// allowlist, readOnly behaviour, and gas cost. You should write your own
// tests for specific cases.
var (
	tests = map[string]precompiletest.PrecompileTest{
		"calling getFeeConfig from NoRole should succeed": {
			Caller:     allowlisttest.TestNoRoleAddr,
			BeforeHook: allowlisttest.SetDefaultRoles(Module.Address),
			InputFn: func(t testing.TB) []byte {
				input, err := PackGetFeeConfig()
				require.NoError(t, err)
				return input
			},
			// This test is for a successful call. You can set the expected output here.
			// CUSTOM CODE STARTS HERE
			ExpectedRes: func() []byte {

				var output commontype.ACP224FeeConfig // CUSTOM CODE FOR AN OUTPUT
				output = commontype.ACP224FeeConfig{} // CUSTOM CODE FOR AN OUTPUT
				packedOutput, err := PackGetFeeConfigOutput(output)
				if err != nil {
					panic(err)
				}
				return packedOutput
			}(),
			SuppliedGas: GetFeeConfigGasCost,
			ReadOnly:    false,
			ExpectedErr: "",
		},
		"calling getFeeConfig from Enabled should succeed": {
			Caller:     allowlisttest.TestEnabledAddr,
			BeforeHook: allowlisttest.SetDefaultRoles(Module.Address),
			InputFn: func(t testing.TB) []byte {
				input, err := PackGetFeeConfig()
				require.NoError(t, err)
				return input
			},
			// This test is for a successful call. You can set the expected output here.
			// CUSTOM CODE STARTS HERE
			ExpectedRes: func() []byte {

				var output commontype.ACP224FeeConfig // CUSTOM CODE FOR AN OUTPUT
				output = commontype.ACP224FeeConfig{} // CUSTOM CODE FOR AN OUTPUT
				packedOutput, err := PackGetFeeConfigOutput(output)
				if err != nil {
					panic(err)
				}
				return packedOutput
			}(),
			SuppliedGas: GetFeeConfigGasCost,
			ReadOnly:    false,
			ExpectedErr: "",
		},
		"calling getFeeConfig from Manager should succeed": {
			Caller:     allowlisttest.TestManagerAddr,
			BeforeHook: allowlisttest.SetDefaultRoles(Module.Address),
			InputFn: func(t testing.TB) []byte {
				input, err := PackGetFeeConfig()
				require.NoError(t, err)
				return input
			},
			// This test is for a successful call. You can set the expected output here.
			// CUSTOM CODE STARTS HERE
			ExpectedRes: func() []byte {

				var output commontype.ACP224FeeConfig // CUSTOM CODE FOR AN OUTPUT
				output = commontype.ACP224FeeConfig{} // CUSTOM CODE FOR AN OUTPUT
				packedOutput, err := PackGetFeeConfigOutput(output)
				if err != nil {
					panic(err)
				}
				return packedOutput
			}(),
			SuppliedGas: GetFeeConfigGasCost,
			ReadOnly:    false,
			ExpectedErr: "",
		},
		"calling getFeeConfig from Admin should succeed": {
			Caller:     allowlisttest.TestAdminAddr,
			BeforeHook: allowlisttest.SetDefaultRoles(Module.Address),
			InputFn: func(t testing.TB) []byte {
				input, err := PackGetFeeConfig()
				require.NoError(t, err)
				return input
			},
			// This test is for a successful call. You can set the expected output here.
			// CUSTOM CODE STARTS HERE
			ExpectedRes: func() []byte {

				var output commontype.ACP224FeeConfig // CUSTOM CODE FOR AN OUTPUT
				output = commontype.ACP224FeeConfig{} // CUSTOM CODE FOR AN OUTPUT
				packedOutput, err := PackGetFeeConfigOutput(output)
				if err != nil {
					panic(err)
				}
				return packedOutput
			}(),
			SuppliedGas: GetFeeConfigGasCost,
			ReadOnly:    false,
			ExpectedErr: "",
		},
		"insufficient gas for getFeeConfig should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				input, err := PackGetFeeConfig()
				require.NoError(t, err)
				return input
			},
			SuppliedGas: GetFeeConfigGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vm.ErrOutOfGas.Error(),
		},
		"calling getFeeConfigLastChangedAt from NoRole should succeed": {
			Caller:     allowlisttest.TestNoRoleAddr,
			BeforeHook: allowlisttest.SetDefaultRoles(Module.Address),
			InputFn: func(t testing.TB) []byte {
				input, err := PackGetFeeConfigLastChangedAt()
				require.NoError(t, err)
				return input
			},
			// This test is for a successful call. You can set the expected output here.
			// CUSTOM CODE STARTS HERE
			ExpectedRes: func() []byte {

				var output *big.Int   // CUSTOM CODE FOR AN OUTPUT
				output = new(big.Int) // CUSTOM CODE FOR AN OUTPUT
				packedOutput, err := PackGetFeeConfigLastChangedAtOutput(output)
				if err != nil {
					panic(err)
				}
				return packedOutput
			}(),
			SuppliedGas: GetFeeConfigLastChangedAtGasCost,
			ReadOnly:    false,
			ExpectedErr: "",
		},
		"calling getFeeConfigLastChangedAt from Enabled should succeed": {
			Caller:     allowlisttest.TestEnabledAddr,
			BeforeHook: allowlisttest.SetDefaultRoles(Module.Address),
			InputFn: func(t testing.TB) []byte {
				input, err := PackGetFeeConfigLastChangedAt()
				require.NoError(t, err)
				return input
			},
			// This test is for a successful call. You can set the expected output here.
			// CUSTOM CODE STARTS HERE
			ExpectedRes: func() []byte {

				var output *big.Int   // CUSTOM CODE FOR AN OUTPUT
				output = new(big.Int) // CUSTOM CODE FOR AN OUTPUT
				packedOutput, err := PackGetFeeConfigLastChangedAtOutput(output)
				if err != nil {
					panic(err)
				}
				return packedOutput
			}(),
			SuppliedGas: GetFeeConfigLastChangedAtGasCost,
			ReadOnly:    false,
			ExpectedErr: "",
		},
		"calling getFeeConfigLastChangedAt from Manager should succeed": {
			Caller:     allowlisttest.TestManagerAddr,
			BeforeHook: allowlisttest.SetDefaultRoles(Module.Address),
			InputFn: func(t testing.TB) []byte {
				input, err := PackGetFeeConfigLastChangedAt()
				require.NoError(t, err)
				return input
			},
			// This test is for a successful call. You can set the expected output here.
			// CUSTOM CODE STARTS HERE
			ExpectedRes: func() []byte {

				var output *big.Int   // CUSTOM CODE FOR AN OUTPUT
				output = new(big.Int) // CUSTOM CODE FOR AN OUTPUT
				packedOutput, err := PackGetFeeConfigLastChangedAtOutput(output)
				if err != nil {
					panic(err)
				}
				return packedOutput
			}(),
			SuppliedGas: GetFeeConfigLastChangedAtGasCost,
			ReadOnly:    false,
			ExpectedErr: "",
		},
		"calling getFeeConfigLastChangedAt from Admin should succeed": {
			Caller:     allowlisttest.TestAdminAddr,
			BeforeHook: allowlisttest.SetDefaultRoles(Module.Address),
			InputFn: func(t testing.TB) []byte {
				input, err := PackGetFeeConfigLastChangedAt()
				require.NoError(t, err)
				return input
			},
			// This test is for a successful call. You can set the expected output here.
			// CUSTOM CODE STARTS HERE
			ExpectedRes: func() []byte {

				var output *big.Int   // CUSTOM CODE FOR AN OUTPUT
				output = new(big.Int) // CUSTOM CODE FOR AN OUTPUT
				packedOutput, err := PackGetFeeConfigLastChangedAtOutput(output)
				if err != nil {
					panic(err)
				}
				return packedOutput
			}(),
			SuppliedGas: GetFeeConfigLastChangedAtGasCost,
			ReadOnly:    false,
			ExpectedErr: "",
		},
		"insufficient gas for getFeeConfigLastChangedAt should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				input, err := PackGetFeeConfigLastChangedAt()
				require.NoError(t, err)
				return input
			},
			SuppliedGas: GetFeeConfigLastChangedAtGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vm.ErrOutOfGas.Error(),
		},
		"calling setFeeConfig from NoRole should fail": {
			Caller:     allowlisttest.TestNoRoleAddr,
			BeforeHook: allowlisttest.SetDefaultRoles(Module.Address),
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				var testInput commontype.ACP224FeeConfig
				testInput = commontype.ACP224FeeConfig{}
				input, err := PackSetFeeConfig(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: SetFeeConfigGasCost,
			ReadOnly:    false,
			ExpectedErr: ErrCannotSetFeeConfig.Error(),
		},
		"calling setFeeConfig from Enabled should succeed": {
			Caller:     allowlisttest.TestEnabledAddr,
			BeforeHook: allowlisttest.SetDefaultRoles(Module.Address),
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				var testInput commontype.ACP224FeeConfig
				testInput = commontype.ACP224FeeConfig{}
				input, err := PackSetFeeConfig(testInput)
				require.NoError(t, err)
				return input
			},
			// This test is for a successful call. You can set the expected output here.
			// CUSTOM CODE STARTS HERE
			ExpectedRes: func() []byte {
				// this function does not return an output, leave this one as is
				packedOutput := []byte{}
				return packedOutput
			}(),
			SuppliedGas: SetFeeConfigGasCost,
			ReadOnly:    false,
			ExpectedErr: "",
		},
		"calling setFeeConfig from Manager should succeed": {
			Caller:     allowlisttest.TestManagerAddr,
			BeforeHook: allowlisttest.SetDefaultRoles(Module.Address),
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				var testInput commontype.ACP224FeeConfig
				testInput = commontype.ACP224FeeConfig{}
				input, err := PackSetFeeConfig(testInput)
				require.NoError(t, err)
				return input
			},
			// This test is for a successful call. You can set the expected output here.
			// CUSTOM CODE STARTS HERE
			ExpectedRes: func() []byte {
				// this function does not return an output, leave this one as is
				packedOutput := []byte{}
				return packedOutput
			}(),
			SuppliedGas: SetFeeConfigGasCost,
			ReadOnly:    false,
			ExpectedErr: "",
		},
		"calling setFeeConfig from Admin should succeed": {
			Caller:     allowlisttest.TestAdminAddr,
			BeforeHook: allowlisttest.SetDefaultRoles(Module.Address),
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				var testInput commontype.ACP224FeeConfig
				testInput = commontype.ACP224FeeConfig{}
				input, err := PackSetFeeConfig(testInput)
				require.NoError(t, err)
				return input
			},
			// This test is for a successful call. You can set the expected output here.
			// CUSTOM CODE STARTS HERE
			ExpectedRes: func() []byte {
				// this function does not return an output, leave this one as is
				packedOutput := []byte{}
				return packedOutput
			}(),
			SuppliedGas: SetFeeConfigGasCost,
			ReadOnly:    false,
			ExpectedErr: "",
		},
		"readOnly setFeeConfig should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				var testInput commontype.ACP224FeeConfig
				testInput = commontype.ACP224FeeConfig{}
				input, err := PackSetFeeConfig(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: SetFeeConfigGasCost,
			ReadOnly:    true,
			ExpectedErr: vm.ErrWriteProtection.Error(),
		},
		"insufficient gas for setFeeConfig should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				var testInput commontype.ACP224FeeConfig
				testInput = commontype.ACP224FeeConfig{}
				input, err := PackSetFeeConfig(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: SetFeeConfigGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vm.ErrOutOfGas.Error(),
		},
	}
)

// TestACP224FeeManagerRun tests the Run function of the precompile contract.
func TestACP224FeeManagerRun(t *testing.T) {
	// Run tests with allowlist tests.
	// This adds allowlist tests to your custom tests
	// and runs them all together.
	// Even if you don't add any custom tests, keep this. This will still
	// run the default allowlist tests.
	allowlisttest.RunPrecompileWithAllowListTests(t, Module, tests)
}

// TestPackUnpackFeeConfigUpdatedEventData tests the Pack/UnpackFeeConfigUpdatedEventData.
func TestPackUnpackFeeConfigUpdatedEventData(t *testing.T) {
	// CUSTOM CODE STARTS HERE
	// set test inputs with proper values here
	var senderInput common.Address = common.Address{}

	dataInput := FeeConfigUpdatedEventData{
		OldFeeConfig: commontype.ACP224FeeConfig{},
		NewFeeConfig: commontype.ACP224FeeConfig{},
	}

	_, data, err := PackFeeConfigUpdatedEvent(
		senderInput,
		dataInput,
	)
	require.NoError(t, err)

	unpacked, err := UnpackFeeConfigUpdatedEventData(data)
	require.NoError(t, err)
	require.Equal(t, dataInput, unpacked)
}
