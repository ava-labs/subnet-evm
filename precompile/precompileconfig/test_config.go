// Code generated by MockGen. DO NOT EDIT.
// Source: precompile/precompileconfig/config.go

// Package precompileconfig is a generated GoMock package.
package precompileconfig

import (
	big "math/big"
	reflect "reflect"

	atomic "github.com/ava-labs/avalanchego/chains/atomic"
	ids "github.com/ava-labs/avalanchego/ids"
	warp "github.com/ava-labs/avalanchego/vms/platformvm/warp"
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
)

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// Equal mocks base method.
func (m *MockConfig) Equal(arg0 Config) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockConfigMockRecorder) Equal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockConfig)(nil).Equal), arg0)
}

// IsDisabled mocks base method.
func (m *MockConfig) IsDisabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDisabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDisabled indicates an expected call of IsDisabled.
func (mr *MockConfigMockRecorder) IsDisabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDisabled", reflect.TypeOf((*MockConfig)(nil).IsDisabled))
}

// Key mocks base method.
func (m *MockConfig) Key() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockConfigMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockConfig)(nil).Key))
}

// Timestamp mocks base method.
func (m *MockConfig) Timestamp() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timestamp")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// Timestamp indicates an expected call of Timestamp.
func (mr *MockConfigMockRecorder) Timestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timestamp", reflect.TypeOf((*MockConfig)(nil).Timestamp))
}

// Verify mocks base method.
func (m *MockConfig) Verify() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify")
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockConfigMockRecorder) Verify() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockConfig)(nil).Verify))
}

// MockPrecompilePredicater is a mock of PrecompilePredicater interface.
type MockPrecompilePredicater struct {
	ctrl     *gomock.Controller
	recorder *MockPrecompilePredicaterMockRecorder
}

// MockPrecompilePredicaterMockRecorder is the mock recorder for MockPrecompilePredicater.
type MockPrecompilePredicaterMockRecorder struct {
	mock *MockPrecompilePredicater
}

// NewMockPrecompilePredicater creates a new mock instance.
func NewMockPrecompilePredicater(ctrl *gomock.Controller) *MockPrecompilePredicater {
	mock := &MockPrecompilePredicater{ctrl: ctrl}
	mock.recorder = &MockPrecompilePredicaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrecompilePredicater) EXPECT() *MockPrecompilePredicaterMockRecorder {
	return m.recorder
}

// PredicateGas mocks base method.
func (m *MockPrecompilePredicater) PredicateGas(storageSlots []byte) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PredicateGas", storageSlots)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PredicateGas indicates an expected call of PredicateGas.
func (mr *MockPrecompilePredicaterMockRecorder) PredicateGas(storageSlots interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PredicateGas", reflect.TypeOf((*MockPrecompilePredicater)(nil).PredicateGas), storageSlots)
}

// VerifyPredicate mocks base method.
func (m *MockPrecompilePredicater) VerifyPredicate(predicateContext *PrecompilePredicateContext, storageSlots []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPredicate", predicateContext, storageSlots)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyPredicate indicates an expected call of VerifyPredicate.
func (mr *MockPrecompilePredicaterMockRecorder) VerifyPredicate(predicateContext, storageSlots interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPredicate", reflect.TypeOf((*MockPrecompilePredicater)(nil).VerifyPredicate), predicateContext, storageSlots)
}

// MockProposerPredicater is a mock of ProposerPredicater interface.
type MockProposerPredicater struct {
	ctrl     *gomock.Controller
	recorder *MockProposerPredicaterMockRecorder
}

// MockProposerPredicaterMockRecorder is the mock recorder for MockProposerPredicater.
type MockProposerPredicaterMockRecorder struct {
	mock *MockProposerPredicater
}

// NewMockProposerPredicater creates a new mock instance.
func NewMockProposerPredicater(ctrl *gomock.Controller) *MockProposerPredicater {
	mock := &MockProposerPredicater{ctrl: ctrl}
	mock.recorder = &MockProposerPredicaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProposerPredicater) EXPECT() *MockProposerPredicaterMockRecorder {
	return m.recorder
}

// PredicateGas mocks base method.
func (m *MockProposerPredicater) PredicateGas(storageSlots []byte) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PredicateGas", storageSlots)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PredicateGas indicates an expected call of PredicateGas.
func (mr *MockProposerPredicaterMockRecorder) PredicateGas(storageSlots interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PredicateGas", reflect.TypeOf((*MockProposerPredicater)(nil).PredicateGas), storageSlots)
}

// VerifyPredicate mocks base method.
func (m *MockProposerPredicater) VerifyPredicate(proposerPredicateContext *ProposerPredicateContext, storageSlots []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPredicate", proposerPredicateContext, storageSlots)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyPredicate indicates an expected call of VerifyPredicate.
func (mr *MockProposerPredicaterMockRecorder) VerifyPredicate(proposerPredicateContext, storageSlots interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPredicate", reflect.TypeOf((*MockProposerPredicater)(nil).VerifyPredicate), proposerPredicateContext, storageSlots)
}

// MockSharedMemoryWriter is a mock of SharedMemoryWriter interface.
type MockSharedMemoryWriter struct {
	ctrl     *gomock.Controller
	recorder *MockSharedMemoryWriterMockRecorder
}

// MockSharedMemoryWriterMockRecorder is the mock recorder for MockSharedMemoryWriter.
type MockSharedMemoryWriterMockRecorder struct {
	mock *MockSharedMemoryWriter
}

// NewMockSharedMemoryWriter creates a new mock instance.
func NewMockSharedMemoryWriter(ctrl *gomock.Controller) *MockSharedMemoryWriter {
	mock := &MockSharedMemoryWriter{ctrl: ctrl}
	mock.recorder = &MockSharedMemoryWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSharedMemoryWriter) EXPECT() *MockSharedMemoryWriterMockRecorder {
	return m.recorder
}

// AddSharedMemoryRequests mocks base method.
func (m *MockSharedMemoryWriter) AddSharedMemoryRequests(chainID ids.ID, requests *atomic.Requests) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSharedMemoryRequests", chainID, requests)
}

// AddSharedMemoryRequests indicates an expected call of AddSharedMemoryRequests.
func (mr *MockSharedMemoryWriterMockRecorder) AddSharedMemoryRequests(chainID, requests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSharedMemoryRequests", reflect.TypeOf((*MockSharedMemoryWriter)(nil).AddSharedMemoryRequests), chainID, requests)
}

// MockWarpMessageWriter is a mock of WarpMessageWriter interface.
type MockWarpMessageWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWarpMessageWriterMockRecorder
}

// MockWarpMessageWriterMockRecorder is the mock recorder for MockWarpMessageWriter.
type MockWarpMessageWriterMockRecorder struct {
	mock *MockWarpMessageWriter
}

// NewMockWarpMessageWriter creates a new mock instance.
func NewMockWarpMessageWriter(ctrl *gomock.Controller) *MockWarpMessageWriter {
	mock := &MockWarpMessageWriter{ctrl: ctrl}
	mock.recorder = &MockWarpMessageWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWarpMessageWriter) EXPECT() *MockWarpMessageWriterMockRecorder {
	return m.recorder
}

// AddMessage mocks base method.
func (m *MockWarpMessageWriter) AddMessage(unsignedMessage *warp.UnsignedMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessage", unsignedMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMessage indicates an expected call of AddMessage.
func (mr *MockWarpMessageWriterMockRecorder) AddMessage(unsignedMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessage", reflect.TypeOf((*MockWarpMessageWriter)(nil).AddMessage), unsignedMessage)
}

// MockAccepter is a mock of Accepter interface.
type MockAccepter struct {
	ctrl     *gomock.Controller
	recorder *MockAccepterMockRecorder
}

// MockAccepterMockRecorder is the mock recorder for MockAccepter.
type MockAccepterMockRecorder struct {
	mock *MockAccepter
}

// NewMockAccepter creates a new mock instance.
func NewMockAccepter(ctrl *gomock.Controller) *MockAccepter {
	mock := &MockAccepter{ctrl: ctrl}
	mock.recorder = &MockAccepterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccepter) EXPECT() *MockAccepterMockRecorder {
	return m.recorder
}

// Accept mocks base method.
func (m *MockAccepter) Accept(acceptCtx *AcceptContext, txHash common.Hash, logIndex int, topics []common.Hash, logData []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accept", acceptCtx, txHash, logIndex, topics, logData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Accept indicates an expected call of Accept.
func (mr *MockAccepterMockRecorder) Accept(acceptCtx, txHash, logIndex, topics, logData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockAccepter)(nil).Accept), acceptCtx, txHash, logIndex, topics, logData)
}
