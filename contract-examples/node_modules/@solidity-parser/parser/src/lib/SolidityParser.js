// Generated from antlr/Solidity.g4 by ANTLR 4.9
// jshint ignore: start
import antlr4 from 'antlr4';
import SolidityListener from './SolidityListener.js';

const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003\u0085\u044c\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
    "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004",
    "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004",
    "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004",
    "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004",
    "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004",
    "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004",
    "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0003\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0007\u0002\u00c4\n",
    "\u0002\f\u0002\u000e\u0002\u00c7\u000b\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004",
    "\u0003\u0004\u0003\u0005\u0003\u0005\u0005\u0005\u00d4\n\u0005\u0003",
    "\u0006\u0003\u0006\u0005\u0006\u00d8\n\u0006\u0003\u0006\u0007\u0006",
    "\u00db\n\u0006\f\u0006\u000e\u0006\u00de\u000b\u0006\u0003\u0007\u0003",
    "\u0007\u0003\b\u0005\b\u00e3\n\b\u0003\b\u0003\b\u0005\b\u00e7\n\b\u0003",
    "\b\u0005\b\u00ea\n\b\u0003\t\u0003\t\u0003\t\u0005\t\u00ef\n\t\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0005\n\u00f5\n\n\u0003\n\u0003\n\u0003\n",
    "\u0003\n\u0005\n\u00fb\n\n\u0003\n\u0003\n\u0005\n\u00ff\n\n\u0003\n",
    "\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0007\n\u0109",
    "\n\n\f\n\u000e\n\u010c\u000b\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0005\n\u0113\n\n\u0003\u000b\u0005\u000b\u0116\n\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000b",
    "\u011e\n\u000b\f\u000b\u000e\u000b\u0121\u000b\u000b\u0005\u000b\u0123",
    "\n\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u0127\n\u000b\f\u000b\u000e",
    "\u000b\u012a\u000b\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003",
    "\f\u0005\f\u0131\n\f\u0003\f\u0005\f\u0134\n\f\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u013d\n\r\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0007",
    "\u000e\u0146\n\u000e\f\u000e\u000e\u000e\u0149\u000b\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0005\u000e\u014e\n\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0005\u0010\u015e\n\u0010\u0003\u0010\u0003\u0010\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0007\u0011\u016a\n\u0011\f\u0011\u000e\u0011\u016d\u000b",
    "\u0011\u0005\u0011\u016f\n\u0011\u0003\u0011\u0003\u0011\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0005\u0012\u0176\n\u0012\u0003\u0012\u0003",
    "\u0012\u0007\u0012\u017a\n\u0012\f\u0012\u000e\u0012\u017d\u000b\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013",
    "\u0184\n\u0013\u0003\u0013\u0005\u0013\u0187\n\u0013\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u018d\n\u0014\u0003\u0014",
    "\u0003\u0014\u0005\u0014\u0191\n\u0014\u0003\u0015\u0003\u0015\u0005",
    "\u0015\u0195\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015",
    "\u019a\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0007\u0017\u01a7\n\u0017\f\u0017\u000e\u0017\u01aa\u000b\u0017",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u01b0\n",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u01ba\n\u001a\u0003\u001a",
    "\u0003\u001a\u0007\u001a\u01be\n\u001a\f\u001a\u000e\u001a\u01c1\u000b",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0007\u001b\u01c9\n\u001b\f\u001b\u000e\u001b\u01cc\u000b\u001b",
    "\u0005\u001b\u01ce\n\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003",
    "\u001c\u0005\u001c\u01d4\n\u001c\u0003\u001c\u0005\u001c\u01d7\n\u001c",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u01dd\n",
    "\u001d\f\u001d\u000e\u001d\u01e0\u000b\u001d\u0005\u001d\u01e2\n\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0005\u001e\u01e8\n",
    "\u001e\u0003\u001e\u0005\u001e\u01eb\n\u001e\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0007\u001f\u01f1\n\u001f\f\u001f\u000e\u001f",
    "\u01f4\u000b\u001f\u0005\u001f\u01f6\n\u001f\u0003\u001f\u0003\u001f",
    "\u0003 \u0003 \u0005 \u01fc\n \u0003!\u0003!\u0005!\u0200\n!\u0003!",
    "\u0003!\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0005",
    "\"\u020b\n\"\u0003\"\u0003\"\u0003\"\u0005\"\u0210\n\"\u0003\"\u0007",
    "\"\u0213\n\"\f\"\u000e\"\u0216\u000b\"\u0003#\u0003#\u0003#\u0007#\u021b",
    "\n#\f#\u000e#\u021e\u000b#\u0003$\u0003$\u0005$\u0222\n$\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0007&\u0230\n&\f&\u000e&\u0233\u000b&\u0003&\u0003&\u0005&\u0237",
    "\n&\u0003\'\u0003\'\u0003(\u0003(\u0003)\u0003)\u0007)\u023f\n)\f)\u000e",
    ")\u0242\u000b)\u0003)\u0003)\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u0254",
    "\n*\u0003+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0005,\u0260\n,\u0003-\u0003-\u0003-\u0005-\u0265\n-\u0003-\u0003",
    "-\u0006-\u0269\n-\r-\u000e-\u026a\u0003.\u0003.\u0005.\u026f\n.\u0003",
    ".\u0005.\u0272\n.\u0003.\u0003.\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u00030\u00030\u00050\u027e\n0\u00031\u00031\u00031\u00032\u00032\u0003",
    "2\u00032\u00052\u0287\n2\u00032\u00032\u00052\u028b\n2\u00032\u0005",
    "2\u028e\n2\u00032\u00032\u00032\u00033\u00033\u00053\u0295\n3\u0003",
    "3\u00033\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u0003",
    "5\u00035\u00035\u00036\u00036\u00036\u00037\u00037\u00057\u02a9\n7\u0003",
    "7\u00037\u00038\u00038\u00038\u00039\u00039\u00039\u00039\u0003:\u0003",
    ":\u0003:\u0003:\u0003:\u0003:\u0003:\u0005:\u02bb\n:\u0003:\u0003:\u0005",
    ":\u02bf\n:\u0003:\u0003:\u0003;\u0005;\u02c4\n;\u0003;\u0003;\u0005",
    ";\u02c8\n;\u0007;\u02ca\n;\f;\u000e;\u02cd\u000b;\u0003<\u0003<\u0005",
    "<\u02d1\n<\u0003<\u0007<\u02d4\n<\f<\u000e<\u02d7\u000b<\u0003<\u0005",
    "<\u02da\n<\u0003<\u0003<\u0003=\u0003=\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0005>\u02f2\n>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0005>\u0323\n>\u0003>\u0003>\u0003>\u0003>\u0005>\u0329",
    "\n>\u0003>\u0003>\u0005>\u032d\n>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0007",
    ">\u033d\n>\f>\u000e>\u0340\u000b>\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0003?\u0003?\u0005?\u0349\n?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0005?\u0351\n?\u0005?\u0353\n?\u0003@\u0003@\u0003@\u0007@\u0358",
    "\n@\f@\u000e@\u035b\u000b@\u0003A\u0003A\u0003A\u0007A\u0360\nA\fA\u000e",
    "A\u0363\u000bA\u0003A\u0005A\u0366\nA\u0003B\u0003B\u0003B\u0003B\u0003",
    "C\u0003C\u0005C\u036e\nC\u0003C\u0003C\u0005C\u0372\nC\u0005C\u0374",
    "\nC\u0003D\u0003D\u0003D\u0003D\u0003D\u0003E\u0003E\u0007E\u037d\n",
    "E\fE\u000eE\u0380\u000bE\u0003E\u0003E\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0005F\u0396\nF\u0003G\u0003G\u0003G\u0005G\u039b",
    "\nG\u0003H\u0003H\u0003H\u0003H\u0003I\u0003I\u0003I\u0003I\u0005I\u03a5",
    "\nI\u0003I\u0003I\u0005I\u03a9\nI\u0003I\u0003I\u0007I\u03ad\nI\fI\u000e",
    "I\u03b0\u000bI\u0003I\u0005I\u03b3\nI\u0003J\u0003J\u0003J\u0003J\u0005",
    "J\u03b9\nJ\u0003K\u0003K\u0003K\u0003K\u0003L\u0003L\u0003L\u0003L\u0003",
    "L\u0003L\u0005L\u03c5\nL\u0003M\u0003M\u0003M\u0007M\u03ca\nM\fM\u000e",
    "M\u03cd\u000bM\u0003N\u0003N\u0003N\u0003O\u0003O\u0003O\u0003P\u0003",
    "P\u0003P\u0007P\u03d8\nP\fP\u000eP\u03db\u000bP\u0003Q\u0003Q\u0003",
    "Q\u0003Q\u0003Q\u0003Q\u0005Q\u03e3\nQ\u0003R\u0003R\u0003R\u0003R\u0005",
    "R\u03e9\nR\u0003R\u0003R\u0005R\u03ed\nR\u0003R\u0003R\u0003S\u0003",
    "S\u0003S\u0003T\u0003T\u0003T\u0005T\u03f7\nT\u0003T\u0003T\u0003T\u0005",
    "T\u03fc\nT\u0003T\u0003T\u0003U\u0003U\u0003U\u0003U\u0003V\u0003V\u0003",
    "V\u0003V\u0005V\u0408\nV\u0003W\u0003W\u0003W\u0003W\u0003X\u0003X\u0005",
    "X\u0410\nX\u0003X\u0003X\u0005X\u0414\nX\u0007X\u0416\nX\fX\u000eX\u0419",
    "\u000bX\u0003X\u0003X\u0003X\u0003X\u0003X\u0007X\u0420\nX\fX\u000e",
    "X\u0423\u000bX\u0005X\u0425\nX\u0003X\u0005X\u0428\nX\u0003Y\u0003Y",
    "\u0005Y\u042c\nY\u0003Z\u0003Z\u0005Z\u0430\nZ\u0003[\u0003[\u0003\\",
    "\u0006\\\u0435\n\\\r\\\u000e\\\u0436\u0003]\u0003]\u0003]\u0003]\u0003",
    "]\u0007]\u043e\n]\f]\u000e]\u0441\u000b]\u0003]\u0003]\u0005]\u0445",
    "\n]\u0003^\u0006^\u0448\n^\r^\u000e^\u0449\u0003^\u0002\u0004Bz_\u0002",
    "\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e",
    " \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084",
    "\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c",
    "\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4",
    "\u00b6\u00b8\u00ba\u0002\u0011\u0003\u0002\u0006\f\u0003\u0002\u0015",
    "\u0017\u0003\u0002)+\u0006\u0002oovvzz||\u0005\u0002%%7:bf\u0003\u0002",
    ";<\u0003\u0002?@\u0003\u0002AB\u0004\u0002\u000f\u000fEF\u0003\u0002",
    "GH\u0003\u0002\b\u000b\u0003\u0002KL\u0004\u0002\f\fOX\u0003\u0002h",
    "i\b\u0002\u0010\u0010++``rrvv\u007f\u0080\u0002\u04c8\u0002\u00c5\u0003",
    "\u0002\u0002\u0002\u0004\u00ca\u0003\u0002\u0002\u0002\u0006\u00cf\u0003",
    "\u0002\u0002\u0002\b\u00d3\u0003\u0002\u0002\u0002\n\u00d5\u0003\u0002",
    "\u0002\u0002\f\u00df\u0003\u0002\u0002\u0002\u000e\u00e9\u0003\u0002",
    "\u0002\u0002\u0010\u00eb\u0003\u0002\u0002\u0002\u0012\u0112\u0003\u0002",
    "\u0002\u0002\u0014\u0115\u0003\u0002\u0002\u0002\u0016\u012d\u0003\u0002",
    "\u0002\u0002\u0018\u013c\u0003\u0002\u0002\u0002\u001a\u013e\u0003\u0002",
    "\u0002\u0002\u001c\u0151\u0003\u0002\u0002\u0002\u001e\u0158\u0003\u0002",
    "\u0002\u0002 \u0161\u0003\u0002\u0002\u0002\"\u0172\u0003\u0002\u0002",
    "\u0002$\u0180\u0003\u0002\u0002\u0002&\u0188\u0003\u0002\u0002\u0002",
    "(\u0199\u0003\u0002\u0002\u0002*\u019b\u0003\u0002\u0002\u0002,\u01a8",
    "\u0003\u0002\u0002\u0002.\u01ab\u0003\u0002\u0002\u00020\u01b3\u0003",
    "\u0002\u0002\u00022\u01b5\u0003\u0002\u0002\u00024\u01c4\u0003\u0002",
    "\u0002\u00026\u01d1\u0003\u0002\u0002\u00028\u01d8\u0003\u0002\u0002",
    "\u0002:\u01e5\u0003\u0002\u0002\u0002<\u01ec\u0003\u0002\u0002\u0002",
    ">\u01f9\u0003\u0002\u0002\u0002@\u01fd\u0003\u0002\u0002\u0002B\u020a",
    "\u0003\u0002\u0002\u0002D\u0217\u0003\u0002\u0002\u0002F\u0221\u0003",
    "\u0002\u0002\u0002H\u0223\u0003\u0002\u0002\u0002J\u022a\u0003\u0002",
    "\u0002\u0002L\u0238\u0003\u0002\u0002\u0002N\u023a\u0003\u0002\u0002",
    "\u0002P\u023c\u0003\u0002\u0002\u0002R\u0253\u0003\u0002\u0002\u0002",
    "T\u0255\u0003\u0002\u0002\u0002V\u0258\u0003\u0002\u0002\u0002X\u0261",
    "\u0003\u0002\u0002\u0002Z\u026c\u0003\u0002\u0002\u0002\\\u0275\u0003",
    "\u0002\u0002\u0002^\u027d\u0003\u0002\u0002\u0002`\u027f\u0003\u0002",
    "\u0002\u0002b\u0282\u0003\u0002\u0002\u0002d\u0292\u0003\u0002\u0002",
    "\u0002f\u0298\u0003\u0002\u0002\u0002h\u02a0\u0003\u0002\u0002\u0002",
    "j\u02a3\u0003\u0002\u0002\u0002l\u02a6\u0003\u0002\u0002\u0002n\u02ac",
    "\u0003\u0002\u0002\u0002p\u02af\u0003\u0002\u0002\u0002r\u02ba\u0003",
    "\u0002\u0002\u0002t\u02c3\u0003\u0002\u0002\u0002v\u02ce\u0003\u0002",
    "\u0002\u0002x\u02dd\u0003\u0002\u0002\u0002z\u02f1\u0003\u0002\u0002",
    "\u0002|\u0352\u0003\u0002\u0002\u0002~\u0354\u0003\u0002\u0002\u0002",
    "\u0080\u035c\u0003\u0002\u0002\u0002\u0082\u0367\u0003\u0002\u0002\u0002",
    "\u0084\u0373\u0003\u0002\u0002\u0002\u0086\u0375\u0003\u0002\u0002\u0002",
    "\u0088\u037a\u0003\u0002\u0002\u0002\u008a\u0395\u0003\u0002\u0002\u0002",
    "\u008c\u039a\u0003\u0002\u0002\u0002\u008e\u039c\u0003\u0002\u0002\u0002",
    "\u0090\u03a4\u0003\u0002\u0002\u0002\u0092\u03b4\u0003\u0002\u0002\u0002",
    "\u0094\u03ba\u0003\u0002\u0002\u0002\u0096\u03c4\u0003\u0002\u0002\u0002",
    "\u0098\u03c6\u0003\u0002\u0002\u0002\u009a\u03ce\u0003\u0002\u0002\u0002",
    "\u009c\u03d1\u0003\u0002\u0002\u0002\u009e\u03d4\u0003\u0002\u0002\u0002",
    "\u00a0\u03e2\u0003\u0002\u0002\u0002\u00a2\u03e4\u0003\u0002\u0002\u0002",
    "\u00a4\u03f0\u0003\u0002\u0002\u0002\u00a6\u03f3\u0003\u0002\u0002\u0002",
    "\u00a8\u03ff\u0003\u0002\u0002\u0002\u00aa\u0407\u0003\u0002\u0002\u0002",
    "\u00ac\u0409\u0003\u0002\u0002\u0002\u00ae\u0427\u0003\u0002\u0002\u0002",
    "\u00b0\u042b\u0003\u0002\u0002\u0002\u00b2\u042d\u0003\u0002\u0002\u0002",
    "\u00b4\u0431\u0003\u0002\u0002\u0002\u00b6\u0434\u0003\u0002\u0002\u0002",
    "\u00b8\u0438\u0003\u0002\u0002\u0002\u00ba\u0447\u0003\u0002\u0002\u0002",
    "\u00bc\u00c4\u0005\u0004\u0003\u0002\u00bd\u00c4\u0005\u0012\n\u0002",
    "\u00be\u00c4\u0005\u0014\u000b\u0002\u00bf\u00c4\u00052\u001a\u0002",
    "\u00c0\u00c4\u0005 \u0011\u0002\u00c1\u00c4\u0005&\u0014\u0002\u00c2",
    "\u00c4\u0005\u001c\u000f\u0002\u00c3\u00bc\u0003\u0002\u0002\u0002\u00c3",
    "\u00bd\u0003\u0002\u0002\u0002\u00c3\u00be\u0003\u0002\u0002\u0002\u00c3",
    "\u00bf\u0003\u0002\u0002\u0002\u00c3\u00c0\u0003\u0002\u0002\u0002\u00c3",
    "\u00c1\u0003\u0002\u0002\u0002\u00c3\u00c2\u0003\u0002\u0002\u0002\u00c4",
    "\u00c7\u0003\u0002\u0002\u0002\u00c5\u00c3\u0003\u0002\u0002\u0002\u00c5",
    "\u00c6\u0003\u0002\u0002\u0002\u00c6\u00c8\u0003\u0002\u0002\u0002\u00c7",
    "\u00c5\u0003\u0002\u0002\u0002\u00c8\u00c9\u0007\u0002\u0002\u0003\u00c9",
    "\u0003\u0003\u0002\u0002\u0002\u00ca\u00cb\u0007\u0003\u0002\u0002\u00cb",
    "\u00cc\u0005\u0006\u0004\u0002\u00cc\u00cd\u0005\b\u0005\u0002\u00cd",
    "\u00ce\u0007\u0004\u0002\u0002\u00ce\u0005\u0003\u0002\u0002\u0002\u00cf",
    "\u00d0\u0005\u00b4[\u0002\u00d0\u0007\u0003\u0002\u0002\u0002\u00d1",
    "\u00d4\u0005\n\u0006\u0002\u00d2\u00d4\u0005z>\u0002\u00d3\u00d1\u0003",
    "\u0002\u0002\u0002\u00d3\u00d2\u0003\u0002\u0002\u0002\u00d4\t\u0003",
    "\u0002\u0002\u0002\u00d5\u00dc\u0005\u000e\b\u0002\u00d6\u00d8\u0007",
    "\u0005\u0002\u0002\u00d7\u00d6\u0003\u0002\u0002\u0002\u00d7\u00d8\u0003",
    "\u0002\u0002\u0002\u00d8\u00d9\u0003\u0002\u0002\u0002\u00d9\u00db\u0005",
    "\u000e\b\u0002\u00da\u00d7\u0003\u0002\u0002\u0002\u00db\u00de\u0003",
    "\u0002\u0002\u0002\u00dc\u00da\u0003\u0002\u0002\u0002\u00dc\u00dd\u0003",
    "\u0002\u0002\u0002\u00dd\u000b\u0003\u0002\u0002\u0002\u00de\u00dc\u0003",
    "\u0002\u0002\u0002\u00df\u00e0\t\u0002\u0002\u0002\u00e0\r\u0003\u0002",
    "\u0002\u0002\u00e1\u00e3\u0005\f\u0007\u0002\u00e2\u00e1\u0003\u0002",
    "\u0002\u0002\u00e2\u00e3\u0003\u0002\u0002\u0002\u00e3\u00e4\u0003\u0002",
    "\u0002\u0002\u00e4\u00ea\u0007\u0082\u0002\u0002\u00e5\u00e7\u0005\f",
    "\u0007\u0002\u00e6\u00e5\u0003\u0002\u0002\u0002\u00e6\u00e7\u0003\u0002",
    "\u0002\u0002\u00e7\u00e8\u0003\u0002\u0002\u0002\u00e8\u00ea\u0007h",
    "\u0002\u0002\u00e9\u00e2\u0003\u0002\u0002\u0002\u00e9\u00e6\u0003\u0002",
    "\u0002\u0002\u00ea\u000f\u0003\u0002\u0002\u0002\u00eb\u00ee\u0005\u00b4",
    "[\u0002\u00ec\u00ed\u0007\r\u0002\u0002\u00ed\u00ef\u0005\u00b4[\u0002",
    "\u00ee\u00ec\u0003\u0002\u0002\u0002\u00ee\u00ef\u0003\u0002\u0002\u0002",
    "\u00ef\u0011\u0003\u0002\u0002\u0002\u00f0\u00f1\u0007\u000e\u0002\u0002",
    "\u00f1\u00f4\u0007\u0081\u0002\u0002\u00f2\u00f3\u0007\r\u0002\u0002",
    "\u00f3\u00f5\u0005\u00b4[\u0002\u00f4\u00f2\u0003\u0002\u0002\u0002",
    "\u00f4\u00f5\u0003\u0002\u0002\u0002\u00f5\u00f6\u0003\u0002\u0002\u0002",
    "\u00f6\u0113\u0007\u0004\u0002\u0002\u00f7\u00fa\u0007\u000e\u0002\u0002",
    "\u00f8\u00fb\u0007\u000f\u0002\u0002\u00f9\u00fb\u0005\u00b4[\u0002",
    "\u00fa\u00f8\u0003\u0002\u0002\u0002\u00fa\u00f9\u0003\u0002\u0002\u0002",
    "\u00fb\u00fe\u0003\u0002\u0002\u0002\u00fc\u00fd\u0007\r\u0002\u0002",
    "\u00fd\u00ff\u0005\u00b4[\u0002\u00fe\u00fc\u0003\u0002\u0002\u0002",
    "\u00fe\u00ff\u0003\u0002\u0002\u0002\u00ff\u0100\u0003\u0002\u0002\u0002",
    "\u0100\u0101\u0007\u0010\u0002\u0002\u0101\u0102\u0007\u0081\u0002\u0002",
    "\u0102\u0113\u0007\u0004\u0002\u0002\u0103\u0104\u0007\u000e\u0002\u0002",
    "\u0104\u0105\u0007\u0011\u0002\u0002\u0105\u010a\u0005\u0010\t\u0002",
    "\u0106\u0107\u0007\u0012\u0002\u0002\u0107\u0109\u0005\u0010\t\u0002",
    "\u0108\u0106\u0003\u0002\u0002\u0002\u0109\u010c\u0003\u0002\u0002\u0002",
    "\u010a\u0108\u0003\u0002\u0002\u0002\u010a\u010b\u0003\u0002\u0002\u0002",
    "\u010b\u010d\u0003\u0002\u0002\u0002\u010c\u010a\u0003\u0002\u0002\u0002",
    "\u010d\u010e\u0007\u0013\u0002\u0002\u010e\u010f\u0007\u0010\u0002\u0002",
    "\u010f\u0110\u0007\u0081\u0002\u0002\u0110\u0111\u0007\u0004\u0002\u0002",
    "\u0111\u0113\u0003\u0002\u0002\u0002\u0112\u00f0\u0003\u0002\u0002\u0002",
    "\u0112\u00f7\u0003\u0002\u0002\u0002\u0112\u0103\u0003\u0002\u0002\u0002",
    "\u0113\u0013\u0003\u0002\u0002\u0002\u0114\u0116\u0007\u0014\u0002\u0002",
    "\u0115\u0114\u0003\u0002\u0002\u0002\u0115\u0116\u0003\u0002\u0002\u0002",
    "\u0116\u0117\u0003\u0002\u0002\u0002\u0117\u0118\t\u0003\u0002\u0002",
    "\u0118\u0122\u0005\u00b4[\u0002\u0119\u011a\u0007\u0018\u0002\u0002",
    "\u011a\u011f\u0005\u0016\f\u0002\u011b\u011c\u0007\u0012\u0002\u0002",
    "\u011c\u011e\u0005\u0016\f\u0002\u011d\u011b\u0003\u0002\u0002\u0002",
    "\u011e\u0121\u0003\u0002\u0002\u0002\u011f\u011d\u0003\u0002\u0002\u0002",
    "\u011f\u0120\u0003\u0002\u0002\u0002\u0120\u0123\u0003\u0002\u0002\u0002",
    "\u0121\u011f\u0003\u0002\u0002\u0002\u0122\u0119\u0003\u0002\u0002\u0002",
    "\u0122\u0123\u0003\u0002\u0002\u0002\u0123\u0124\u0003\u0002\u0002\u0002",
    "\u0124\u0128\u0007\u0011\u0002\u0002\u0125\u0127\u0005\u0018\r\u0002",
    "\u0126\u0125\u0003\u0002\u0002\u0002\u0127\u012a\u0003\u0002\u0002\u0002",
    "\u0128\u0126\u0003\u0002\u0002\u0002\u0128\u0129\u0003\u0002\u0002\u0002",
    "\u0129\u012b\u0003\u0002\u0002\u0002\u012a\u0128\u0003\u0002\u0002\u0002",
    "\u012b\u012c\u0007\u0013\u0002\u0002\u012c\u0015\u0003\u0002\u0002\u0002",
    "\u012d\u0133\u0005D#\u0002\u012e\u0130\u0007\u0019\u0002\u0002\u012f",
    "\u0131\u0005~@\u0002\u0130\u012f\u0003\u0002\u0002\u0002\u0130\u0131",
    "\u0003\u0002\u0002\u0002\u0131\u0132\u0003\u0002\u0002\u0002\u0132\u0134",
    "\u0007\u001a\u0002\u0002\u0133\u012e\u0003\u0002\u0002\u0002\u0133\u0134",
    "\u0003\u0002\u0002\u0002\u0134\u0017\u0003\u0002\u0002\u0002\u0135\u013d",
    "\u0005\u001a\u000e\u0002\u0136\u013d\u0005\u001e\u0010\u0002\u0137\u013d",
    "\u0005 \u0011\u0002\u0138\u013d\u0005\"\u0012\u0002\u0139\u013d\u0005",
    "&\u0014\u0002\u013a\u013d\u0005.\u0018\u0002\u013b\u013d\u00052\u001a",
    "\u0002\u013c\u0135\u0003\u0002\u0002\u0002\u013c\u0136\u0003\u0002\u0002",
    "\u0002\u013c\u0137\u0003\u0002\u0002\u0002\u013c\u0138\u0003\u0002\u0002",
    "\u0002\u013c\u0139\u0003\u0002\u0002\u0002\u013c\u013a\u0003\u0002\u0002",
    "\u0002\u013c\u013b\u0003\u0002\u0002\u0002\u013d\u0019\u0003\u0002\u0002",
    "\u0002\u013e\u0147\u0005B\"\u0002\u013f\u0146\u0007x\u0002\u0002\u0140",
    "\u0146\u0007u\u0002\u0002\u0141\u0146\u0007w\u0002\u0002\u0142\u0146",
    "\u0007o\u0002\u0002\u0143\u0146\u0007p\u0002\u0002\u0144\u0146\u0005",
    "\u00b8]\u0002\u0145\u013f\u0003\u0002\u0002\u0002\u0145\u0140\u0003",
    "\u0002\u0002\u0002\u0145\u0141\u0003\u0002\u0002\u0002\u0145\u0142\u0003",
    "\u0002\u0002\u0002\u0145\u0143\u0003\u0002\u0002\u0002\u0145\u0144\u0003",
    "\u0002\u0002\u0002\u0146\u0149\u0003\u0002\u0002\u0002\u0147\u0145\u0003",
    "\u0002\u0002\u0002\u0147\u0148\u0003\u0002\u0002\u0002\u0148\u014a\u0003",
    "\u0002\u0002\u0002\u0149\u0147\u0003\u0002\u0002\u0002\u014a\u014d\u0005",
    "\u00b4[\u0002\u014b\u014c\u0007\f\u0002\u0002\u014c\u014e\u0005z>\u0002",
    "\u014d\u014b\u0003\u0002\u0002\u0002\u014d\u014e\u0003\u0002\u0002\u0002",
    "\u014e\u014f\u0003\u0002\u0002\u0002\u014f\u0150\u0007\u0004\u0002\u0002",
    "\u0150\u001b\u0003\u0002\u0002\u0002\u0151\u0152\u0005B\"\u0002\u0152",
    "\u0153\u0007o\u0002\u0002\u0153\u0154\u0005\u00b4[\u0002\u0154\u0155",
    "\u0007\f\u0002\u0002\u0155\u0156\u0005z>\u0002\u0156\u0157\u0007\u0004",
    "\u0002\u0002\u0157\u001d\u0003\u0002\u0002\u0002\u0158\u0159\u0007\u001b",
    "\u0002\u0002\u0159\u015a\u0005\u00b4[\u0002\u015a\u015d\u0007\u001c",
    "\u0002\u0002\u015b\u015e\u0007\u000f\u0002\u0002\u015c\u015e\u0005B",
    "\"\u0002\u015d\u015b\u0003\u0002\u0002\u0002\u015d\u015c\u0003\u0002",
    "\u0002\u0002\u015e\u015f\u0003\u0002\u0002\u0002\u015f\u0160\u0007\u0004",
    "\u0002\u0002\u0160\u001f\u0003\u0002\u0002\u0002\u0161\u0162\u0007\u001d",
    "\u0002\u0002\u0162\u0163\u0005\u00b4[\u0002\u0163\u016e\u0007\u0011",
    "\u0002\u0002\u0164\u0165\u0005@!\u0002\u0165\u016b\u0007\u0004\u0002",
    "\u0002\u0166\u0167\u0005@!\u0002\u0167\u0168\u0007\u0004\u0002\u0002",
    "\u0168\u016a\u0003\u0002\u0002\u0002\u0169\u0166\u0003\u0002\u0002\u0002",
    "\u016a\u016d\u0003\u0002\u0002\u0002\u016b\u0169\u0003\u0002\u0002\u0002",
    "\u016b\u016c\u0003\u0002\u0002\u0002\u016c\u016f\u0003\u0002\u0002\u0002",
    "\u016d\u016b\u0003\u0002\u0002\u0002\u016e\u0164\u0003\u0002\u0002\u0002",
    "\u016e\u016f\u0003\u0002\u0002\u0002\u016f\u0170\u0003\u0002\u0002\u0002",
    "\u0170\u0171\u0007\u0013\u0002\u0002\u0171!\u0003\u0002\u0002\u0002",
    "\u0172\u0173\u0007\u001e\u0002\u0002\u0173\u0175\u0005\u00b4[\u0002",
    "\u0174\u0176\u00054\u001b\u0002\u0175\u0174\u0003\u0002\u0002\u0002",
    "\u0175\u0176\u0003\u0002\u0002\u0002\u0176\u017b\u0003\u0002\u0002\u0002",
    "\u0177\u017a\u0007y\u0002\u0002\u0178\u017a\u0005\u00b8]\u0002\u0179",
    "\u0177\u0003\u0002\u0002\u0002\u0179\u0178\u0003\u0002\u0002\u0002\u017a",
    "\u017d\u0003\u0002\u0002\u0002\u017b\u0179\u0003\u0002\u0002\u0002\u017b",
    "\u017c\u0003\u0002\u0002\u0002\u017c\u017e\u0003\u0002\u0002\u0002\u017d",
    "\u017b\u0003\u0002\u0002\u0002\u017e\u017f\u0005P)\u0002\u017f#\u0003",
    "\u0002\u0002\u0002\u0180\u0186\u0005\u00b4[\u0002\u0181\u0183\u0007",
    "\u0019\u0002\u0002\u0182\u0184\u0005~@\u0002\u0183\u0182\u0003\u0002",
    "\u0002\u0002\u0183\u0184\u0003\u0002\u0002\u0002\u0184\u0185\u0003\u0002",
    "\u0002\u0002\u0185\u0187\u0007\u001a\u0002\u0002\u0186\u0181\u0003\u0002",
    "\u0002\u0002\u0186\u0187\u0003\u0002\u0002\u0002\u0187%\u0003\u0002",
    "\u0002\u0002\u0188\u0189\u0005(\u0015\u0002\u0189\u018a\u00054\u001b",
    "\u0002\u018a\u018c\u0005,\u0017\u0002\u018b\u018d\u0005*\u0016\u0002",
    "\u018c\u018b\u0003\u0002\u0002\u0002\u018c\u018d\u0003\u0002\u0002\u0002",
    "\u018d\u0190\u0003\u0002\u0002\u0002\u018e\u0191\u0007\u0004\u0002\u0002",
    "\u018f\u0191\u0005P)\u0002\u0190\u018e\u0003\u0002\u0002\u0002\u0190",
    "\u018f\u0003\u0002\u0002\u0002\u0191\'\u0003\u0002\u0002\u0002\u0192",
    "\u0194\u0007\u001f\u0002\u0002\u0193\u0195\u0005\u00b4[\u0002\u0194",
    "\u0193\u0003\u0002\u0002\u0002\u0194\u0195\u0003\u0002\u0002\u0002\u0195",
    "\u019a\u0003\u0002\u0002\u0002\u0196\u019a\u0007}\u0002\u0002\u0197",
    "\u019a\u0007~\u0002\u0002\u0198\u019a\u0007\u007f\u0002\u0002\u0199",
    "\u0192\u0003\u0002\u0002\u0002\u0199\u0196\u0003\u0002\u0002\u0002\u0199",
    "\u0197\u0003\u0002\u0002\u0002\u0199\u0198\u0003\u0002\u0002\u0002\u019a",
    ")\u0003\u0002\u0002\u0002\u019b\u019c\u0007 \u0002\u0002\u019c\u019d",
    "\u00054\u001b\u0002\u019d+\u0003\u0002\u0002\u0002\u019e\u01a7\u0007",
    "s\u0002\u0002\u019f\u01a7\u0007x\u0002\u0002\u01a0\u01a7\u0007u\u0002",
    "\u0002\u01a1\u01a7\u0007w\u0002\u0002\u01a2\u01a7\u0007y\u0002\u0002",
    "\u01a3\u01a7\u0005N(\u0002\u01a4\u01a7\u0005$\u0013\u0002\u01a5\u01a7",
    "\u0005\u00b8]\u0002\u01a6\u019e\u0003\u0002\u0002\u0002\u01a6\u019f",
    "\u0003\u0002\u0002\u0002\u01a6\u01a0\u0003\u0002\u0002\u0002\u01a6\u01a1",
    "\u0003\u0002\u0002\u0002\u01a6\u01a2\u0003\u0002\u0002\u0002\u01a6\u01a3",
    "\u0003\u0002\u0002\u0002\u01a6\u01a4\u0003\u0002\u0002\u0002\u01a6\u01a5",
    "\u0003\u0002\u0002\u0002\u01a7\u01aa\u0003\u0002\u0002\u0002\u01a8\u01a6",
    "\u0003\u0002\u0002\u0002\u01a8\u01a9\u0003\u0002\u0002\u0002\u01a9-",
    "\u0003\u0002\u0002\u0002\u01aa\u01a8\u0003\u0002\u0002\u0002\u01ab\u01ac",
    "\u0007!\u0002\u0002\u01ac\u01ad\u0005\u00b4[\u0002\u01ad\u01af\u0005",
    "8\u001d\u0002\u01ae\u01b0\u0007m\u0002\u0002\u01af\u01ae\u0003\u0002",
    "\u0002\u0002\u01af\u01b0\u0003\u0002\u0002\u0002\u01b0\u01b1\u0003\u0002",
    "\u0002\u0002\u01b1\u01b2\u0007\u0004\u0002\u0002\u01b2/\u0003\u0002",
    "\u0002\u0002\u01b3\u01b4\u0005\u00b4[\u0002\u01b41\u0003\u0002\u0002",
    "\u0002\u01b5\u01b6\u0007\"\u0002\u0002\u01b6\u01b7\u0005\u00b4[\u0002",
    "\u01b7\u01b9\u0007\u0011\u0002\u0002\u01b8\u01ba\u00050\u0019\u0002",
    "\u01b9\u01b8\u0003\u0002\u0002\u0002\u01b9\u01ba\u0003\u0002\u0002\u0002",
    "\u01ba\u01bf\u0003\u0002\u0002\u0002\u01bb\u01bc\u0007\u0012\u0002\u0002",
    "\u01bc\u01be\u00050\u0019\u0002\u01bd\u01bb\u0003\u0002\u0002\u0002",
    "\u01be\u01c1\u0003\u0002\u0002\u0002\u01bf\u01bd\u0003\u0002\u0002\u0002",
    "\u01bf\u01c0\u0003\u0002\u0002\u0002\u01c0\u01c2\u0003\u0002\u0002\u0002",
    "\u01c1\u01bf\u0003\u0002\u0002\u0002\u01c2\u01c3\u0007\u0013\u0002\u0002",
    "\u01c33\u0003\u0002\u0002\u0002\u01c4\u01cd\u0007\u0019\u0002\u0002",
    "\u01c5\u01ca\u00056\u001c\u0002\u01c6\u01c7\u0007\u0012\u0002\u0002",
    "\u01c7\u01c9\u00056\u001c\u0002\u01c8\u01c6\u0003\u0002\u0002\u0002",
    "\u01c9\u01cc\u0003\u0002\u0002\u0002\u01ca\u01c8\u0003\u0002\u0002\u0002",
    "\u01ca\u01cb\u0003\u0002\u0002\u0002\u01cb\u01ce\u0003\u0002\u0002\u0002",
    "\u01cc\u01ca\u0003\u0002\u0002\u0002\u01cd\u01c5\u0003\u0002\u0002\u0002",
    "\u01cd\u01ce\u0003\u0002\u0002\u0002\u01ce\u01cf\u0003\u0002\u0002\u0002",
    "\u01cf\u01d0\u0007\u001a\u0002\u0002\u01d05\u0003\u0002\u0002\u0002",
    "\u01d1\u01d3\u0005B\"\u0002\u01d2\u01d4\u0005L\'\u0002\u01d3\u01d2\u0003",
    "\u0002\u0002\u0002\u01d3\u01d4\u0003\u0002\u0002\u0002\u01d4\u01d6\u0003",
    "\u0002\u0002\u0002\u01d5\u01d7\u0005\u00b4[\u0002\u01d6\u01d5\u0003",
    "\u0002\u0002\u0002\u01d6\u01d7\u0003\u0002\u0002\u0002\u01d77\u0003",
    "\u0002\u0002\u0002\u01d8\u01e1\u0007\u0019\u0002\u0002\u01d9\u01de\u0005",
    ":\u001e\u0002\u01da\u01db\u0007\u0012\u0002\u0002\u01db\u01dd\u0005",
    ":\u001e\u0002\u01dc\u01da\u0003\u0002\u0002\u0002\u01dd\u01e0\u0003",
    "\u0002\u0002\u0002\u01de\u01dc\u0003\u0002\u0002\u0002\u01de\u01df\u0003",
    "\u0002\u0002\u0002\u01df\u01e2\u0003\u0002\u0002\u0002\u01e0\u01de\u0003",
    "\u0002\u0002\u0002\u01e1\u01d9\u0003\u0002\u0002\u0002\u01e1\u01e2\u0003",
    "\u0002\u0002\u0002\u01e2\u01e3\u0003\u0002\u0002\u0002\u01e3\u01e4\u0007",
    "\u001a\u0002\u0002\u01e49\u0003\u0002\u0002\u0002\u01e5\u01e7\u0005",
    "B\"\u0002\u01e6\u01e8\u0007t\u0002\u0002\u01e7\u01e6\u0003\u0002\u0002",
    "\u0002\u01e7\u01e8\u0003\u0002\u0002\u0002\u01e8\u01ea\u0003\u0002\u0002",
    "\u0002\u01e9\u01eb\u0005\u00b4[\u0002\u01ea\u01e9\u0003\u0002\u0002",
    "\u0002\u01ea\u01eb\u0003\u0002\u0002\u0002\u01eb;\u0003\u0002\u0002",
    "\u0002\u01ec\u01f5\u0007\u0019\u0002\u0002\u01ed\u01f2\u0005> \u0002",
    "\u01ee\u01ef\u0007\u0012\u0002\u0002\u01ef\u01f1\u0005> \u0002\u01f0",
    "\u01ee\u0003\u0002\u0002\u0002\u01f1\u01f4\u0003\u0002\u0002\u0002\u01f2",
    "\u01f0\u0003\u0002\u0002\u0002\u01f2\u01f3\u0003\u0002\u0002\u0002\u01f3",
    "\u01f6\u0003\u0002\u0002\u0002\u01f4\u01f2\u0003\u0002\u0002\u0002\u01f5",
    "\u01ed\u0003\u0002\u0002\u0002\u01f5\u01f6\u0003\u0002\u0002\u0002\u01f6",
    "\u01f7\u0003\u0002\u0002\u0002\u01f7\u01f8\u0007\u001a\u0002\u0002\u01f8",
    "=\u0003\u0002\u0002\u0002\u01f9\u01fb\u0005B\"\u0002\u01fa\u01fc\u0005",
    "L\'\u0002\u01fb\u01fa\u0003\u0002\u0002\u0002\u01fb\u01fc\u0003\u0002",
    "\u0002\u0002\u01fc?\u0003\u0002\u0002\u0002\u01fd\u01ff\u0005B\"\u0002",
    "\u01fe\u0200\u0005L\'\u0002\u01ff\u01fe\u0003\u0002\u0002\u0002\u01ff",
    "\u0200\u0003\u0002\u0002\u0002\u0200\u0201\u0003\u0002\u0002\u0002\u0201",
    "\u0202\u0005\u00b4[\u0002\u0202A\u0003\u0002\u0002\u0002\u0203\u0204",
    "\b\"\u0001\u0002\u0204\u020b\u0005x=\u0002\u0205\u020b\u0005D#\u0002",
    "\u0206\u020b\u0005H%\u0002\u0207\u020b\u0005J&\u0002\u0208\u0209\u0007",
    "%\u0002\u0002\u0209\u020b\u0007v\u0002\u0002\u020a\u0203\u0003\u0002",
    "\u0002\u0002\u020a\u0205\u0003\u0002\u0002\u0002\u020a\u0206\u0003\u0002",
    "\u0002\u0002\u020a\u0207\u0003\u0002\u0002\u0002\u020a\u0208\u0003\u0002",
    "\u0002\u0002\u020b\u0214\u0003\u0002\u0002\u0002\u020c\u020d\f\u0005",
    "\u0002\u0002\u020d\u020f\u0007#\u0002\u0002\u020e\u0210\u0005z>\u0002",
    "\u020f\u020e\u0003\u0002\u0002\u0002\u020f\u0210\u0003\u0002\u0002\u0002",
    "\u0210\u0211\u0003\u0002\u0002\u0002\u0211\u0213\u0007$\u0002\u0002",
    "\u0212\u020c\u0003\u0002\u0002\u0002\u0213\u0216\u0003\u0002\u0002\u0002",
    "\u0214\u0212\u0003\u0002\u0002\u0002\u0214\u0215\u0003\u0002\u0002\u0002",
    "\u0215C\u0003\u0002\u0002\u0002\u0216\u0214\u0003\u0002\u0002\u0002",
    "\u0217\u021c\u0005\u00b4[\u0002\u0218\u0219\u0007&\u0002\u0002\u0219",
    "\u021b\u0005\u00b4[\u0002\u021a\u0218\u0003\u0002\u0002\u0002\u021b",
    "\u021e\u0003\u0002\u0002\u0002\u021c\u021a\u0003\u0002\u0002\u0002\u021c",
    "\u021d\u0003\u0002\u0002\u0002\u021dE\u0003\u0002\u0002\u0002\u021e",
    "\u021c\u0003\u0002\u0002\u0002\u021f\u0222\u0005x=\u0002\u0220\u0222",
    "\u0005D#\u0002\u0221\u021f\u0003\u0002\u0002\u0002\u0221\u0220\u0003",
    "\u0002\u0002\u0002\u0222G\u0003\u0002\u0002\u0002\u0223\u0224\u0007",
    "\'\u0002\u0002\u0224\u0225\u0007\u0019\u0002\u0002\u0225\u0226\u0005",
    "F$\u0002\u0226\u0227\u0007(\u0002\u0002\u0227\u0228\u0005B\"\u0002\u0228",
    "\u0229\u0007\u001a\u0002\u0002\u0229I\u0003\u0002\u0002\u0002\u022a",
    "\u022b\u0007\u001f\u0002\u0002\u022b\u0231\u0005<\u001f\u0002\u022c",
    "\u0230\u0007u\u0002\u0002\u022d\u0230\u0007s\u0002\u0002\u022e\u0230",
    "\u0005N(\u0002\u022f\u022c\u0003\u0002\u0002\u0002\u022f\u022d\u0003",
    "\u0002\u0002\u0002\u022f\u022e\u0003\u0002\u0002\u0002\u0230\u0233\u0003",
    "\u0002\u0002\u0002\u0231\u022f\u0003\u0002\u0002\u0002\u0231\u0232\u0003",
    "\u0002\u0002\u0002\u0232\u0236\u0003\u0002\u0002\u0002\u0233\u0231\u0003",
    "\u0002\u0002\u0002\u0234\u0235\u0007 \u0002\u0002\u0235\u0237\u0005",
    "<\u001f\u0002\u0236\u0234\u0003\u0002\u0002\u0002\u0236\u0237\u0003",
    "\u0002\u0002\u0002\u0237K\u0003\u0002\u0002\u0002\u0238\u0239\t\u0004",
    "\u0002\u0002\u0239M\u0003\u0002\u0002\u0002\u023a\u023b\t\u0005\u0002",
    "\u0002\u023bO\u0003\u0002\u0002\u0002\u023c\u0240\u0007\u0011\u0002",
    "\u0002\u023d\u023f\u0005R*\u0002\u023e\u023d\u0003\u0002\u0002\u0002",
    "\u023f\u0242\u0003\u0002\u0002\u0002\u0240\u023e\u0003\u0002\u0002\u0002",
    "\u0240\u0241\u0003\u0002\u0002\u0002\u0241\u0243\u0003\u0002\u0002\u0002",
    "\u0242\u0240\u0003\u0002\u0002\u0002\u0243\u0244\u0007\u0013\u0002\u0002",
    "\u0244Q\u0003\u0002\u0002\u0002\u0245\u0254\u0005V,\u0002\u0246\u0254",
    "\u0005X-\u0002\u0247\u0254\u0005\\/\u0002\u0248\u0254\u0005b2\u0002",
    "\u0249\u0254\u0005P)\u0002\u024a\u0254\u0005d3\u0002\u024b\u0254\u0005",
    "f4\u0002\u024c\u0254\u0005h5\u0002\u024d\u0254\u0005j6\u0002\u024e\u0254",
    "\u0005l7\u0002\u024f\u0254\u0005n8\u0002\u0250\u0254\u0005p9\u0002\u0251",
    "\u0254\u0005^0\u0002\u0252\u0254\u0005`1\u0002\u0253\u0245\u0003\u0002",
    "\u0002\u0002\u0253\u0246\u0003\u0002\u0002\u0002\u0253\u0247\u0003\u0002",
    "\u0002\u0002\u0253\u0248\u0003\u0002\u0002\u0002\u0253\u0249\u0003\u0002",
    "\u0002\u0002\u0253\u024a\u0003\u0002\u0002\u0002\u0253\u024b\u0003\u0002",
    "\u0002\u0002\u0253\u024c\u0003\u0002\u0002\u0002\u0253\u024d\u0003\u0002",
    "\u0002\u0002\u0253\u024e\u0003\u0002\u0002\u0002\u0253\u024f\u0003\u0002",
    "\u0002\u0002\u0253\u0250\u0003\u0002\u0002\u0002\u0253\u0251\u0003\u0002",
    "\u0002\u0002\u0253\u0252\u0003\u0002\u0002\u0002\u0254S\u0003\u0002",
    "\u0002\u0002\u0255\u0256\u0005z>\u0002\u0256\u0257\u0007\u0004\u0002",
    "\u0002\u0257U\u0003\u0002\u0002\u0002\u0258\u0259\u0007,\u0002\u0002",
    "\u0259\u025a\u0007\u0019\u0002\u0002\u025a\u025b\u0005z>\u0002\u025b",
    "\u025c\u0007\u001a\u0002\u0002\u025c\u025f\u0005R*\u0002\u025d\u025e",
    "\u0007-\u0002\u0002\u025e\u0260\u0005R*\u0002\u025f\u025d\u0003\u0002",
    "\u0002\u0002\u025f\u0260\u0003\u0002\u0002\u0002\u0260W\u0003\u0002",
    "\u0002\u0002\u0261\u0262\u0007.\u0002\u0002\u0262\u0264\u0005z>\u0002",
    "\u0263\u0265\u0005*\u0016\u0002\u0264\u0263\u0003\u0002\u0002\u0002",
    "\u0264\u0265\u0003\u0002\u0002\u0002\u0265\u0266\u0003\u0002\u0002\u0002",
    "\u0266\u0268\u0005P)\u0002\u0267\u0269\u0005Z.\u0002\u0268\u0267\u0003",
    "\u0002\u0002\u0002\u0269\u026a\u0003\u0002\u0002\u0002\u026a\u0268\u0003",
    "\u0002\u0002\u0002\u026a\u026b\u0003\u0002\u0002\u0002\u026bY\u0003",
    "\u0002\u0002\u0002\u026c\u0271\u0007/\u0002\u0002\u026d\u026f\u0005",
    "\u00b4[\u0002\u026e\u026d\u0003\u0002\u0002\u0002\u026e\u026f\u0003",
    "\u0002\u0002\u0002\u026f\u0270\u0003\u0002\u0002\u0002\u0270\u0272\u0005",
    "4\u001b\u0002\u0271\u026e\u0003\u0002\u0002\u0002\u0271\u0272\u0003",
    "\u0002\u0002\u0002\u0272\u0273\u0003\u0002\u0002\u0002\u0273\u0274\u0005",
    "P)\u0002\u0274[\u0003\u0002\u0002\u0002\u0275\u0276\u00070\u0002\u0002",
    "\u0276\u0277\u0007\u0019\u0002\u0002\u0277\u0278\u0005z>\u0002\u0278",
    "\u0279\u0007\u001a\u0002\u0002\u0279\u027a\u0005R*\u0002\u027a]\u0003",
    "\u0002\u0002\u0002\u027b\u027e\u0005r:\u0002\u027c\u027e\u0005T+\u0002",
    "\u027d\u027b\u0003\u0002\u0002\u0002\u027d\u027c\u0003\u0002\u0002\u0002",
    "\u027e_\u0003\u0002\u0002\u0002\u027f\u0280\u00071\u0002\u0002\u0280",
    "\u0281\u0005P)\u0002\u0281a\u0003\u0002\u0002\u0002\u0282\u0283\u0007",
    "\u001c\u0002\u0002\u0283\u0286\u0007\u0019\u0002\u0002\u0284\u0287\u0005",
    "^0\u0002\u0285\u0287\u0007\u0004\u0002\u0002\u0286\u0284\u0003\u0002",
    "\u0002\u0002\u0286\u0285\u0003\u0002\u0002\u0002\u0287\u028a\u0003\u0002",
    "\u0002\u0002\u0288\u028b\u0005T+\u0002\u0289\u028b\u0007\u0004\u0002",
    "\u0002\u028a\u0288\u0003\u0002\u0002\u0002\u028a\u0289\u0003\u0002\u0002",
    "\u0002\u028b\u028d\u0003\u0002\u0002\u0002\u028c\u028e\u0005z>\u0002",
    "\u028d\u028c\u0003\u0002\u0002\u0002\u028d\u028e\u0003\u0002\u0002\u0002",
    "\u028e\u028f\u0003\u0002\u0002\u0002\u028f\u0290\u0007\u001a\u0002\u0002",
    "\u0290\u0291\u0005R*\u0002\u0291c\u0003\u0002\u0002\u0002\u0292\u0294",
    "\u00072\u0002\u0002\u0293\u0295\u0007\u0081\u0002\u0002\u0294\u0293",
    "\u0003\u0002\u0002\u0002\u0294\u0295\u0003\u0002\u0002\u0002\u0295\u0296",
    "\u0003\u0002\u0002\u0002\u0296\u0297\u0005\u0088E\u0002\u0297e\u0003",
    "\u0002\u0002\u0002\u0298\u0299\u00073\u0002\u0002\u0299\u029a\u0005",
    "R*\u0002\u029a\u029b\u00070\u0002\u0002\u029b\u029c\u0007\u0019\u0002",
    "\u0002\u029c\u029d\u0005z>\u0002\u029d\u029e\u0007\u001a\u0002\u0002",
    "\u029e\u029f\u0007\u0004\u0002\u0002\u029fg\u0003\u0002\u0002\u0002",
    "\u02a0\u02a1\u0007q\u0002\u0002\u02a1\u02a2\u0007\u0004\u0002\u0002",
    "\u02a2i\u0003\u0002\u0002\u0002\u02a3\u02a4\u0007n\u0002\u0002\u02a4",
    "\u02a5\u0007\u0004\u0002\u0002\u02a5k\u0003\u0002\u0002\u0002\u02a6",
    "\u02a8\u00074\u0002\u0002\u02a7\u02a9\u0005z>\u0002\u02a8\u02a7\u0003",
    "\u0002\u0002\u0002\u02a8\u02a9\u0003\u0002\u0002\u0002\u02a9\u02aa\u0003",
    "\u0002\u0002\u0002\u02aa\u02ab\u0007\u0004\u0002\u0002\u02abm\u0003",
    "\u0002\u0002\u0002\u02ac\u02ad\u00075\u0002\u0002\u02ad\u02ae\u0007",
    "\u0004\u0002\u0002\u02aeo\u0003\u0002\u0002\u0002\u02af\u02b0\u0007",
    "6\u0002\u0002\u02b0\u02b1\u0005\u0086D\u0002\u02b1\u02b2\u0007\u0004",
    "\u0002\u0002\u02b2q\u0003\u0002\u0002\u0002\u02b3\u02b4\u00077\u0002",
    "\u0002\u02b4\u02bb\u0005v<\u0002\u02b5\u02bb\u0005@!\u0002\u02b6\u02b7",
    "\u0007\u0019\u0002\u0002\u02b7\u02b8\u0005t;\u0002\u02b8\u02b9\u0007",
    "\u001a\u0002\u0002\u02b9\u02bb\u0003\u0002\u0002\u0002\u02ba\u02b3\u0003",
    "\u0002\u0002\u0002\u02ba\u02b5\u0003\u0002\u0002\u0002\u02ba\u02b6\u0003",
    "\u0002\u0002\u0002\u02bb\u02be\u0003\u0002\u0002\u0002\u02bc\u02bd\u0007",
    "\f\u0002\u0002\u02bd\u02bf\u0005z>\u0002\u02be\u02bc\u0003\u0002\u0002",
    "\u0002\u02be\u02bf\u0003\u0002\u0002\u0002\u02bf\u02c0\u0003\u0002\u0002",
    "\u0002\u02c0\u02c1\u0007\u0004\u0002\u0002\u02c1s\u0003\u0002\u0002",
    "\u0002\u02c2\u02c4\u0005@!\u0002\u02c3\u02c2\u0003\u0002\u0002\u0002",
    "\u02c3\u02c4\u0003\u0002\u0002\u0002\u02c4\u02cb\u0003\u0002\u0002\u0002",
    "\u02c5\u02c7\u0007\u0012\u0002\u0002\u02c6\u02c8\u0005@!\u0002\u02c7",
    "\u02c6\u0003\u0002\u0002\u0002\u02c7\u02c8\u0003\u0002\u0002\u0002\u02c8",
    "\u02ca\u0003\u0002\u0002\u0002\u02c9\u02c5\u0003\u0002\u0002\u0002\u02ca",
    "\u02cd\u0003\u0002\u0002\u0002\u02cb\u02c9\u0003\u0002\u0002\u0002\u02cb",
    "\u02cc\u0003\u0002\u0002\u0002\u02ccu\u0003\u0002\u0002\u0002\u02cd",
    "\u02cb\u0003\u0002\u0002\u0002\u02ce\u02d5\u0007\u0019\u0002\u0002\u02cf",
    "\u02d1\u0005\u00b4[\u0002\u02d0\u02cf\u0003\u0002\u0002\u0002\u02d0",
    "\u02d1\u0003\u0002\u0002\u0002\u02d1\u02d2\u0003\u0002\u0002\u0002\u02d2",
    "\u02d4\u0007\u0012\u0002\u0002\u02d3\u02d0\u0003\u0002\u0002\u0002\u02d4",
    "\u02d7\u0003\u0002\u0002\u0002\u02d5\u02d3\u0003\u0002\u0002\u0002\u02d5",
    "\u02d6\u0003\u0002\u0002\u0002\u02d6\u02d9\u0003\u0002\u0002\u0002\u02d7",
    "\u02d5\u0003\u0002\u0002\u0002\u02d8\u02da\u0005\u00b4[\u0002\u02d9",
    "\u02d8\u0003\u0002\u0002\u0002\u02d9\u02da\u0003\u0002\u0002\u0002\u02da",
    "\u02db\u0003\u0002\u0002\u0002\u02db\u02dc\u0007\u001a\u0002\u0002\u02dc",
    "w\u0003\u0002\u0002\u0002\u02dd\u02de\t\u0006\u0002\u0002\u02dey\u0003",
    "\u0002\u0002\u0002\u02df\u02e0\b>\u0001\u0002\u02e0\u02e1\u0007=\u0002",
    "\u0002\u02e1\u02f2\u0005B\"\u0002\u02e2\u02e3\u0007\u0019\u0002\u0002",
    "\u02e3\u02e4\u0005z>\u0002\u02e4\u02e5\u0007\u001a\u0002\u0002\u02e5",
    "\u02f2\u0003\u0002\u0002\u0002\u02e6\u02e7\t\u0007\u0002\u0002\u02e7",
    "\u02f2\u0005z>\u0015\u02e8\u02e9\t\b\u0002\u0002\u02e9\u02f2\u0005z",
    ">\u0014\u02ea\u02eb\t\t\u0002\u0002\u02eb\u02f2\u0005z>\u0013\u02ec",
    "\u02ed\u0007C\u0002\u0002\u02ed\u02f2\u0005z>\u0012\u02ee\u02ef\u0007",
    "\u0007\u0002\u0002\u02ef\u02f2\u0005z>\u0011\u02f0\u02f2\u0005|?\u0002",
    "\u02f1\u02df\u0003\u0002\u0002\u0002\u02f1\u02e2\u0003\u0002\u0002\u0002",
    "\u02f1\u02e6\u0003\u0002\u0002\u0002\u02f1\u02e8\u0003\u0002\u0002\u0002",
    "\u02f1\u02ea\u0003\u0002\u0002\u0002\u02f1\u02ec\u0003\u0002\u0002\u0002",
    "\u02f1\u02ee\u0003\u0002\u0002\u0002\u02f1\u02f0\u0003\u0002\u0002\u0002",
    "\u02f2\u033e\u0003\u0002\u0002\u0002\u02f3\u02f4\f\u0010\u0002\u0002",
    "\u02f4\u02f5\u0007D\u0002\u0002\u02f5\u033d\u0005z>\u0011\u02f6\u02f7",
    "\f\u000f\u0002\u0002\u02f7\u02f8\t\n\u0002\u0002\u02f8\u033d\u0005z",
    ">\u0010\u02f9\u02fa\f\u000e\u0002\u0002\u02fa\u02fb\t\b\u0002\u0002",
    "\u02fb\u033d\u0005z>\u000f\u02fc\u02fd\f\r\u0002\u0002\u02fd\u02fe\t",
    "\u000b\u0002\u0002\u02fe\u033d\u0005z>\u000e\u02ff\u0300\f\f\u0002\u0002",
    "\u0300\u0301\u0007I\u0002\u0002\u0301\u033d\u0005z>\r\u0302\u0303\f",
    "\u000b\u0002\u0002\u0303\u0304\u0007\u0006\u0002\u0002\u0304\u033d\u0005",
    "z>\f\u0305\u0306\f\n\u0002\u0002\u0306\u0307\u0007J\u0002\u0002\u0307",
    "\u033d\u0005z>\u000b\u0308\u0309\f\t\u0002\u0002\u0309\u030a\t\f\u0002",
    "\u0002\u030a\u033d\u0005z>\n\u030b\u030c\f\b\u0002\u0002\u030c\u030d",
    "\t\r\u0002\u0002\u030d\u033d\u0005z>\t\u030e\u030f\f\u0007\u0002\u0002",
    "\u030f\u0310\u0007M\u0002\u0002\u0310\u033d\u0005z>\b\u0311\u0312\f",
    "\u0006\u0002\u0002\u0312\u0313\u0007\u0005\u0002\u0002\u0313\u033d\u0005",
    "z>\u0007\u0314\u0315\f\u0005\u0002\u0002\u0315\u0316\u0007N\u0002\u0002",
    "\u0316\u0317\u0005z>\u0002\u0317\u0318\u0007>\u0002\u0002\u0318\u0319",
    "\u0005z>\u0006\u0319\u033d\u0003\u0002\u0002\u0002\u031a\u031b\f\u0004",
    "\u0002\u0002\u031b\u031c\t\u000e\u0002\u0002\u031c\u033d\u0005z>\u0005",
    "\u031d\u031e\f\u001d\u0002\u0002\u031e\u033d\t\u0007\u0002\u0002\u031f",
    "\u0320\f\u001b\u0002\u0002\u0320\u0322\u0007#\u0002\u0002\u0321\u0323",
    "\u0005z>\u0002\u0322\u0321\u0003\u0002\u0002\u0002\u0322\u0323\u0003",
    "\u0002\u0002\u0002\u0323\u0324\u0003\u0002\u0002\u0002\u0324\u033d\u0007",
    "$\u0002\u0002\u0325\u0326\f\u001a\u0002\u0002\u0326\u0328\u0007#\u0002",
    "\u0002\u0327\u0329\u0005z>\u0002\u0328\u0327\u0003\u0002\u0002\u0002",
    "\u0328\u0329\u0003\u0002\u0002\u0002\u0329\u032a\u0003\u0002\u0002\u0002",
    "\u032a\u032c\u0007>\u0002\u0002\u032b\u032d\u0005z>\u0002\u032c\u032b",
    "\u0003\u0002\u0002\u0002\u032c\u032d\u0003\u0002\u0002\u0002\u032d\u032e",
    "\u0003\u0002\u0002\u0002\u032e\u033d\u0007$\u0002\u0002\u032f\u0330",
    "\f\u0019\u0002\u0002\u0330\u0331\u0007&\u0002\u0002\u0331\u033d\u0005",
    "\u00b4[\u0002\u0332\u0333\f\u0018\u0002\u0002\u0333\u0334\u0007\u0011",
    "\u0002\u0002\u0334\u0335\u0005\u0080A\u0002\u0335\u0336\u0007\u0013",
    "\u0002\u0002\u0336\u033d\u0003\u0002\u0002\u0002\u0337\u0338\f\u0017",
    "\u0002\u0002\u0338\u0339\u0007\u0019\u0002\u0002\u0339\u033a\u0005\u0084",
    "C\u0002\u033a\u033b\u0007\u001a\u0002\u0002\u033b\u033d\u0003\u0002",
    "\u0002\u0002\u033c\u02f3\u0003\u0002\u0002\u0002\u033c\u02f6\u0003\u0002",
    "\u0002\u0002\u033c\u02f9\u0003\u0002\u0002\u0002\u033c\u02fc\u0003\u0002",
    "\u0002\u0002\u033c\u02ff\u0003\u0002\u0002\u0002\u033c\u0302\u0003\u0002",
    "\u0002\u0002\u033c\u0305\u0003\u0002\u0002\u0002\u033c\u0308\u0003\u0002",
    "\u0002\u0002\u033c\u030b\u0003\u0002\u0002\u0002\u033c\u030e\u0003\u0002",
    "\u0002\u0002\u033c\u0311\u0003\u0002\u0002\u0002\u033c\u0314\u0003\u0002",
    "\u0002\u0002\u033c\u031a\u0003\u0002\u0002\u0002\u033c\u031d\u0003\u0002",
    "\u0002\u0002\u033c\u031f\u0003\u0002\u0002\u0002\u033c\u0325\u0003\u0002",
    "\u0002\u0002\u033c\u032f\u0003\u0002\u0002\u0002\u033c\u0332\u0003\u0002",
    "\u0002\u0002\u033c\u0337\u0003\u0002\u0002\u0002\u033d\u0340\u0003\u0002",
    "\u0002\u0002\u033e\u033c\u0003\u0002\u0002\u0002\u033e\u033f\u0003\u0002",
    "\u0002\u0002\u033f{\u0003\u0002\u0002\u0002\u0340\u033e\u0003\u0002",
    "\u0002\u0002\u0341\u0353\u0007g\u0002\u0002\u0342\u0353\u0005\u00b2",
    "Z\u0002\u0343\u0353\u0005\u00b6\\\u0002\u0344\u0353\u0005\u00ba^\u0002",
    "\u0345\u0348\u0005\u00b4[\u0002\u0346\u0347\u0007#\u0002\u0002\u0347",
    "\u0349\u0007$\u0002\u0002\u0348\u0346\u0003\u0002\u0002\u0002\u0348",
    "\u0349\u0003\u0002\u0002\u0002\u0349\u0353\u0003\u0002\u0002\u0002\u034a",
    "\u0353\u0007{\u0002\u0002\u034b\u0353\u0007v\u0002\u0002\u034c\u0353",
    "\u0005\u00aeX\u0002\u034d\u0350\u0005\u00b0Y\u0002\u034e\u034f\u0007",
    "#\u0002\u0002\u034f\u0351\u0007$\u0002\u0002\u0350\u034e\u0003\u0002",
    "\u0002\u0002\u0350\u0351\u0003\u0002\u0002\u0002\u0351\u0353\u0003\u0002",
    "\u0002\u0002\u0352\u0341\u0003\u0002\u0002\u0002\u0352\u0342\u0003\u0002",
    "\u0002\u0002\u0352\u0343\u0003\u0002\u0002\u0002\u0352\u0344\u0003\u0002",
    "\u0002\u0002\u0352\u0345\u0003\u0002\u0002\u0002\u0352\u034a\u0003\u0002",
    "\u0002\u0002\u0352\u034b\u0003\u0002\u0002\u0002\u0352\u034c\u0003\u0002",
    "\u0002\u0002\u0352\u034d\u0003\u0002\u0002\u0002\u0353}\u0003\u0002",
    "\u0002\u0002\u0354\u0359\u0005z>\u0002\u0355\u0356\u0007\u0012\u0002",
    "\u0002\u0356\u0358\u0005z>\u0002\u0357\u0355\u0003\u0002\u0002\u0002",
    "\u0358\u035b\u0003\u0002\u0002\u0002\u0359\u0357\u0003\u0002\u0002\u0002",
    "\u0359\u035a\u0003\u0002\u0002\u0002\u035a\u007f\u0003\u0002\u0002\u0002",
    "\u035b\u0359\u0003\u0002\u0002\u0002\u035c\u0361\u0005\u0082B\u0002",
    "\u035d\u035e\u0007\u0012\u0002\u0002\u035e\u0360\u0005\u0082B\u0002",
    "\u035f\u035d\u0003\u0002\u0002\u0002\u0360\u0363\u0003\u0002\u0002\u0002",
    "\u0361\u035f\u0003\u0002\u0002\u0002\u0361\u0362\u0003\u0002\u0002\u0002",
    "\u0362\u0365\u0003\u0002\u0002\u0002\u0363\u0361\u0003\u0002\u0002\u0002",
    "\u0364\u0366\u0007\u0012\u0002\u0002\u0365\u0364\u0003\u0002\u0002\u0002",
    "\u0365\u0366\u0003\u0002\u0002\u0002\u0366\u0081\u0003\u0002\u0002\u0002",
    "\u0367\u0368\u0005\u00b4[\u0002\u0368\u0369\u0007>\u0002\u0002\u0369",
    "\u036a\u0005z>\u0002\u036a\u0083\u0003\u0002\u0002\u0002\u036b\u036d",
    "\u0007\u0011\u0002\u0002\u036c\u036e\u0005\u0080A\u0002\u036d\u036c",
    "\u0003\u0002\u0002\u0002\u036d\u036e\u0003\u0002\u0002\u0002\u036e\u036f",
    "\u0003\u0002\u0002\u0002\u036f\u0374\u0007\u0013\u0002\u0002\u0370\u0372",
    "\u0005~@\u0002\u0371\u0370\u0003\u0002\u0002\u0002\u0371\u0372\u0003",
    "\u0002\u0002\u0002\u0372\u0374\u0003\u0002\u0002\u0002\u0373\u036b\u0003",
    "\u0002\u0002\u0002\u0373\u0371\u0003\u0002\u0002\u0002\u0374\u0085\u0003",
    "\u0002\u0002\u0002\u0375\u0376\u0005z>\u0002\u0376\u0377\u0007\u0019",
    "\u0002\u0002\u0377\u0378\u0005\u0084C\u0002\u0378\u0379\u0007\u001a",
    "\u0002\u0002\u0379\u0087\u0003\u0002\u0002\u0002\u037a\u037e\u0007\u0011",
    "\u0002\u0002\u037b\u037d\u0005\u008aF\u0002\u037c\u037b\u0003\u0002",
    "\u0002\u0002\u037d\u0380\u0003\u0002\u0002\u0002\u037e\u037c\u0003\u0002",
    "\u0002\u0002\u037e\u037f\u0003\u0002\u0002\u0002\u037f\u0381\u0003\u0002",
    "\u0002\u0002\u0380\u037e\u0003\u0002\u0002\u0002\u0381\u0382\u0007\u0013",
    "\u0002\u0002\u0382\u0089\u0003\u0002\u0002\u0002\u0383\u0396\u0005\u00b4",
    "[\u0002\u0384\u0396\u0005\u0088E\u0002\u0385\u0396\u0005\u008cG\u0002",
    "\u0386\u0396\u0005\u0092J\u0002\u0387\u0396\u0005\u0094K\u0002\u0388",
    "\u0396\u0005\u009aN\u0002\u0389\u0396\u0005\u009cO\u0002\u038a\u0396",
    "\u0005\u009eP\u0002\u038b\u0396\u0005\u00a2R\u0002\u038c\u0396\u0005",
    "\u00a6T\u0002\u038d\u0396\u0005\u00a8U\u0002\u038e\u0396\u0007n\u0002",
    "\u0002\u038f\u0396\u0007q\u0002\u0002\u0390\u0396\u0007r\u0002\u0002",
    "\u0391\u0396\u0005\u00acW\u0002\u0392\u0396\u0005\u00b2Z\u0002\u0393",
    "\u0396\u0005\u00ba^\u0002\u0394\u0396\u0005\u00b6\\\u0002\u0395\u0383",
    "\u0003\u0002\u0002\u0002\u0395\u0384\u0003\u0002\u0002\u0002\u0395\u0385",
    "\u0003\u0002\u0002\u0002\u0395\u0386\u0003\u0002\u0002\u0002\u0395\u0387",
    "\u0003\u0002\u0002\u0002\u0395\u0388\u0003\u0002\u0002\u0002\u0395\u0389",
    "\u0003\u0002\u0002\u0002\u0395\u038a\u0003\u0002\u0002\u0002\u0395\u038b",
    "\u0003\u0002\u0002\u0002\u0395\u038c\u0003\u0002\u0002\u0002\u0395\u038d",
    "\u0003\u0002\u0002\u0002\u0395\u038e\u0003\u0002\u0002\u0002\u0395\u038f",
    "\u0003\u0002\u0002\u0002\u0395\u0390\u0003\u0002\u0002\u0002\u0395\u0391",
    "\u0003\u0002\u0002\u0002\u0395\u0392\u0003\u0002\u0002\u0002\u0395\u0393",
    "\u0003\u0002\u0002\u0002\u0395\u0394\u0003\u0002\u0002\u0002\u0396\u008b",
    "\u0003\u0002\u0002\u0002\u0397\u039b\u0005\u0090I\u0002\u0398\u039b",
    "\u0005\u00aaV\u0002\u0399\u039b\u0005\u008eH\u0002\u039a\u0397\u0003",
    "\u0002\u0002\u0002\u039a\u0398\u0003\u0002\u0002\u0002\u039a\u0399\u0003",
    "\u0002\u0002\u0002\u039b\u008d\u0003\u0002\u0002\u0002\u039c\u039d\u0005",
    "\u00b4[\u0002\u039d\u039e\u0007&\u0002\u0002\u039e\u039f\u0005\u00b4",
    "[\u0002\u039f\u008f\u0003\u0002\u0002\u0002\u03a0\u03a5\u00074\u0002",
    "\u0002\u03a1\u03a5\u0007%\u0002\u0002\u03a2\u03a5\u0007:\u0002\u0002",
    "\u03a3\u03a5\u0005\u00b4[\u0002\u03a4\u03a0\u0003\u0002\u0002\u0002",
    "\u03a4\u03a1\u0003\u0002\u0002\u0002\u03a4\u03a2\u0003\u0002\u0002\u0002",
    "\u03a4\u03a3\u0003\u0002\u0002\u0002\u03a5\u03b2\u0003\u0002\u0002\u0002",
    "\u03a6\u03a8\u0007\u0019\u0002\u0002\u03a7\u03a9\u0005\u008cG\u0002",
    "\u03a8\u03a7\u0003\u0002\u0002\u0002\u03a8\u03a9\u0003\u0002\u0002\u0002",
    "\u03a9\u03ae\u0003\u0002\u0002\u0002\u03aa\u03ab\u0007\u0012\u0002\u0002",
    "\u03ab\u03ad\u0005\u008cG\u0002\u03ac\u03aa\u0003\u0002\u0002\u0002",
    "\u03ad\u03b0\u0003\u0002\u0002\u0002\u03ae\u03ac\u0003\u0002\u0002\u0002",
    "\u03ae\u03af\u0003\u0002\u0002\u0002\u03af\u03b1\u0003\u0002\u0002\u0002",
    "\u03b0\u03ae\u0003\u0002\u0002\u0002\u03b1\u03b3\u0007\u001a\u0002\u0002",
    "\u03b2\u03a6\u0003\u0002\u0002\u0002\u03b2\u03b3\u0003\u0002\u0002\u0002",
    "\u03b3\u0091\u0003\u0002\u0002\u0002\u03b4\u03b5\u0007Y\u0002\u0002",
    "\u03b5\u03b8\u0005\u0096L\u0002\u03b6\u03b7\u0007Z\u0002\u0002\u03b7",
    "\u03b9\u0005\u008cG\u0002\u03b8\u03b6\u0003\u0002\u0002\u0002\u03b8",
    "\u03b9\u0003\u0002\u0002\u0002\u03b9\u0093\u0003\u0002\u0002\u0002\u03ba",
    "\u03bb\u0005\u0096L\u0002\u03bb\u03bc\u0007Z\u0002\u0002\u03bc\u03bd",
    "\u0005\u008cG\u0002\u03bd\u0095\u0003\u0002\u0002\u0002\u03be\u03c5",
    "\u0005\u00b4[\u0002\u03bf\u03c5\u0005\u008eH\u0002\u03c0\u03c1\u0007",
    "\u0019\u0002\u0002\u03c1\u03c2\u0005\u0098M\u0002\u03c2\u03c3\u0007",
    "\u001a\u0002\u0002\u03c3\u03c5\u0003\u0002\u0002\u0002\u03c4\u03be\u0003",
    "\u0002\u0002\u0002\u03c4\u03bf\u0003\u0002\u0002\u0002\u03c4\u03c0\u0003",
    "\u0002\u0002\u0002\u03c5\u0097\u0003\u0002\u0002\u0002\u03c6\u03cb\u0005",
    "\u00b4[\u0002\u03c7\u03c8\u0007\u0012\u0002\u0002\u03c8\u03ca\u0005",
    "\u00b4[\u0002\u03c9\u03c7\u0003\u0002\u0002\u0002\u03ca\u03cd\u0003",
    "\u0002\u0002\u0002\u03cb\u03c9\u0003\u0002\u0002\u0002\u03cb\u03cc\u0003",
    "\u0002\u0002\u0002\u03cc\u0099\u0003\u0002\u0002\u0002\u03cd\u03cb\u0003",
    "\u0002\u0002\u0002\u03ce\u03cf\u0007[\u0002\u0002\u03cf\u03d0\u0005",
    "\u00b4[\u0002\u03d0\u009b\u0003\u0002\u0002\u0002\u03d1\u03d2\u0005",
    "\u00b4[\u0002\u03d2\u03d3\u0007>\u0002\u0002\u03d3\u009d\u0003\u0002",
    "\u0002\u0002\u03d4\u03d5\u0007\\\u0002\u0002\u03d5\u03d9\u0005\u008c",
    "G\u0002\u03d6\u03d8\u0005\u00a0Q\u0002\u03d7\u03d6\u0003\u0002\u0002",
    "\u0002\u03d8\u03db\u0003\u0002\u0002\u0002\u03d9\u03d7\u0003\u0002\u0002",
    "\u0002\u03d9\u03da\u0003\u0002\u0002\u0002\u03da\u009f\u0003\u0002\u0002",
    "\u0002\u03db\u03d9\u0003\u0002\u0002\u0002\u03dc\u03dd\u0007]\u0002",
    "\u0002\u03dd\u03de\u0005\u00aaV\u0002\u03de\u03df\u0005\u0088E\u0002",
    "\u03df\u03e3\u0003\u0002\u0002\u0002\u03e0\u03e1\u0007^\u0002\u0002",
    "\u03e1\u03e3\u0005\u0088E\u0002\u03e2\u03dc\u0003\u0002\u0002\u0002",
    "\u03e2\u03e0\u0003\u0002\u0002\u0002\u03e3\u00a1\u0003\u0002\u0002\u0002",
    "\u03e4\u03e5\u0007\u001f\u0002\u0002\u03e5\u03e6\u0005\u00b4[\u0002",
    "\u03e6\u03e8\u0007\u0019\u0002\u0002\u03e7\u03e9\u0005\u0098M\u0002",
    "\u03e8\u03e7\u0003\u0002\u0002\u0002\u03e8\u03e9\u0003\u0002\u0002\u0002",
    "\u03e9\u03ea\u0003\u0002\u0002\u0002\u03ea\u03ec\u0007\u001a\u0002\u0002",
    "\u03eb\u03ed\u0005\u00a4S\u0002\u03ec\u03eb\u0003\u0002\u0002\u0002",
    "\u03ec\u03ed\u0003\u0002\u0002\u0002\u03ed\u03ee\u0003\u0002\u0002\u0002",
    "\u03ee\u03ef\u0005\u0088E\u0002\u03ef\u00a3\u0003\u0002\u0002\u0002",
    "\u03f0\u03f1\u0007_\u0002\u0002\u03f1\u03f2\u0005\u0098M\u0002\u03f2",
    "\u00a5\u0003\u0002\u0002\u0002\u03f3\u03f6\u0007\u001c\u0002\u0002\u03f4",
    "\u03f7\u0005\u0088E\u0002\u03f5\u03f7\u0005\u008cG\u0002\u03f6\u03f4",
    "\u0003\u0002\u0002\u0002\u03f6\u03f5\u0003\u0002\u0002\u0002\u03f7\u03f8",
    "\u0003\u0002\u0002\u0002\u03f8\u03fb\u0005\u008cG\u0002\u03f9\u03fc",
    "\u0005\u0088E\u0002\u03fa\u03fc\u0005\u008cG\u0002\u03fb\u03f9\u0003",
    "\u0002\u0002\u0002\u03fb\u03fa\u0003\u0002\u0002\u0002\u03fc\u03fd\u0003",
    "\u0002\u0002\u0002\u03fd\u03fe\u0005\u0088E\u0002\u03fe\u00a7\u0003",
    "\u0002\u0002\u0002\u03ff\u0400\u0007,\u0002\u0002\u0400\u0401\u0005",
    "\u008cG\u0002\u0401\u0402\u0005\u0088E\u0002\u0402\u00a9\u0003\u0002",
    "\u0002\u0002\u0403\u0408\u0005\u00ba^\u0002\u0404\u0408\u0007h\u0002",
    "\u0002\u0405\u0408\u0007i\u0002\u0002\u0406\u0408\u0005\u00b6\\\u0002",
    "\u0407\u0403\u0003\u0002\u0002\u0002\u0407\u0404\u0003\u0002\u0002\u0002",
    "\u0407\u0405\u0003\u0002\u0002\u0002\u0407\u0406\u0003\u0002\u0002\u0002",
    "\u0408\u00ab\u0003\u0002\u0002\u0002\u0409\u040a\u00072\u0002\u0002",
    "\u040a\u040b\u0005\u00b4[\u0002\u040b\u040c\u0005\u0088E\u0002\u040c",
    "\u00ad\u0003\u0002\u0002\u0002\u040d\u040f\u0007\u0019\u0002\u0002\u040e",
    "\u0410\u0005z>\u0002\u040f\u040e\u0003\u0002\u0002\u0002\u040f\u0410",
    "\u0003\u0002\u0002\u0002\u0410\u0417\u0003\u0002\u0002\u0002\u0411\u0413",
    "\u0007\u0012\u0002\u0002\u0412\u0414\u0005z>\u0002\u0413\u0412\u0003",
    "\u0002\u0002\u0002\u0413\u0414\u0003\u0002\u0002\u0002\u0414\u0416\u0003",
    "\u0002\u0002\u0002\u0415\u0411\u0003\u0002\u0002\u0002\u0416\u0419\u0003",
    "\u0002\u0002\u0002\u0417\u0415\u0003\u0002\u0002\u0002\u0417\u0418\u0003",
    "\u0002\u0002\u0002\u0418\u041a\u0003\u0002\u0002\u0002\u0419\u0417\u0003",
    "\u0002\u0002\u0002\u041a\u0428\u0007\u001a\u0002\u0002\u041b\u0424\u0007",
    "#\u0002\u0002\u041c\u0421\u0005z>\u0002\u041d\u041e\u0007\u0012\u0002",
    "\u0002\u041e\u0420\u0005z>\u0002\u041f\u041d\u0003\u0002\u0002\u0002",
    "\u0420\u0423\u0003\u0002\u0002\u0002\u0421\u041f\u0003\u0002\u0002\u0002",
    "\u0421\u0422\u0003\u0002\u0002\u0002\u0422\u0425\u0003\u0002\u0002\u0002",
    "\u0423\u0421\u0003\u0002\u0002\u0002\u0424\u041c\u0003\u0002\u0002\u0002",
    "\u0424\u0425\u0003\u0002\u0002\u0002\u0425\u0426\u0003\u0002\u0002\u0002",
    "\u0426\u0428\u0007$\u0002\u0002\u0427\u040d\u0003\u0002\u0002\u0002",
    "\u0427\u041b\u0003\u0002\u0002\u0002\u0428\u00af\u0003\u0002\u0002\u0002",
    "\u0429\u042c\u0005x=\u0002\u042a\u042c\u0005D#\u0002\u042b\u0429\u0003",
    "\u0002\u0002\u0002\u042b\u042a\u0003\u0002\u0002\u0002\u042c\u00b1\u0003",
    "\u0002\u0002\u0002\u042d\u042f\t\u000f\u0002\u0002\u042e\u0430\u0007",
    "j\u0002\u0002\u042f\u042e\u0003\u0002\u0002\u0002\u042f\u0430\u0003",
    "\u0002\u0002\u0002\u0430\u00b3\u0003\u0002\u0002\u0002\u0431\u0432\t",
    "\u0010\u0002\u0002\u0432\u00b5\u0003\u0002\u0002\u0002\u0433\u0435\u0007",
    "k\u0002\u0002\u0434\u0433\u0003\u0002\u0002\u0002\u0435\u0436\u0003",
    "\u0002\u0002\u0002\u0436\u0434\u0003\u0002\u0002\u0002\u0436\u0437\u0003",
    "\u0002\u0002\u0002\u0437\u00b7\u0003\u0002\u0002\u0002\u0438\u0444\u0007",
    "a\u0002\u0002\u0439\u043a\u0007\u0019\u0002\u0002\u043a\u043f\u0005",
    "D#\u0002\u043b\u043c\u0007\u0012\u0002\u0002\u043c\u043e\u0005D#\u0002",
    "\u043d\u043b\u0003\u0002\u0002\u0002\u043e\u0441\u0003\u0002\u0002\u0002",
    "\u043f\u043d\u0003\u0002\u0002\u0002\u043f\u0440\u0003\u0002\u0002\u0002",
    "\u0440\u0442\u0003\u0002\u0002\u0002\u0441\u043f\u0003\u0002\u0002\u0002",
    "\u0442\u0443\u0007\u001a\u0002\u0002\u0443\u0445\u0003\u0002\u0002\u0002",
    "\u0444\u0439\u0003\u0002\u0002\u0002\u0444\u0445\u0003\u0002\u0002\u0002",
    "\u0445\u00b9\u0003\u0002\u0002\u0002\u0446\u0448\u0007\u0081\u0002\u0002",
    "\u0447\u0446\u0003\u0002\u0002\u0002\u0448\u0449\u0003\u0002\u0002\u0002",
    "\u0449\u0447\u0003\u0002\u0002\u0002\u0449\u044a\u0003\u0002\u0002\u0002",
    "\u044a\u00bb\u0003\u0002\u0002\u0002\u0080\u00c3\u00c5\u00d3\u00d7\u00dc",
    "\u00e2\u00e6\u00e9\u00ee\u00f4\u00fa\u00fe\u010a\u0112\u0115\u011f\u0122",
    "\u0128\u0130\u0133\u013c\u0145\u0147\u014d\u015d\u016b\u016e\u0175\u0179",
    "\u017b\u0183\u0186\u018c\u0190\u0194\u0199\u01a6\u01a8\u01af\u01b9\u01bf",
    "\u01ca\u01cd\u01d3\u01d6\u01de\u01e1\u01e7\u01ea\u01f2\u01f5\u01fb\u01ff",
    "\u020a\u020f\u0214\u021c\u0221\u022f\u0231\u0236\u0240\u0253\u025f\u0264",
    "\u026a\u026e\u0271\u027d\u0286\u028a\u028d\u0294\u02a8\u02ba\u02be\u02c3",
    "\u02c7\u02cb\u02d0\u02d5\u02d9\u02f1\u0322\u0328\u032c\u033c\u033e\u0348",
    "\u0350\u0352\u0359\u0361\u0365\u036d\u0371\u0373\u037e\u0395\u039a\u03a4",
    "\u03a8\u03ae\u03b2\u03b8\u03c4\u03cb\u03d9\u03e2\u03e8\u03ec\u03f6\u03fb",
    "\u0407\u040f\u0413\u0417\u0421\u0424\u0427\u042b\u042f\u0436\u043f\u0444",
    "\u0449"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class SolidityParser extends antlr4.Parser {

    static grammarFileName = "Solidity.g4";
    static literalNames = [ null, "'pragma'", "';'", "'||'", "'^'", "'~'", 
                            "'>='", "'>'", "'<'", "'<='", "'='", "'as'", 
                            "'import'", "'*'", "'from'", "'{'", "','", "'}'", 
                            "'abstract'", "'contract'", "'interface'", "'library'", 
                            "'is'", "'('", "')'", "'using'", "'for'", "'struct'", 
                            "'modifier'", "'function'", "'returns'", "'event'", 
                            "'enum'", "'['", "']'", "'address'", "'.'", 
                            "'mapping'", "'=>'", "'memory'", "'storage'", 
                            "'calldata'", "'if'", "'else'", "'try'", "'catch'", 
                            "'while'", "'unchecked'", "'assembly'", "'do'", 
                            "'return'", "'throw'", "'emit'", "'var'", "'bool'", 
                            "'string'", "'byte'", "'++'", "'--'", "'new'", 
                            "':'", "'+'", "'-'", "'after'", "'delete'", 
                            "'!'", "'**'", "'/'", "'%'", "'<<'", "'>>'", 
                            "'&'", "'|'", "'=='", "'!='", "'&&'", "'?'", 
                            "'|='", "'^='", "'&='", "'<<='", "'>>='", "'+='", 
                            "'-='", "'*='", "'/='", "'%='", "'let'", "':='", 
                            "'=:'", "'switch'", "'case'", "'default'", "'->'", 
                            "'callback'", "'override'", null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            "'anonymous'", "'break'", "'constant'", "'immutable'", 
                            "'continue'", "'leave'", "'external'", "'indexed'", 
                            "'internal'", "'payable'", "'private'", "'public'", 
                            "'virtual'", "'pure'", "'type'", "'view'", "'constructor'", 
                            "'fallback'", "'receive'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             "Int", "Uint", "Byte", "Fixed", "Ufixed", "BooleanLiteral", 
                             "DecimalNumber", "HexNumber", "NumberUnit", 
                             "HexLiteralFragment", "ReservedKeyword", "AnonymousKeyword", 
                             "BreakKeyword", "ConstantKeyword", "ImmutableKeyword", 
                             "ContinueKeyword", "LeaveKeyword", "ExternalKeyword", 
                             "IndexedKeyword", "InternalKeyword", "PayableKeyword", 
                             "PrivateKeyword", "PublicKeyword", "VirtualKeyword", 
                             "PureKeyword", "TypeKeyword", "ViewKeyword", 
                             "ConstructorKeyword", "FallbackKeyword", "ReceiveKeyword", 
                             "Identifier", "StringLiteralFragment", "VersionLiteral", 
                             "WS", "COMMENT", "LINE_COMMENT" ];
    static ruleNames = [ "sourceUnit", "pragmaDirective", "pragmaName", 
                         "pragmaValue", "version", "versionOperator", "versionConstraint", 
                         "importDeclaration", "importDirective", "contractDefinition", 
                         "inheritanceSpecifier", "contractPart", "stateVariableDeclaration", 
                         "fileLevelConstant", "usingForDeclaration", "structDefinition", 
                         "modifierDefinition", "modifierInvocation", "functionDefinition", 
                         "functionDescriptor", "returnParameters", "modifierList", 
                         "eventDefinition", "enumValue", "enumDefinition", 
                         "parameterList", "parameter", "eventParameterList", 
                         "eventParameter", "functionTypeParameterList", 
                         "functionTypeParameter", "variableDeclaration", 
                         "typeName", "userDefinedTypeName", "mappingKey", 
                         "mapping", "functionTypeName", "storageLocation", 
                         "stateMutability", "block", "statement", "expressionStatement", 
                         "ifStatement", "tryStatement", "catchClause", "whileStatement", 
                         "simpleStatement", "uncheckedStatement", "forStatement", 
                         "inlineAssemblyStatement", "doWhileStatement", 
                         "continueStatement", "breakStatement", "returnStatement", 
                         "throwStatement", "emitStatement", "variableDeclarationStatement", 
                         "variableDeclarationList", "identifierList", "elementaryTypeName", 
                         "expression", "primaryExpression", "expressionList", 
                         "nameValueList", "nameValue", "functionCallArguments", 
                         "functionCall", "assemblyBlock", "assemblyItem", 
                         "assemblyExpression", "assemblyMember", "assemblyCall", 
                         "assemblyLocalDefinition", "assemblyAssignment", 
                         "assemblyIdentifierOrList", "assemblyIdentifierList", 
                         "assemblyStackAssignment", "labelDefinition", "assemblySwitch", 
                         "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", 
                         "assemblyFor", "assemblyIf", "assemblyLiteral", 
                         "subAssembly", "tupleExpression", "typeNameExpression", 
                         "numberLiteral", "identifier", "hexLiteral", "overrideSpecifier", 
                         "stringLiteral" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = SolidityParser.ruleNames;
        this.literalNames = SolidityParser.literalNames;
        this.symbolicNames = SolidityParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 32:
    	    		return this.typeName_sempred(localctx, predIndex);
    	case 60:
    	    		return this.expression_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    typeName_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 3);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 14);
    		case 2:
    			return this.precpred(this._ctx, 13);
    		case 3:
    			return this.precpred(this._ctx, 12);
    		case 4:
    			return this.precpred(this._ctx, 11);
    		case 5:
    			return this.precpred(this._ctx, 10);
    		case 6:
    			return this.precpred(this._ctx, 9);
    		case 7:
    			return this.precpred(this._ctx, 8);
    		case 8:
    			return this.precpred(this._ctx, 7);
    		case 9:
    			return this.precpred(this._ctx, 6);
    		case 10:
    			return this.precpred(this._ctx, 5);
    		case 11:
    			return this.precpred(this._ctx, 4);
    		case 12:
    			return this.precpred(this._ctx, 3);
    		case 13:
    			return this.precpred(this._ctx, 2);
    		case 14:
    			return this.precpred(this._ctx, 27);
    		case 15:
    			return this.precpred(this._ctx, 25);
    		case 16:
    			return this.precpred(this._ctx, 24);
    		case 17:
    			return this.precpred(this._ctx, 23);
    		case 18:
    			return this.precpred(this._ctx, 22);
    		case 19:
    			return this.precpred(this._ctx, 21);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	sourceUnit() {
	    let localctx = new SourceUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, SolidityParser.RULE_sourceUnit);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 195;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__0) | (1 << SolidityParser.T__11) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__17) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__19) | (1 << SolidityParser.T__20) | (1 << SolidityParser.T__26) | (1 << SolidityParser.T__28))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SolidityParser.T__31 - 32)) | (1 << (SolidityParser.T__34 - 32)) | (1 << (SolidityParser.T__36 - 32)) | (1 << (SolidityParser.T__40 - 32)) | (1 << (SolidityParser.T__52 - 32)) | (1 << (SolidityParser.T__53 - 32)) | (1 << (SolidityParser.T__54 - 32)) | (1 << (SolidityParser.T__55 - 32)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.T__93 - 94)) | (1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.LeaveKeyword - 94)) | (1 << (SolidityParser.PayableKeyword - 94)) | (1 << (SolidityParser.ConstructorKeyword - 94)) | (1 << (SolidityParser.FallbackKeyword - 94)) | (1 << (SolidityParser.ReceiveKeyword - 94)))) !== 0) || _la===SolidityParser.Identifier) {
	            this.state = 193;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 186;
	                this.pragmaDirective();
	                break;

	            case 2:
	                this.state = 187;
	                this.importDirective();
	                break;

	            case 3:
	                this.state = 188;
	                this.contractDefinition();
	                break;

	            case 4:
	                this.state = 189;
	                this.enumDefinition();
	                break;

	            case 5:
	                this.state = 190;
	                this.structDefinition();
	                break;

	            case 6:
	                this.state = 191;
	                this.functionDefinition();
	                break;

	            case 7:
	                this.state = 192;
	                this.fileLevelConstant();
	                break;

	            }
	            this.state = 197;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 198;
	        this.match(SolidityParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragmaDirective() {
	    let localctx = new PragmaDirectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, SolidityParser.RULE_pragmaDirective);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 200;
	        this.match(SolidityParser.T__0);
	        this.state = 201;
	        this.pragmaName();
	        this.state = 202;
	        this.pragmaValue();
	        this.state = 203;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragmaName() {
	    let localctx = new PragmaNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, SolidityParser.RULE_pragmaName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 205;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pragmaValue() {
	    let localctx = new PragmaValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, SolidityParser.RULE_pragmaValue);
	    try {
	        this.state = 209;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 207;
	            this.version();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 208;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	version() {
	    let localctx = new VersionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, SolidityParser.RULE_version);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 211;
	        this.versionConstraint();
	        this.state = 218;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8) | (1 << SolidityParser.T__9))) !== 0) || _la===SolidityParser.DecimalNumber || _la===SolidityParser.VersionLiteral) {
	            this.state = 213;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SolidityParser.T__2) {
	                this.state = 212;
	                this.match(SolidityParser.T__2);
	            }

	            this.state = 215;
	            this.versionConstraint();
	            this.state = 220;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	versionOperator() {
	    let localctx = new VersionOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, SolidityParser.RULE_versionOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 221;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8) | (1 << SolidityParser.T__9))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	versionConstraint() {
	    let localctx = new VersionConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, SolidityParser.RULE_versionConstraint);
	    var _la = 0; // Token type
	    try {
	        this.state = 231;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 224;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8) | (1 << SolidityParser.T__9))) !== 0)) {
	                this.state = 223;
	                this.versionOperator();
	            }

	            this.state = 226;
	            this.match(SolidityParser.VersionLiteral);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 228;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8) | (1 << SolidityParser.T__9))) !== 0)) {
	                this.state = 227;
	                this.versionOperator();
	            }

	            this.state = 230;
	            this.match(SolidityParser.DecimalNumber);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importDeclaration() {
	    let localctx = new ImportDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, SolidityParser.RULE_importDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 233;
	        this.identifier();
	        this.state = 236;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__10) {
	            this.state = 234;
	            this.match(SolidityParser.T__10);
	            this.state = 235;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importDirective() {
	    let localctx = new ImportDirectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, SolidityParser.RULE_importDirective);
	    var _la = 0; // Token type
	    try {
	        this.state = 272;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 238;
	            this.match(SolidityParser.T__11);
	            this.state = 239;
	            this.match(SolidityParser.StringLiteralFragment);
	            this.state = 242;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SolidityParser.T__10) {
	                this.state = 240;
	                this.match(SolidityParser.T__10);
	                this.state = 241;
	                this.identifier();
	            }

	            this.state = 244;
	            this.match(SolidityParser.T__1);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 245;
	            this.match(SolidityParser.T__11);
	            this.state = 248;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case SolidityParser.T__12:
	                this.state = 246;
	                this.match(SolidityParser.T__12);
	                break;
	            case SolidityParser.T__13:
	            case SolidityParser.T__40:
	            case SolidityParser.T__93:
	            case SolidityParser.LeaveKeyword:
	            case SolidityParser.PayableKeyword:
	            case SolidityParser.ReceiveKeyword:
	            case SolidityParser.Identifier:
	                this.state = 247;
	                this.identifier();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 252;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SolidityParser.T__10) {
	                this.state = 250;
	                this.match(SolidityParser.T__10);
	                this.state = 251;
	                this.identifier();
	            }

	            this.state = 254;
	            this.match(SolidityParser.T__13);
	            this.state = 255;
	            this.match(SolidityParser.StringLiteralFragment);
	            this.state = 256;
	            this.match(SolidityParser.T__1);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 257;
	            this.match(SolidityParser.T__11);
	            this.state = 258;
	            this.match(SolidityParser.T__14);
	            this.state = 259;
	            this.importDeclaration();
	            this.state = 264;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SolidityParser.T__15) {
	                this.state = 260;
	                this.match(SolidityParser.T__15);
	                this.state = 261;
	                this.importDeclaration();
	                this.state = 266;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 267;
	            this.match(SolidityParser.T__16);
	            this.state = 268;
	            this.match(SolidityParser.T__13);
	            this.state = 269;
	            this.match(SolidityParser.StringLiteralFragment);
	            this.state = 270;
	            this.match(SolidityParser.T__1);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	contractDefinition() {
	    let localctx = new ContractDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, SolidityParser.RULE_contractDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 275;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__17) {
	            this.state = 274;
	            this.match(SolidityParser.T__17);
	        }

	        this.state = 277;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__18) | (1 << SolidityParser.T__19) | (1 << SolidityParser.T__20))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 278;
	        this.identifier();
	        this.state = 288;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__21) {
	            this.state = 279;
	            this.match(SolidityParser.T__21);
	            this.state = 280;
	            this.inheritanceSpecifier();
	            this.state = 285;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SolidityParser.T__15) {
	                this.state = 281;
	                this.match(SolidityParser.T__15);
	                this.state = 282;
	                this.inheritanceSpecifier();
	                this.state = 287;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 290;
	        this.match(SolidityParser.T__14);
	        this.state = 294;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__26) | (1 << SolidityParser.T__27) | (1 << SolidityParser.T__28) | (1 << SolidityParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SolidityParser.T__31 - 32)) | (1 << (SolidityParser.T__34 - 32)) | (1 << (SolidityParser.T__36 - 32)) | (1 << (SolidityParser.T__40 - 32)) | (1 << (SolidityParser.T__52 - 32)) | (1 << (SolidityParser.T__53 - 32)) | (1 << (SolidityParser.T__54 - 32)) | (1 << (SolidityParser.T__55 - 32)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.T__93 - 94)) | (1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.LeaveKeyword - 94)) | (1 << (SolidityParser.PayableKeyword - 94)) | (1 << (SolidityParser.ConstructorKeyword - 94)) | (1 << (SolidityParser.FallbackKeyword - 94)) | (1 << (SolidityParser.ReceiveKeyword - 94)))) !== 0) || _la===SolidityParser.Identifier) {
	            this.state = 291;
	            this.contractPart();
	            this.state = 296;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 297;
	        this.match(SolidityParser.T__16);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inheritanceSpecifier() {
	    let localctx = new InheritanceSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, SolidityParser.RULE_inheritanceSpecifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 299;
	        this.userDefinedTypeName();
	        this.state = 305;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__22) {
	            this.state = 300;
	            this.match(SolidityParser.T__22);
	            this.state = 302;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__4) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__22))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__34 - 33)) | (1 << (SolidityParser.T__40 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__58 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (SolidityParser.T__64 - 65)) | (1 << (SolidityParser.T__93 - 65)) | (1 << (SolidityParser.Int - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) !== 0)) {
	                this.state = 301;
	                this.expressionList();
	            }

	            this.state = 304;
	            this.match(SolidityParser.T__23);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	contractPart() {
	    let localctx = new ContractPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, SolidityParser.RULE_contractPart);
	    try {
	        this.state = 314;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 307;
	            this.stateVariableDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 308;
	            this.usingForDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 309;
	            this.structDefinition();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 310;
	            this.modifierDefinition();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 311;
	            this.functionDefinition();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 312;
	            this.eventDefinition();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 313;
	            this.enumDefinition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stateVariableDeclaration() {
	    let localctx = new StateVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, SolidityParser.RULE_stateVariableDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 316;
	        this.typeName(0);
	        this.state = 325;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 95)) & ~0x1f) == 0 && ((1 << (_la - 95)) & ((1 << (SolidityParser.T__94 - 95)) | (1 << (SolidityParser.ConstantKeyword - 95)) | (1 << (SolidityParser.ImmutableKeyword - 95)) | (1 << (SolidityParser.InternalKeyword - 95)) | (1 << (SolidityParser.PrivateKeyword - 95)) | (1 << (SolidityParser.PublicKeyword - 95)))) !== 0)) {
	            this.state = 323;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case SolidityParser.PublicKeyword:
	                this.state = 317;
	                this.match(SolidityParser.PublicKeyword);
	                break;
	            case SolidityParser.InternalKeyword:
	                this.state = 318;
	                this.match(SolidityParser.InternalKeyword);
	                break;
	            case SolidityParser.PrivateKeyword:
	                this.state = 319;
	                this.match(SolidityParser.PrivateKeyword);
	                break;
	            case SolidityParser.ConstantKeyword:
	                this.state = 320;
	                this.match(SolidityParser.ConstantKeyword);
	                break;
	            case SolidityParser.ImmutableKeyword:
	                this.state = 321;
	                this.match(SolidityParser.ImmutableKeyword);
	                break;
	            case SolidityParser.T__94:
	                this.state = 322;
	                this.overrideSpecifier();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 327;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 328;
	        this.identifier();
	        this.state = 331;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__9) {
	            this.state = 329;
	            this.match(SolidityParser.T__9);
	            this.state = 330;
	            this.expression(0);
	        }

	        this.state = 333;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fileLevelConstant() {
	    let localctx = new FileLevelConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, SolidityParser.RULE_fileLevelConstant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 335;
	        this.typeName(0);
	        this.state = 336;
	        this.match(SolidityParser.ConstantKeyword);
	        this.state = 337;
	        this.identifier();
	        this.state = 338;
	        this.match(SolidityParser.T__9);
	        this.state = 339;
	        this.expression(0);
	        this.state = 340;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	usingForDeclaration() {
	    let localctx = new UsingForDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, SolidityParser.RULE_usingForDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 342;
	        this.match(SolidityParser.T__24);
	        this.state = 343;
	        this.identifier();
	        this.state = 344;
	        this.match(SolidityParser.T__25);
	        this.state = 347;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__12:
	            this.state = 345;
	            this.match(SolidityParser.T__12);
	            break;
	        case SolidityParser.T__13:
	        case SolidityParser.T__28:
	        case SolidityParser.T__34:
	        case SolidityParser.T__36:
	        case SolidityParser.T__40:
	        case SolidityParser.T__52:
	        case SolidityParser.T__53:
	        case SolidityParser.T__54:
	        case SolidityParser.T__55:
	        case SolidityParser.T__93:
	        case SolidityParser.Int:
	        case SolidityParser.Uint:
	        case SolidityParser.Byte:
	        case SolidityParser.Fixed:
	        case SolidityParser.Ufixed:
	        case SolidityParser.LeaveKeyword:
	        case SolidityParser.PayableKeyword:
	        case SolidityParser.ReceiveKeyword:
	        case SolidityParser.Identifier:
	            this.state = 346;
	            this.typeName(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 349;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structDefinition() {
	    let localctx = new StructDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, SolidityParser.RULE_structDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 351;
	        this.match(SolidityParser.T__26);
	        this.state = 352;
	        this.identifier();
	        this.state = 353;
	        this.match(SolidityParser.T__14);
	        this.state = 364;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__13 || _la===SolidityParser.T__28 || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (SolidityParser.T__34 - 35)) | (1 << (SolidityParser.T__36 - 35)) | (1 << (SolidityParser.T__40 - 35)) | (1 << (SolidityParser.T__52 - 35)) | (1 << (SolidityParser.T__53 - 35)) | (1 << (SolidityParser.T__54 - 35)) | (1 << (SolidityParser.T__55 - 35)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.T__93 - 94)) | (1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.LeaveKeyword - 94)) | (1 << (SolidityParser.PayableKeyword - 94)) | (1 << (SolidityParser.ReceiveKeyword - 94)))) !== 0) || _la===SolidityParser.Identifier) {
	            this.state = 354;
	            this.variableDeclaration();
	            this.state = 355;
	            this.match(SolidityParser.T__1);
	            this.state = 361;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SolidityParser.T__13 || _la===SolidityParser.T__28 || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (SolidityParser.T__34 - 35)) | (1 << (SolidityParser.T__36 - 35)) | (1 << (SolidityParser.T__40 - 35)) | (1 << (SolidityParser.T__52 - 35)) | (1 << (SolidityParser.T__53 - 35)) | (1 << (SolidityParser.T__54 - 35)) | (1 << (SolidityParser.T__55 - 35)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.T__93 - 94)) | (1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.LeaveKeyword - 94)) | (1 << (SolidityParser.PayableKeyword - 94)) | (1 << (SolidityParser.ReceiveKeyword - 94)))) !== 0) || _la===SolidityParser.Identifier) {
	                this.state = 356;
	                this.variableDeclaration();
	                this.state = 357;
	                this.match(SolidityParser.T__1);
	                this.state = 363;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 366;
	        this.match(SolidityParser.T__16);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifierDefinition() {
	    let localctx = new ModifierDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, SolidityParser.RULE_modifierDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 368;
	        this.match(SolidityParser.T__27);
	        this.state = 369;
	        this.identifier();
	        this.state = 371;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__22) {
	            this.state = 370;
	            this.parameterList();
	        }

	        this.state = 377;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SolidityParser.T__94 || _la===SolidityParser.VirtualKeyword) {
	            this.state = 375;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case SolidityParser.VirtualKeyword:
	                this.state = 373;
	                this.match(SolidityParser.VirtualKeyword);
	                break;
	            case SolidityParser.T__94:
	                this.state = 374;
	                this.overrideSpecifier();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 379;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 380;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifierInvocation() {
	    let localctx = new ModifierInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, SolidityParser.RULE_modifierInvocation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 382;
	        this.identifier();
	        this.state = 388;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__22) {
	            this.state = 383;
	            this.match(SolidityParser.T__22);
	            this.state = 385;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__4) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__22))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__34 - 33)) | (1 << (SolidityParser.T__40 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__58 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (SolidityParser.T__64 - 65)) | (1 << (SolidityParser.T__93 - 65)) | (1 << (SolidityParser.Int - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) !== 0)) {
	                this.state = 384;
	                this.expressionList();
	            }

	            this.state = 387;
	            this.match(SolidityParser.T__23);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDefinition() {
	    let localctx = new FunctionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, SolidityParser.RULE_functionDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 390;
	        this.functionDescriptor();
	        this.state = 391;
	        this.parameterList();
	        this.state = 392;
	        this.modifierList();
	        this.state = 394;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__29) {
	            this.state = 393;
	            this.returnParameters();
	        }

	        this.state = 398;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__1:
	            this.state = 396;
	            this.match(SolidityParser.T__1);
	            break;
	        case SolidityParser.T__14:
	            this.state = 397;
	            this.block();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDescriptor() {
	    let localctx = new FunctionDescriptorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, SolidityParser.RULE_functionDescriptor);
	    var _la = 0; // Token type
	    try {
	        this.state = 407;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__28:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 400;
	            this.match(SolidityParser.T__28);
	            this.state = 402;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SolidityParser.T__13 || _la===SolidityParser.T__40 || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.T__93 - 94)) | (1 << (SolidityParser.LeaveKeyword - 94)) | (1 << (SolidityParser.PayableKeyword - 94)) | (1 << (SolidityParser.ReceiveKeyword - 94)))) !== 0) || _la===SolidityParser.Identifier) {
	                this.state = 401;
	                this.identifier();
	            }

	            break;
	        case SolidityParser.ConstructorKeyword:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 404;
	            this.match(SolidityParser.ConstructorKeyword);
	            break;
	        case SolidityParser.FallbackKeyword:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 405;
	            this.match(SolidityParser.FallbackKeyword);
	            break;
	        case SolidityParser.ReceiveKeyword:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 406;
	            this.match(SolidityParser.ReceiveKeyword);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnParameters() {
	    let localctx = new ReturnParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, SolidityParser.RULE_returnParameters);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 409;
	        this.match(SolidityParser.T__29);
	        this.state = 410;
	        this.parameterList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifierList() {
	    let localctx = new ModifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, SolidityParser.RULE_modifierList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 422;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SolidityParser.T__13 || _la===SolidityParser.T__40 || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.T__93 - 94)) | (1 << (SolidityParser.T__94 - 94)) | (1 << (SolidityParser.ConstantKeyword - 94)) | (1 << (SolidityParser.LeaveKeyword - 94)) | (1 << (SolidityParser.ExternalKeyword - 94)) | (1 << (SolidityParser.InternalKeyword - 94)) | (1 << (SolidityParser.PayableKeyword - 94)) | (1 << (SolidityParser.PrivateKeyword - 94)) | (1 << (SolidityParser.PublicKeyword - 94)) | (1 << (SolidityParser.VirtualKeyword - 94)) | (1 << (SolidityParser.PureKeyword - 94)) | (1 << (SolidityParser.ViewKeyword - 94)) | (1 << (SolidityParser.ReceiveKeyword - 94)))) !== 0) || _la===SolidityParser.Identifier) {
	            this.state = 420;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 412;
	                this.match(SolidityParser.ExternalKeyword);
	                break;

	            case 2:
	                this.state = 413;
	                this.match(SolidityParser.PublicKeyword);
	                break;

	            case 3:
	                this.state = 414;
	                this.match(SolidityParser.InternalKeyword);
	                break;

	            case 4:
	                this.state = 415;
	                this.match(SolidityParser.PrivateKeyword);
	                break;

	            case 5:
	                this.state = 416;
	                this.match(SolidityParser.VirtualKeyword);
	                break;

	            case 6:
	                this.state = 417;
	                this.stateMutability();
	                break;

	            case 7:
	                this.state = 418;
	                this.modifierInvocation();
	                break;

	            case 8:
	                this.state = 419;
	                this.overrideSpecifier();
	                break;

	            }
	            this.state = 424;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eventDefinition() {
	    let localctx = new EventDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, SolidityParser.RULE_eventDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 425;
	        this.match(SolidityParser.T__30);
	        this.state = 426;
	        this.identifier();
	        this.state = 427;
	        this.eventParameterList();
	        this.state = 429;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.AnonymousKeyword) {
	            this.state = 428;
	            this.match(SolidityParser.AnonymousKeyword);
	        }

	        this.state = 431;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumValue() {
	    let localctx = new EnumValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, SolidityParser.RULE_enumValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 433;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumDefinition() {
	    let localctx = new EnumDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, SolidityParser.RULE_enumDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 435;
	        this.match(SolidityParser.T__31);
	        this.state = 436;
	        this.identifier();
	        this.state = 437;
	        this.match(SolidityParser.T__14);
	        this.state = 439;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__13 || _la===SolidityParser.T__40 || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.T__93 - 94)) | (1 << (SolidityParser.LeaveKeyword - 94)) | (1 << (SolidityParser.PayableKeyword - 94)) | (1 << (SolidityParser.ReceiveKeyword - 94)))) !== 0) || _la===SolidityParser.Identifier) {
	            this.state = 438;
	            this.enumValue();
	        }

	        this.state = 445;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SolidityParser.T__15) {
	            this.state = 441;
	            this.match(SolidityParser.T__15);
	            this.state = 442;
	            this.enumValue();
	            this.state = 447;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 448;
	        this.match(SolidityParser.T__16);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterList() {
	    let localctx = new ParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, SolidityParser.RULE_parameterList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 450;
	        this.match(SolidityParser.T__22);
	        this.state = 459;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__13 || _la===SolidityParser.T__28 || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (SolidityParser.T__34 - 35)) | (1 << (SolidityParser.T__36 - 35)) | (1 << (SolidityParser.T__40 - 35)) | (1 << (SolidityParser.T__52 - 35)) | (1 << (SolidityParser.T__53 - 35)) | (1 << (SolidityParser.T__54 - 35)) | (1 << (SolidityParser.T__55 - 35)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.T__93 - 94)) | (1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.LeaveKeyword - 94)) | (1 << (SolidityParser.PayableKeyword - 94)) | (1 << (SolidityParser.ReceiveKeyword - 94)))) !== 0) || _la===SolidityParser.Identifier) {
	            this.state = 451;
	            this.parameter();
	            this.state = 456;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SolidityParser.T__15) {
	                this.state = 452;
	                this.match(SolidityParser.T__15);
	                this.state = 453;
	                this.parameter();
	                this.state = 458;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 461;
	        this.match(SolidityParser.T__23);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameter() {
	    let localctx = new ParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, SolidityParser.RULE_parameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 463;
	        this.typeName(0);
	        this.state = 465;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        if(la_===1) {
	            this.state = 464;
	            this.storageLocation();

	        }
	        this.state = 468;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__13 || _la===SolidityParser.T__40 || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.T__93 - 94)) | (1 << (SolidityParser.LeaveKeyword - 94)) | (1 << (SolidityParser.PayableKeyword - 94)) | (1 << (SolidityParser.ReceiveKeyword - 94)))) !== 0) || _la===SolidityParser.Identifier) {
	            this.state = 467;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eventParameterList() {
	    let localctx = new EventParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, SolidityParser.RULE_eventParameterList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 470;
	        this.match(SolidityParser.T__22);
	        this.state = 479;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__13 || _la===SolidityParser.T__28 || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (SolidityParser.T__34 - 35)) | (1 << (SolidityParser.T__36 - 35)) | (1 << (SolidityParser.T__40 - 35)) | (1 << (SolidityParser.T__52 - 35)) | (1 << (SolidityParser.T__53 - 35)) | (1 << (SolidityParser.T__54 - 35)) | (1 << (SolidityParser.T__55 - 35)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.T__93 - 94)) | (1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.LeaveKeyword - 94)) | (1 << (SolidityParser.PayableKeyword - 94)) | (1 << (SolidityParser.ReceiveKeyword - 94)))) !== 0) || _la===SolidityParser.Identifier) {
	            this.state = 471;
	            this.eventParameter();
	            this.state = 476;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SolidityParser.T__15) {
	                this.state = 472;
	                this.match(SolidityParser.T__15);
	                this.state = 473;
	                this.eventParameter();
	                this.state = 478;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 481;
	        this.match(SolidityParser.T__23);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eventParameter() {
	    let localctx = new EventParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, SolidityParser.RULE_eventParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 483;
	        this.typeName(0);
	        this.state = 485;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.IndexedKeyword) {
	            this.state = 484;
	            this.match(SolidityParser.IndexedKeyword);
	        }

	        this.state = 488;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__13 || _la===SolidityParser.T__40 || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.T__93 - 94)) | (1 << (SolidityParser.LeaveKeyword - 94)) | (1 << (SolidityParser.PayableKeyword - 94)) | (1 << (SolidityParser.ReceiveKeyword - 94)))) !== 0) || _la===SolidityParser.Identifier) {
	            this.state = 487;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionTypeParameterList() {
	    let localctx = new FunctionTypeParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, SolidityParser.RULE_functionTypeParameterList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 490;
	        this.match(SolidityParser.T__22);
	        this.state = 499;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__13 || _la===SolidityParser.T__28 || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (SolidityParser.T__34 - 35)) | (1 << (SolidityParser.T__36 - 35)) | (1 << (SolidityParser.T__40 - 35)) | (1 << (SolidityParser.T__52 - 35)) | (1 << (SolidityParser.T__53 - 35)) | (1 << (SolidityParser.T__54 - 35)) | (1 << (SolidityParser.T__55 - 35)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.T__93 - 94)) | (1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.LeaveKeyword - 94)) | (1 << (SolidityParser.PayableKeyword - 94)) | (1 << (SolidityParser.ReceiveKeyword - 94)))) !== 0) || _la===SolidityParser.Identifier) {
	            this.state = 491;
	            this.functionTypeParameter();
	            this.state = 496;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SolidityParser.T__15) {
	                this.state = 492;
	                this.match(SolidityParser.T__15);
	                this.state = 493;
	                this.functionTypeParameter();
	                this.state = 498;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 501;
	        this.match(SolidityParser.T__23);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionTypeParameter() {
	    let localctx = new FunctionTypeParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, SolidityParser.RULE_functionTypeParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 503;
	        this.typeName(0);
	        this.state = 505;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (SolidityParser.T__38 - 39)) | (1 << (SolidityParser.T__39 - 39)) | (1 << (SolidityParser.T__40 - 39)))) !== 0)) {
	            this.state = 504;
	            this.storageLocation();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaration() {
	    let localctx = new VariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, SolidityParser.RULE_variableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 507;
	        this.typeName(0);
	        this.state = 509;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
	        if(la_===1) {
	            this.state = 508;
	            this.storageLocation();

	        }
	        this.state = 511;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	typeName(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new TypeNameContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 64;
	    this.enterRecursionRule(localctx, 64, SolidityParser.RULE_typeName, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 520;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 514;
	            this.elementaryTypeName();
	            break;

	        case 2:
	            this.state = 515;
	            this.userDefinedTypeName();
	            break;

	        case 3:
	            this.state = 516;
	            this.mapping();
	            break;

	        case 4:
	            this.state = 517;
	            this.functionTypeName();
	            break;

	        case 5:
	            this.state = 518;
	            this.match(SolidityParser.T__34);
	            this.state = 519;
	            this.match(SolidityParser.PayableKeyword);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 530;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,55,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new TypeNameContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_typeName);
	                this.state = 522;
	                if (!( this.precpred(this._ctx, 3))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                }
	                this.state = 523;
	                this.match(SolidityParser.T__32);
	                this.state = 525;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__4) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__22))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__34 - 33)) | (1 << (SolidityParser.T__40 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__58 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (SolidityParser.T__64 - 65)) | (1 << (SolidityParser.T__93 - 65)) | (1 << (SolidityParser.Int - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) !== 0)) {
	                    this.state = 524;
	                    this.expression(0);
	                }

	                this.state = 527;
	                this.match(SolidityParser.T__33); 
	            }
	            this.state = 532;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,55,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	userDefinedTypeName() {
	    let localctx = new UserDefinedTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, SolidityParser.RULE_userDefinedTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 533;
	        this.identifier();
	        this.state = 538;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,56,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 534;
	                this.match(SolidityParser.T__35);
	                this.state = 535;
	                this.identifier(); 
	            }
	            this.state = 540;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,56,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mappingKey() {
	    let localctx = new MappingKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, SolidityParser.RULE_mappingKey);
	    try {
	        this.state = 543;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__34:
	        case SolidityParser.T__52:
	        case SolidityParser.T__53:
	        case SolidityParser.T__54:
	        case SolidityParser.T__55:
	        case SolidityParser.Int:
	        case SolidityParser.Uint:
	        case SolidityParser.Byte:
	        case SolidityParser.Fixed:
	        case SolidityParser.Ufixed:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 541;
	            this.elementaryTypeName();
	            break;
	        case SolidityParser.T__13:
	        case SolidityParser.T__40:
	        case SolidityParser.T__93:
	        case SolidityParser.LeaveKeyword:
	        case SolidityParser.PayableKeyword:
	        case SolidityParser.ReceiveKeyword:
	        case SolidityParser.Identifier:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 542;
	            this.userDefinedTypeName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapping() {
	    let localctx = new MappingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, SolidityParser.RULE_mapping);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 545;
	        this.match(SolidityParser.T__36);
	        this.state = 546;
	        this.match(SolidityParser.T__22);
	        this.state = 547;
	        this.mappingKey();
	        this.state = 548;
	        this.match(SolidityParser.T__37);
	        this.state = 549;
	        this.typeName(0);
	        this.state = 550;
	        this.match(SolidityParser.T__23);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionTypeName() {
	    let localctx = new FunctionTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, SolidityParser.RULE_functionTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 552;
	        this.match(SolidityParser.T__28);
	        this.state = 553;
	        this.functionTypeParameterList();
	        this.state = 559;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,59,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 557;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case SolidityParser.InternalKeyword:
	                    this.state = 554;
	                    this.match(SolidityParser.InternalKeyword);
	                    break;
	                case SolidityParser.ExternalKeyword:
	                    this.state = 555;
	                    this.match(SolidityParser.ExternalKeyword);
	                    break;
	                case SolidityParser.ConstantKeyword:
	                case SolidityParser.PayableKeyword:
	                case SolidityParser.PureKeyword:
	                case SolidityParser.ViewKeyword:
	                    this.state = 556;
	                    this.stateMutability();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 561;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,59,this._ctx);
	        }

	        this.state = 564;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        if(la_===1) {
	            this.state = 562;
	            this.match(SolidityParser.T__29);
	            this.state = 563;
	            this.functionTypeParameterList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	storageLocation() {
	    let localctx = new StorageLocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, SolidityParser.RULE_storageLocation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 566;
	        _la = this._input.LA(1);
	        if(!(((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (SolidityParser.T__38 - 39)) | (1 << (SolidityParser.T__39 - 39)) | (1 << (SolidityParser.T__40 - 39)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stateMutability() {
	    let localctx = new StateMutabilityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, SolidityParser.RULE_stateMutability);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 568;
	        _la = this._input.LA(1);
	        if(!(((((_la - 109)) & ~0x1f) == 0 && ((1 << (_la - 109)) & ((1 << (SolidityParser.ConstantKeyword - 109)) | (1 << (SolidityParser.PayableKeyword - 109)) | (1 << (SolidityParser.PureKeyword - 109)) | (1 << (SolidityParser.ViewKeyword - 109)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, SolidityParser.RULE_block);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 570;
	        this.match(SolidityParser.T__14);
	        this.state = 574;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__4) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__14) | (1 << SolidityParser.T__22) | (1 << SolidityParser.T__25) | (1 << SolidityParser.T__28))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__34 - 33)) | (1 << (SolidityParser.T__36 - 33)) | (1 << (SolidityParser.T__40 - 33)) | (1 << (SolidityParser.T__41 - 33)) | (1 << (SolidityParser.T__43 - 33)) | (1 << (SolidityParser.T__45 - 33)) | (1 << (SolidityParser.T__46 - 33)) | (1 << (SolidityParser.T__47 - 33)) | (1 << (SolidityParser.T__48 - 33)) | (1 << (SolidityParser.T__49 - 33)) | (1 << (SolidityParser.T__50 - 33)) | (1 << (SolidityParser.T__51 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__58 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (SolidityParser.T__64 - 65)) | (1 << (SolidityParser.T__93 - 65)) | (1 << (SolidityParser.Int - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.BreakKeyword - 97)) | (1 << (SolidityParser.ContinueKeyword - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) !== 0)) {
	            this.state = 571;
	            this.statement();
	            this.state = 576;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 577;
	        this.match(SolidityParser.T__16);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, SolidityParser.RULE_statement);
	    try {
	        this.state = 593;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__41:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 579;
	            this.ifStatement();
	            break;
	        case SolidityParser.T__43:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 580;
	            this.tryStatement();
	            break;
	        case SolidityParser.T__45:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 581;
	            this.whileStatement();
	            break;
	        case SolidityParser.T__25:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 582;
	            this.forStatement();
	            break;
	        case SolidityParser.T__14:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 583;
	            this.block();
	            break;
	        case SolidityParser.T__47:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 584;
	            this.inlineAssemblyStatement();
	            break;
	        case SolidityParser.T__48:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 585;
	            this.doWhileStatement();
	            break;
	        case SolidityParser.ContinueKeyword:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 586;
	            this.continueStatement();
	            break;
	        case SolidityParser.BreakKeyword:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 587;
	            this.breakStatement();
	            break;
	        case SolidityParser.T__49:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 588;
	            this.returnStatement();
	            break;
	        case SolidityParser.T__50:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 589;
	            this.throwStatement();
	            break;
	        case SolidityParser.T__51:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 590;
	            this.emitStatement();
	            break;
	        case SolidityParser.T__4:
	        case SolidityParser.T__13:
	        case SolidityParser.T__22:
	        case SolidityParser.T__28:
	        case SolidityParser.T__32:
	        case SolidityParser.T__34:
	        case SolidityParser.T__36:
	        case SolidityParser.T__40:
	        case SolidityParser.T__52:
	        case SolidityParser.T__53:
	        case SolidityParser.T__54:
	        case SolidityParser.T__55:
	        case SolidityParser.T__56:
	        case SolidityParser.T__57:
	        case SolidityParser.T__58:
	        case SolidityParser.T__60:
	        case SolidityParser.T__61:
	        case SolidityParser.T__62:
	        case SolidityParser.T__63:
	        case SolidityParser.T__64:
	        case SolidityParser.T__93:
	        case SolidityParser.Int:
	        case SolidityParser.Uint:
	        case SolidityParser.Byte:
	        case SolidityParser.Fixed:
	        case SolidityParser.Ufixed:
	        case SolidityParser.BooleanLiteral:
	        case SolidityParser.DecimalNumber:
	        case SolidityParser.HexNumber:
	        case SolidityParser.HexLiteralFragment:
	        case SolidityParser.LeaveKeyword:
	        case SolidityParser.PayableKeyword:
	        case SolidityParser.TypeKeyword:
	        case SolidityParser.ReceiveKeyword:
	        case SolidityParser.Identifier:
	        case SolidityParser.StringLiteralFragment:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 591;
	            this.simpleStatement();
	            break;
	        case SolidityParser.T__46:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 592;
	            this.uncheckedStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStatement() {
	    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, SolidityParser.RULE_expressionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 595;
	        this.expression(0);
	        this.state = 596;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement() {
	    let localctx = new IfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, SolidityParser.RULE_ifStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 598;
	        this.match(SolidityParser.T__41);
	        this.state = 599;
	        this.match(SolidityParser.T__22);
	        this.state = 600;
	        this.expression(0);
	        this.state = 601;
	        this.match(SolidityParser.T__23);
	        this.state = 602;
	        this.statement();
	        this.state = 605;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        if(la_===1) {
	            this.state = 603;
	            this.match(SolidityParser.T__42);
	            this.state = 604;
	            this.statement();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryStatement() {
	    let localctx = new TryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, SolidityParser.RULE_tryStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 607;
	        this.match(SolidityParser.T__43);
	        this.state = 608;
	        this.expression(0);
	        this.state = 610;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__29) {
	            this.state = 609;
	            this.returnParameters();
	        }

	        this.state = 612;
	        this.block();
	        this.state = 614; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 613;
	            this.catchClause();
	            this.state = 616; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===SolidityParser.T__44);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchClause() {
	    let localctx = new CatchClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, SolidityParser.RULE_catchClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 618;
	        this.match(SolidityParser.T__44);
	        this.state = 623;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 14)) & ~0x1f) == 0 && ((1 << (_la - 14)) & ((1 << (SolidityParser.T__13 - 14)) | (1 << (SolidityParser.T__22 - 14)) | (1 << (SolidityParser.T__40 - 14)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.T__93 - 94)) | (1 << (SolidityParser.LeaveKeyword - 94)) | (1 << (SolidityParser.PayableKeyword - 94)) | (1 << (SolidityParser.ReceiveKeyword - 94)))) !== 0) || _la===SolidityParser.Identifier) {
	            this.state = 620;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SolidityParser.T__13 || _la===SolidityParser.T__40 || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.T__93 - 94)) | (1 << (SolidityParser.LeaveKeyword - 94)) | (1 << (SolidityParser.PayableKeyword - 94)) | (1 << (SolidityParser.ReceiveKeyword - 94)))) !== 0) || _la===SolidityParser.Identifier) {
	                this.state = 619;
	                this.identifier();
	            }

	            this.state = 622;
	            this.parameterList();
	        }

	        this.state = 625;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whileStatement() {
	    let localctx = new WhileStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, SolidityParser.RULE_whileStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 627;
	        this.match(SolidityParser.T__45);
	        this.state = 628;
	        this.match(SolidityParser.T__22);
	        this.state = 629;
	        this.expression(0);
	        this.state = 630;
	        this.match(SolidityParser.T__23);
	        this.state = 631;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleStatement() {
	    let localctx = new SimpleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, SolidityParser.RULE_simpleStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 635;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 633;
	            this.variableDeclarationStatement();
	            break;

	        case 2:
	            this.state = 634;
	            this.expressionStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uncheckedStatement() {
	    let localctx = new UncheckedStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, SolidityParser.RULE_uncheckedStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 637;
	        this.match(SolidityParser.T__46);
	        this.state = 638;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forStatement() {
	    let localctx = new ForStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, SolidityParser.RULE_forStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 640;
	        this.match(SolidityParser.T__25);
	        this.state = 641;
	        this.match(SolidityParser.T__22);
	        this.state = 644;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__4:
	        case SolidityParser.T__13:
	        case SolidityParser.T__22:
	        case SolidityParser.T__28:
	        case SolidityParser.T__32:
	        case SolidityParser.T__34:
	        case SolidityParser.T__36:
	        case SolidityParser.T__40:
	        case SolidityParser.T__52:
	        case SolidityParser.T__53:
	        case SolidityParser.T__54:
	        case SolidityParser.T__55:
	        case SolidityParser.T__56:
	        case SolidityParser.T__57:
	        case SolidityParser.T__58:
	        case SolidityParser.T__60:
	        case SolidityParser.T__61:
	        case SolidityParser.T__62:
	        case SolidityParser.T__63:
	        case SolidityParser.T__64:
	        case SolidityParser.T__93:
	        case SolidityParser.Int:
	        case SolidityParser.Uint:
	        case SolidityParser.Byte:
	        case SolidityParser.Fixed:
	        case SolidityParser.Ufixed:
	        case SolidityParser.BooleanLiteral:
	        case SolidityParser.DecimalNumber:
	        case SolidityParser.HexNumber:
	        case SolidityParser.HexLiteralFragment:
	        case SolidityParser.LeaveKeyword:
	        case SolidityParser.PayableKeyword:
	        case SolidityParser.TypeKeyword:
	        case SolidityParser.ReceiveKeyword:
	        case SolidityParser.Identifier:
	        case SolidityParser.StringLiteralFragment:
	            this.state = 642;
	            this.simpleStatement();
	            break;
	        case SolidityParser.T__1:
	            this.state = 643;
	            this.match(SolidityParser.T__1);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 648;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__4:
	        case SolidityParser.T__13:
	        case SolidityParser.T__22:
	        case SolidityParser.T__32:
	        case SolidityParser.T__34:
	        case SolidityParser.T__40:
	        case SolidityParser.T__52:
	        case SolidityParser.T__53:
	        case SolidityParser.T__54:
	        case SolidityParser.T__55:
	        case SolidityParser.T__56:
	        case SolidityParser.T__57:
	        case SolidityParser.T__58:
	        case SolidityParser.T__60:
	        case SolidityParser.T__61:
	        case SolidityParser.T__62:
	        case SolidityParser.T__63:
	        case SolidityParser.T__64:
	        case SolidityParser.T__93:
	        case SolidityParser.Int:
	        case SolidityParser.Uint:
	        case SolidityParser.Byte:
	        case SolidityParser.Fixed:
	        case SolidityParser.Ufixed:
	        case SolidityParser.BooleanLiteral:
	        case SolidityParser.DecimalNumber:
	        case SolidityParser.HexNumber:
	        case SolidityParser.HexLiteralFragment:
	        case SolidityParser.LeaveKeyword:
	        case SolidityParser.PayableKeyword:
	        case SolidityParser.TypeKeyword:
	        case SolidityParser.ReceiveKeyword:
	        case SolidityParser.Identifier:
	        case SolidityParser.StringLiteralFragment:
	            this.state = 646;
	            this.expressionStatement();
	            break;
	        case SolidityParser.T__1:
	            this.state = 647;
	            this.match(SolidityParser.T__1);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 651;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__4) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__22))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__34 - 33)) | (1 << (SolidityParser.T__40 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__58 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (SolidityParser.T__64 - 65)) | (1 << (SolidityParser.T__93 - 65)) | (1 << (SolidityParser.Int - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) !== 0)) {
	            this.state = 650;
	            this.expression(0);
	        }

	        this.state = 653;
	        this.match(SolidityParser.T__23);
	        this.state = 654;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inlineAssemblyStatement() {
	    let localctx = new InlineAssemblyStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, SolidityParser.RULE_inlineAssemblyStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 656;
	        this.match(SolidityParser.T__47);
	        this.state = 658;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.StringLiteralFragment) {
	            this.state = 657;
	            this.match(SolidityParser.StringLiteralFragment);
	        }

	        this.state = 660;
	        this.assemblyBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doWhileStatement() {
	    let localctx = new DoWhileStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, SolidityParser.RULE_doWhileStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 662;
	        this.match(SolidityParser.T__48);
	        this.state = 663;
	        this.statement();
	        this.state = 664;
	        this.match(SolidityParser.T__45);
	        this.state = 665;
	        this.match(SolidityParser.T__22);
	        this.state = 666;
	        this.expression(0);
	        this.state = 667;
	        this.match(SolidityParser.T__23);
	        this.state = 668;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStatement() {
	    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, SolidityParser.RULE_continueStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 670;
	        this.match(SolidityParser.ContinueKeyword);
	        this.state = 671;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	breakStatement() {
	    let localctx = new BreakStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, SolidityParser.RULE_breakStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 673;
	        this.match(SolidityParser.BreakKeyword);
	        this.state = 674;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, SolidityParser.RULE_returnStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 676;
	        this.match(SolidityParser.T__49);
	        this.state = 678;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__4) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__22))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__34 - 33)) | (1 << (SolidityParser.T__40 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__58 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (SolidityParser.T__64 - 65)) | (1 << (SolidityParser.T__93 - 65)) | (1 << (SolidityParser.Int - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) !== 0)) {
	            this.state = 677;
	            this.expression(0);
	        }

	        this.state = 680;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwStatement() {
	    let localctx = new ThrowStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, SolidityParser.RULE_throwStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 682;
	        this.match(SolidityParser.T__50);
	        this.state = 683;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emitStatement() {
	    let localctx = new EmitStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, SolidityParser.RULE_emitStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 685;
	        this.match(SolidityParser.T__51);
	        this.state = 686;
	        this.functionCall();
	        this.state = 687;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarationStatement() {
	    let localctx = new VariableDeclarationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, SolidityParser.RULE_variableDeclarationStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 696;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 689;
	            this.match(SolidityParser.T__52);
	            this.state = 690;
	            this.identifierList();
	            break;

	        case 2:
	            this.state = 691;
	            this.variableDeclaration();
	            break;

	        case 3:
	            this.state = 692;
	            this.match(SolidityParser.T__22);
	            this.state = 693;
	            this.variableDeclarationList();
	            this.state = 694;
	            this.match(SolidityParser.T__23);
	            break;

	        }
	        this.state = 700;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__9) {
	            this.state = 698;
	            this.match(SolidityParser.T__9);
	            this.state = 699;
	            this.expression(0);
	        }

	        this.state = 702;
	        this.match(SolidityParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarationList() {
	    let localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, SolidityParser.RULE_variableDeclarationList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 705;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__13 || _la===SolidityParser.T__28 || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (SolidityParser.T__34 - 35)) | (1 << (SolidityParser.T__36 - 35)) | (1 << (SolidityParser.T__40 - 35)) | (1 << (SolidityParser.T__52 - 35)) | (1 << (SolidityParser.T__53 - 35)) | (1 << (SolidityParser.T__54 - 35)) | (1 << (SolidityParser.T__55 - 35)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.T__93 - 94)) | (1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.LeaveKeyword - 94)) | (1 << (SolidityParser.PayableKeyword - 94)) | (1 << (SolidityParser.ReceiveKeyword - 94)))) !== 0) || _la===SolidityParser.Identifier) {
	            this.state = 704;
	            this.variableDeclaration();
	        }

	        this.state = 713;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SolidityParser.T__15) {
	            this.state = 707;
	            this.match(SolidityParser.T__15);
	            this.state = 709;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SolidityParser.T__13 || _la===SolidityParser.T__28 || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (SolidityParser.T__34 - 35)) | (1 << (SolidityParser.T__36 - 35)) | (1 << (SolidityParser.T__40 - 35)) | (1 << (SolidityParser.T__52 - 35)) | (1 << (SolidityParser.T__53 - 35)) | (1 << (SolidityParser.T__54 - 35)) | (1 << (SolidityParser.T__55 - 35)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.T__93 - 94)) | (1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.LeaveKeyword - 94)) | (1 << (SolidityParser.PayableKeyword - 94)) | (1 << (SolidityParser.ReceiveKeyword - 94)))) !== 0) || _la===SolidityParser.Identifier) {
	                this.state = 708;
	                this.variableDeclaration();
	            }

	            this.state = 715;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierList() {
	    let localctx = new IdentifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, SolidityParser.RULE_identifierList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 716;
	        this.match(SolidityParser.T__22);
	        this.state = 723;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,80,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 718;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SolidityParser.T__13 || _la===SolidityParser.T__40 || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.T__93 - 94)) | (1 << (SolidityParser.LeaveKeyword - 94)) | (1 << (SolidityParser.PayableKeyword - 94)) | (1 << (SolidityParser.ReceiveKeyword - 94)))) !== 0) || _la===SolidityParser.Identifier) {
	                    this.state = 717;
	                    this.identifier();
	                }

	                this.state = 720;
	                this.match(SolidityParser.T__15); 
	            }
	            this.state = 725;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,80,this._ctx);
	        }

	        this.state = 727;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__13 || _la===SolidityParser.T__40 || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.T__93 - 94)) | (1 << (SolidityParser.LeaveKeyword - 94)) | (1 << (SolidityParser.PayableKeyword - 94)) | (1 << (SolidityParser.ReceiveKeyword - 94)))) !== 0) || _la===SolidityParser.Identifier) {
	            this.state = 726;
	            this.identifier();
	        }

	        this.state = 729;
	        this.match(SolidityParser.T__23);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementaryTypeName() {
	    let localctx = new ElementaryTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, SolidityParser.RULE_elementaryTypeName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 731;
	        _la = this._input.LA(1);
	        if(!(((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (SolidityParser.T__34 - 35)) | (1 << (SolidityParser.T__52 - 35)) | (1 << (SolidityParser.T__53 - 35)) | (1 << (SolidityParser.T__54 - 35)) | (1 << (SolidityParser.T__55 - 35)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 120;
	    this.enterRecursionRule(localctx, 120, SolidityParser.RULE_expression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 751;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 734;
	            this.match(SolidityParser.T__58);
	            this.state = 735;
	            this.typeName(0);
	            break;

	        case 2:
	            this.state = 736;
	            this.match(SolidityParser.T__22);
	            this.state = 737;
	            this.expression(0);
	            this.state = 738;
	            this.match(SolidityParser.T__23);
	            break;

	        case 3:
	            this.state = 740;
	            _la = this._input.LA(1);
	            if(!(_la===SolidityParser.T__56 || _la===SolidityParser.T__57)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 741;
	            this.expression(19);
	            break;

	        case 4:
	            this.state = 742;
	            _la = this._input.LA(1);
	            if(!(_la===SolidityParser.T__60 || _la===SolidityParser.T__61)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 743;
	            this.expression(18);
	            break;

	        case 5:
	            this.state = 744;
	            _la = this._input.LA(1);
	            if(!(_la===SolidityParser.T__62 || _la===SolidityParser.T__63)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 745;
	            this.expression(17);
	            break;

	        case 6:
	            this.state = 746;
	            this.match(SolidityParser.T__64);
	            this.state = 747;
	            this.expression(16);
	            break;

	        case 7:
	            this.state = 748;
	            this.match(SolidityParser.T__4);
	            this.state = 749;
	            this.expression(15);
	            break;

	        case 8:
	            this.state = 750;
	            this.primaryExpression();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 828;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 826;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 753;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 754;
	                    this.match(SolidityParser.T__65);
	                    this.state = 755;
	                    this.expression(15);
	                    break;

	                case 2:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 756;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 757;
	                    _la = this._input.LA(1);
	                    if(!(_la===SolidityParser.T__12 || _la===SolidityParser.T__66 || _la===SolidityParser.T__67)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 758;
	                    this.expression(14);
	                    break;

	                case 3:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 759;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 760;
	                    _la = this._input.LA(1);
	                    if(!(_la===SolidityParser.T__60 || _la===SolidityParser.T__61)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 761;
	                    this.expression(13);
	                    break;

	                case 4:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 762;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 763;
	                    _la = this._input.LA(1);
	                    if(!(_la===SolidityParser.T__68 || _la===SolidityParser.T__69)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 764;
	                    this.expression(12);
	                    break;

	                case 5:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 765;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 766;
	                    this.match(SolidityParser.T__70);
	                    this.state = 767;
	                    this.expression(11);
	                    break;

	                case 6:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 768;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 769;
	                    this.match(SolidityParser.T__3);
	                    this.state = 770;
	                    this.expression(10);
	                    break;

	                case 7:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 771;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 772;
	                    this.match(SolidityParser.T__71);
	                    this.state = 773;
	                    this.expression(9);
	                    break;

	                case 8:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 774;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 775;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 776;
	                    this.expression(8);
	                    break;

	                case 9:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 777;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 778;
	                    _la = this._input.LA(1);
	                    if(!(_la===SolidityParser.T__72 || _la===SolidityParser.T__73)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 779;
	                    this.expression(7);
	                    break;

	                case 10:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 780;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 781;
	                    this.match(SolidityParser.T__74);
	                    this.state = 782;
	                    this.expression(6);
	                    break;

	                case 11:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 783;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 784;
	                    this.match(SolidityParser.T__2);
	                    this.state = 785;
	                    this.expression(5);
	                    break;

	                case 12:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 786;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 787;
	                    this.match(SolidityParser.T__75);
	                    this.state = 788;
	                    this.expression(0);
	                    this.state = 789;
	                    this.match(SolidityParser.T__59);
	                    this.state = 790;
	                    this.expression(4);
	                    break;

	                case 13:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 792;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 793;
	                    _la = this._input.LA(1);
	                    if(!(_la===SolidityParser.T__9 || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (SolidityParser.T__76 - 77)) | (1 << (SolidityParser.T__77 - 77)) | (1 << (SolidityParser.T__78 - 77)) | (1 << (SolidityParser.T__79 - 77)) | (1 << (SolidityParser.T__80 - 77)) | (1 << (SolidityParser.T__81 - 77)) | (1 << (SolidityParser.T__82 - 77)) | (1 << (SolidityParser.T__83 - 77)) | (1 << (SolidityParser.T__84 - 77)) | (1 << (SolidityParser.T__85 - 77)))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 794;
	                    this.expression(3);
	                    break;

	                case 14:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 795;
	                    if (!( this.precpred(this._ctx, 27))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
	                    }
	                    this.state = 796;
	                    _la = this._input.LA(1);
	                    if(!(_la===SolidityParser.T__56 || _la===SolidityParser.T__57)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    break;

	                case 15:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 797;
	                    if (!( this.precpred(this._ctx, 25))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
	                    }
	                    this.state = 798;
	                    this.match(SolidityParser.T__32);
	                    this.state = 800;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__4) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__22))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__34 - 33)) | (1 << (SolidityParser.T__40 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__58 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (SolidityParser.T__64 - 65)) | (1 << (SolidityParser.T__93 - 65)) | (1 << (SolidityParser.Int - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) !== 0)) {
	                        this.state = 799;
	                        this.expression(0);
	                    }

	                    this.state = 802;
	                    this.match(SolidityParser.T__33);
	                    break;

	                case 16:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 803;
	                    if (!( this.precpred(this._ctx, 24))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
	                    }
	                    this.state = 804;
	                    this.match(SolidityParser.T__32);
	                    this.state = 806;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__4) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__22))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__34 - 33)) | (1 << (SolidityParser.T__40 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__58 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (SolidityParser.T__64 - 65)) | (1 << (SolidityParser.T__93 - 65)) | (1 << (SolidityParser.Int - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) !== 0)) {
	                        this.state = 805;
	                        this.expression(0);
	                    }

	                    this.state = 808;
	                    this.match(SolidityParser.T__59);
	                    this.state = 810;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__4) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__22))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__34 - 33)) | (1 << (SolidityParser.T__40 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__58 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (SolidityParser.T__64 - 65)) | (1 << (SolidityParser.T__93 - 65)) | (1 << (SolidityParser.Int - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) !== 0)) {
	                        this.state = 809;
	                        this.expression(0);
	                    }

	                    this.state = 812;
	                    this.match(SolidityParser.T__33);
	                    break;

	                case 17:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 813;
	                    if (!( this.precpred(this._ctx, 23))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
	                    }
	                    this.state = 814;
	                    this.match(SolidityParser.T__35);
	                    this.state = 815;
	                    this.identifier();
	                    break;

	                case 18:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 816;
	                    if (!( this.precpred(this._ctx, 22))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
	                    }
	                    this.state = 817;
	                    this.match(SolidityParser.T__14);
	                    this.state = 818;
	                    this.nameValueList();
	                    this.state = 819;
	                    this.match(SolidityParser.T__16);
	                    break;

	                case 19:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
	                    this.state = 821;
	                    if (!( this.precpred(this._ctx, 21))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
	                    }
	                    this.state = 822;
	                    this.match(SolidityParser.T__22);
	                    this.state = 823;
	                    this.functionCallArguments();
	                    this.state = 824;
	                    this.match(SolidityParser.T__23);
	                    break;

	                } 
	            }
	            this.state = 830;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	primaryExpression() {
	    let localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, SolidityParser.RULE_primaryExpression);
	    try {
	        this.state = 848;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 831;
	            this.match(SolidityParser.BooleanLiteral);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 832;
	            this.numberLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 833;
	            this.hexLiteral();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 834;
	            this.stringLiteral();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 835;
	            this.identifier();
	            this.state = 838;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	            if(la_===1) {
	                this.state = 836;
	                this.match(SolidityParser.T__32);
	                this.state = 837;
	                this.match(SolidityParser.T__33);

	            }
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 840;
	            this.match(SolidityParser.TypeKeyword);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 841;
	            this.match(SolidityParser.PayableKeyword);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 842;
	            this.tupleExpression();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 843;
	            this.typeNameExpression();
	            this.state = 846;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	            if(la_===1) {
	                this.state = 844;
	                this.match(SolidityParser.T__32);
	                this.state = 845;
	                this.match(SolidityParser.T__33);

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionList() {
	    let localctx = new ExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, SolidityParser.RULE_expressionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 850;
	        this.expression(0);
	        this.state = 855;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SolidityParser.T__15) {
	            this.state = 851;
	            this.match(SolidityParser.T__15);
	            this.state = 852;
	            this.expression(0);
	            this.state = 857;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nameValueList() {
	    let localctx = new NameValueListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, SolidityParser.RULE_nameValueList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 858;
	        this.nameValue();
	        this.state = 863;
	        this._errHandler.sync(this);
	        let _alt = this._interp.adaptivePredict(this._input,92,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 859;
	                this.match(SolidityParser.T__15);
	                this.state = 860;
	                this.nameValue(); 
	            }
	            this.state = 865;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,92,this._ctx);
	        }

	        this.state = 867;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__15) {
	            this.state = 866;
	            this.match(SolidityParser.T__15);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nameValue() {
	    let localctx = new NameValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, SolidityParser.RULE_nameValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 869;
	        this.identifier();
	        this.state = 870;
	        this.match(SolidityParser.T__59);
	        this.state = 871;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionCallArguments() {
	    let localctx = new FunctionCallArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, SolidityParser.RULE_functionCallArguments);
	    var _la = 0; // Token type
	    try {
	        this.state = 881;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__14:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 873;
	            this.match(SolidityParser.T__14);
	            this.state = 875;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SolidityParser.T__13 || _la===SolidityParser.T__40 || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.T__93 - 94)) | (1 << (SolidityParser.LeaveKeyword - 94)) | (1 << (SolidityParser.PayableKeyword - 94)) | (1 << (SolidityParser.ReceiveKeyword - 94)))) !== 0) || _la===SolidityParser.Identifier) {
	                this.state = 874;
	                this.nameValueList();
	            }

	            this.state = 877;
	            this.match(SolidityParser.T__16);
	            break;
	        case SolidityParser.T__4:
	        case SolidityParser.T__13:
	        case SolidityParser.T__22:
	        case SolidityParser.T__23:
	        case SolidityParser.T__32:
	        case SolidityParser.T__34:
	        case SolidityParser.T__40:
	        case SolidityParser.T__52:
	        case SolidityParser.T__53:
	        case SolidityParser.T__54:
	        case SolidityParser.T__55:
	        case SolidityParser.T__56:
	        case SolidityParser.T__57:
	        case SolidityParser.T__58:
	        case SolidityParser.T__60:
	        case SolidityParser.T__61:
	        case SolidityParser.T__62:
	        case SolidityParser.T__63:
	        case SolidityParser.T__64:
	        case SolidityParser.T__93:
	        case SolidityParser.Int:
	        case SolidityParser.Uint:
	        case SolidityParser.Byte:
	        case SolidityParser.Fixed:
	        case SolidityParser.Ufixed:
	        case SolidityParser.BooleanLiteral:
	        case SolidityParser.DecimalNumber:
	        case SolidityParser.HexNumber:
	        case SolidityParser.HexLiteralFragment:
	        case SolidityParser.LeaveKeyword:
	        case SolidityParser.PayableKeyword:
	        case SolidityParser.TypeKeyword:
	        case SolidityParser.ReceiveKeyword:
	        case SolidityParser.Identifier:
	        case SolidityParser.StringLiteralFragment:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 879;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__4) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__22))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__34 - 33)) | (1 << (SolidityParser.T__40 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__58 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (SolidityParser.T__64 - 65)) | (1 << (SolidityParser.T__93 - 65)) | (1 << (SolidityParser.Int - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) !== 0)) {
	                this.state = 878;
	                this.expressionList();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionCall() {
	    let localctx = new FunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, SolidityParser.RULE_functionCall);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 883;
	        this.expression(0);
	        this.state = 884;
	        this.match(SolidityParser.T__22);
	        this.state = 885;
	        this.functionCallArguments();
	        this.state = 886;
	        this.match(SolidityParser.T__23);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyBlock() {
	    let localctx = new AssemblyBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, SolidityParser.RULE_assemblyBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 888;
	        this.match(SolidityParser.T__14);
	        this.state = 892;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__14) | (1 << SolidityParser.T__22) | (1 << SolidityParser.T__25) | (1 << SolidityParser.T__28))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (SolidityParser.T__34 - 35)) | (1 << (SolidityParser.T__40 - 35)) | (1 << (SolidityParser.T__41 - 35)) | (1 << (SolidityParser.T__47 - 35)) | (1 << (SolidityParser.T__49 - 35)) | (1 << (SolidityParser.T__55 - 35)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (SolidityParser.T__86 - 87)) | (1 << (SolidityParser.T__88 - 87)) | (1 << (SolidityParser.T__89 - 87)) | (1 << (SolidityParser.T__93 - 87)) | (1 << (SolidityParser.DecimalNumber - 87)) | (1 << (SolidityParser.HexNumber - 87)) | (1 << (SolidityParser.HexLiteralFragment - 87)) | (1 << (SolidityParser.BreakKeyword - 87)) | (1 << (SolidityParser.ContinueKeyword - 87)) | (1 << (SolidityParser.LeaveKeyword - 87)) | (1 << (SolidityParser.PayableKeyword - 87)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (SolidityParser.ReceiveKeyword - 125)) | (1 << (SolidityParser.Identifier - 125)) | (1 << (SolidityParser.StringLiteralFragment - 125)))) !== 0)) {
	            this.state = 889;
	            this.assemblyItem();
	            this.state = 894;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 895;
	        this.match(SolidityParser.T__16);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyItem() {
	    let localctx = new AssemblyItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, SolidityParser.RULE_assemblyItem);
	    try {
	        this.state = 915;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 897;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 898;
	            this.assemblyBlock();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 899;
	            this.assemblyExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 900;
	            this.assemblyLocalDefinition();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 901;
	            this.assemblyAssignment();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 902;
	            this.assemblyStackAssignment();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 903;
	            this.labelDefinition();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 904;
	            this.assemblySwitch();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 905;
	            this.assemblyFunctionDefinition();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 906;
	            this.assemblyFor();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 907;
	            this.assemblyIf();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 908;
	            this.match(SolidityParser.BreakKeyword);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 909;
	            this.match(SolidityParser.ContinueKeyword);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 910;
	            this.match(SolidityParser.LeaveKeyword);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 911;
	            this.subAssembly();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 912;
	            this.numberLiteral();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 913;
	            this.stringLiteral();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 914;
	            this.hexLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyExpression() {
	    let localctx = new AssemblyExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, SolidityParser.RULE_assemblyExpression);
	    try {
	        this.state = 920;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 917;
	            this.assemblyCall();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 918;
	            this.assemblyLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 919;
	            this.assemblyMember();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyMember() {
	    let localctx = new AssemblyMemberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, SolidityParser.RULE_assemblyMember);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 922;
	        this.identifier();
	        this.state = 923;
	        this.match(SolidityParser.T__35);
	        this.state = 924;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyCall() {
	    let localctx = new AssemblyCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, SolidityParser.RULE_assemblyCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 930;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__49:
	            this.state = 926;
	            this.match(SolidityParser.T__49);
	            break;
	        case SolidityParser.T__34:
	            this.state = 927;
	            this.match(SolidityParser.T__34);
	            break;
	        case SolidityParser.T__55:
	            this.state = 928;
	            this.match(SolidityParser.T__55);
	            break;
	        case SolidityParser.T__13:
	        case SolidityParser.T__40:
	        case SolidityParser.T__93:
	        case SolidityParser.LeaveKeyword:
	        case SolidityParser.PayableKeyword:
	        case SolidityParser.ReceiveKeyword:
	        case SolidityParser.Identifier:
	            this.state = 929;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 944;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	        if(la_===1) {
	            this.state = 932;
	            this.match(SolidityParser.T__22);
	            this.state = 934;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SolidityParser.T__13 || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (SolidityParser.T__34 - 35)) | (1 << (SolidityParser.T__40 - 35)) | (1 << (SolidityParser.T__49 - 35)) | (1 << (SolidityParser.T__55 - 35)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.T__93 - 94)) | (1 << (SolidityParser.DecimalNumber - 94)) | (1 << (SolidityParser.HexNumber - 94)) | (1 << (SolidityParser.HexLiteralFragment - 94)) | (1 << (SolidityParser.LeaveKeyword - 94)) | (1 << (SolidityParser.PayableKeyword - 94)) | (1 << (SolidityParser.ReceiveKeyword - 94)))) !== 0) || _la===SolidityParser.Identifier || _la===SolidityParser.StringLiteralFragment) {
	                this.state = 933;
	                this.assemblyExpression();
	            }

	            this.state = 940;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SolidityParser.T__15) {
	                this.state = 936;
	                this.match(SolidityParser.T__15);
	                this.state = 937;
	                this.assemblyExpression();
	                this.state = 942;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 943;
	            this.match(SolidityParser.T__23);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyLocalDefinition() {
	    let localctx = new AssemblyLocalDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, SolidityParser.RULE_assemblyLocalDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 946;
	        this.match(SolidityParser.T__86);
	        this.state = 947;
	        this.assemblyIdentifierOrList();
	        this.state = 950;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__87) {
	            this.state = 948;
	            this.match(SolidityParser.T__87);
	            this.state = 949;
	            this.assemblyExpression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyAssignment() {
	    let localctx = new AssemblyAssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, SolidityParser.RULE_assemblyAssignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 952;
	        this.assemblyIdentifierOrList();
	        this.state = 953;
	        this.match(SolidityParser.T__87);
	        this.state = 954;
	        this.assemblyExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyIdentifierOrList() {
	    let localctx = new AssemblyIdentifierOrListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, SolidityParser.RULE_assemblyIdentifierOrList);
	    try {
	        this.state = 962;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 956;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 957;
	            this.assemblyMember();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 958;
	            this.match(SolidityParser.T__22);
	            this.state = 959;
	            this.assemblyIdentifierList();
	            this.state = 960;
	            this.match(SolidityParser.T__23);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyIdentifierList() {
	    let localctx = new AssemblyIdentifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, SolidityParser.RULE_assemblyIdentifierList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 964;
	        this.identifier();
	        this.state = 969;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SolidityParser.T__15) {
	            this.state = 965;
	            this.match(SolidityParser.T__15);
	            this.state = 966;
	            this.identifier();
	            this.state = 971;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyStackAssignment() {
	    let localctx = new AssemblyStackAssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, SolidityParser.RULE_assemblyStackAssignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 972;
	        this.match(SolidityParser.T__88);
	        this.state = 973;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelDefinition() {
	    let localctx = new LabelDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, SolidityParser.RULE_labelDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 975;
	        this.identifier();
	        this.state = 976;
	        this.match(SolidityParser.T__59);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblySwitch() {
	    let localctx = new AssemblySwitchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, SolidityParser.RULE_assemblySwitch);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 978;
	        this.match(SolidityParser.T__89);
	        this.state = 979;
	        this.assemblyExpression();
	        this.state = 983;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SolidityParser.T__90 || _la===SolidityParser.T__91) {
	            this.state = 980;
	            this.assemblyCase();
	            this.state = 985;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyCase() {
	    let localctx = new AssemblyCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, SolidityParser.RULE_assemblyCase);
	    try {
	        this.state = 992;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__90:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 986;
	            this.match(SolidityParser.T__90);
	            this.state = 987;
	            this.assemblyLiteral();
	            this.state = 988;
	            this.assemblyBlock();
	            break;
	        case SolidityParser.T__91:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 990;
	            this.match(SolidityParser.T__91);
	            this.state = 991;
	            this.assemblyBlock();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyFunctionDefinition() {
	    let localctx = new AssemblyFunctionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, SolidityParser.RULE_assemblyFunctionDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 994;
	        this.match(SolidityParser.T__28);
	        this.state = 995;
	        this.identifier();
	        this.state = 996;
	        this.match(SolidityParser.T__22);
	        this.state = 998;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__13 || _la===SolidityParser.T__40 || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.T__93 - 94)) | (1 << (SolidityParser.LeaveKeyword - 94)) | (1 << (SolidityParser.PayableKeyword - 94)) | (1 << (SolidityParser.ReceiveKeyword - 94)))) !== 0) || _la===SolidityParser.Identifier) {
	            this.state = 997;
	            this.assemblyIdentifierList();
	        }

	        this.state = 1000;
	        this.match(SolidityParser.T__23);
	        this.state = 1002;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__92) {
	            this.state = 1001;
	            this.assemblyFunctionReturns();
	        }

	        this.state = 1004;
	        this.assemblyBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyFunctionReturns() {
	    let localctx = new AssemblyFunctionReturnsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, SolidityParser.RULE_assemblyFunctionReturns);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1006;
	        this.match(SolidityParser.T__92);
	        this.state = 1007;
	        this.assemblyIdentifierList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyFor() {
	    let localctx = new AssemblyForContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, SolidityParser.RULE_assemblyFor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1009;
	        this.match(SolidityParser.T__25);
	        this.state = 1012;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__14:
	            this.state = 1010;
	            this.assemblyBlock();
	            break;
	        case SolidityParser.T__13:
	        case SolidityParser.T__34:
	        case SolidityParser.T__40:
	        case SolidityParser.T__49:
	        case SolidityParser.T__55:
	        case SolidityParser.T__93:
	        case SolidityParser.DecimalNumber:
	        case SolidityParser.HexNumber:
	        case SolidityParser.HexLiteralFragment:
	        case SolidityParser.LeaveKeyword:
	        case SolidityParser.PayableKeyword:
	        case SolidityParser.ReceiveKeyword:
	        case SolidityParser.Identifier:
	        case SolidityParser.StringLiteralFragment:
	            this.state = 1011;
	            this.assemblyExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1014;
	        this.assemblyExpression();
	        this.state = 1017;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__14:
	            this.state = 1015;
	            this.assemblyBlock();
	            break;
	        case SolidityParser.T__13:
	        case SolidityParser.T__34:
	        case SolidityParser.T__40:
	        case SolidityParser.T__49:
	        case SolidityParser.T__55:
	        case SolidityParser.T__93:
	        case SolidityParser.DecimalNumber:
	        case SolidityParser.HexNumber:
	        case SolidityParser.HexLiteralFragment:
	        case SolidityParser.LeaveKeyword:
	        case SolidityParser.PayableKeyword:
	        case SolidityParser.ReceiveKeyword:
	        case SolidityParser.Identifier:
	        case SolidityParser.StringLiteralFragment:
	            this.state = 1016;
	            this.assemblyExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1019;
	        this.assemblyBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyIf() {
	    let localctx = new AssemblyIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, SolidityParser.RULE_assemblyIf);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1021;
	        this.match(SolidityParser.T__41);
	        this.state = 1022;
	        this.assemblyExpression();
	        this.state = 1023;
	        this.assemblyBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assemblyLiteral() {
	    let localctx = new AssemblyLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, SolidityParser.RULE_assemblyLiteral);
	    try {
	        this.state = 1029;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.StringLiteralFragment:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1025;
	            this.stringLiteral();
	            break;
	        case SolidityParser.DecimalNumber:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1026;
	            this.match(SolidityParser.DecimalNumber);
	            break;
	        case SolidityParser.HexNumber:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1027;
	            this.match(SolidityParser.HexNumber);
	            break;
	        case SolidityParser.HexLiteralFragment:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1028;
	            this.hexLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subAssembly() {
	    let localctx = new SubAssemblyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, SolidityParser.RULE_subAssembly);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1031;
	        this.match(SolidityParser.T__47);
	        this.state = 1032;
	        this.identifier();
	        this.state = 1033;
	        this.assemblyBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tupleExpression() {
	    let localctx = new TupleExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, SolidityParser.RULE_tupleExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 1061;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__22:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1035;
	            this.match(SolidityParser.T__22);

	            this.state = 1037;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__4) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__22))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__34 - 33)) | (1 << (SolidityParser.T__40 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__58 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (SolidityParser.T__64 - 65)) | (1 << (SolidityParser.T__93 - 65)) | (1 << (SolidityParser.Int - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) !== 0)) {
	                this.state = 1036;
	                this.expression(0);
	            }

	            this.state = 1045;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SolidityParser.T__15) {
	                this.state = 1039;
	                this.match(SolidityParser.T__15);
	                this.state = 1041;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__4) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__22))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__34 - 33)) | (1 << (SolidityParser.T__40 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__58 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (SolidityParser.T__64 - 65)) | (1 << (SolidityParser.T__93 - 65)) | (1 << (SolidityParser.Int - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) !== 0)) {
	                    this.state = 1040;
	                    this.expression(0);
	                }

	                this.state = 1047;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1048;
	            this.match(SolidityParser.T__23);
	            break;
	        case SolidityParser.T__32:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1049;
	            this.match(SolidityParser.T__32);
	            this.state = 1058;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__4) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__22))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__34 - 33)) | (1 << (SolidityParser.T__40 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)) | (1 << (SolidityParser.T__58 - 33)) | (1 << (SolidityParser.T__60 - 33)) | (1 << (SolidityParser.T__61 - 33)) | (1 << (SolidityParser.T__62 - 33)) | (1 << (SolidityParser.T__63 - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (SolidityParser.T__64 - 65)) | (1 << (SolidityParser.T__93 - 65)) | (1 << (SolidityParser.Int - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (SolidityParser.Uint - 97)) | (1 << (SolidityParser.Byte - 97)) | (1 << (SolidityParser.Fixed - 97)) | (1 << (SolidityParser.Ufixed - 97)) | (1 << (SolidityParser.BooleanLiteral - 97)) | (1 << (SolidityParser.DecimalNumber - 97)) | (1 << (SolidityParser.HexNumber - 97)) | (1 << (SolidityParser.HexLiteralFragment - 97)) | (1 << (SolidityParser.LeaveKeyword - 97)) | (1 << (SolidityParser.PayableKeyword - 97)) | (1 << (SolidityParser.TypeKeyword - 97)) | (1 << (SolidityParser.ReceiveKeyword - 97)) | (1 << (SolidityParser.Identifier - 97)) | (1 << (SolidityParser.StringLiteralFragment - 97)))) !== 0)) {
	                this.state = 1050;
	                this.expression(0);
	                this.state = 1055;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SolidityParser.T__15) {
	                    this.state = 1051;
	                    this.match(SolidityParser.T__15);
	                    this.state = 1052;
	                    this.expression(0);
	                    this.state = 1057;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1060;
	            this.match(SolidityParser.T__33);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeNameExpression() {
	    let localctx = new TypeNameExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, SolidityParser.RULE_typeNameExpression);
	    try {
	        this.state = 1065;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SolidityParser.T__34:
	        case SolidityParser.T__52:
	        case SolidityParser.T__53:
	        case SolidityParser.T__54:
	        case SolidityParser.T__55:
	        case SolidityParser.Int:
	        case SolidityParser.Uint:
	        case SolidityParser.Byte:
	        case SolidityParser.Fixed:
	        case SolidityParser.Ufixed:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1063;
	            this.elementaryTypeName();
	            break;
	        case SolidityParser.T__13:
	        case SolidityParser.T__40:
	        case SolidityParser.T__93:
	        case SolidityParser.LeaveKeyword:
	        case SolidityParser.PayableKeyword:
	        case SolidityParser.ReceiveKeyword:
	        case SolidityParser.Identifier:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1064;
	            this.userDefinedTypeName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numberLiteral() {
	    let localctx = new NumberLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, SolidityParser.RULE_numberLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1067;
	        _la = this._input.LA(1);
	        if(!(_la===SolidityParser.DecimalNumber || _la===SolidityParser.HexNumber)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1069;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	        if(la_===1) {
	            this.state = 1068;
	            this.match(SolidityParser.NumberUnit);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, SolidityParser.RULE_identifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1071;
	        _la = this._input.LA(1);
	        if(!(_la===SolidityParser.T__13 || _la===SolidityParser.T__40 || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.T__93 - 94)) | (1 << (SolidityParser.LeaveKeyword - 94)) | (1 << (SolidityParser.PayableKeyword - 94)) | (1 << (SolidityParser.ReceiveKeyword - 94)))) !== 0) || _la===SolidityParser.Identifier)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hexLiteral() {
	    let localctx = new HexLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, SolidityParser.RULE_hexLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1074; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1073;
	        		this.match(SolidityParser.HexLiteralFragment);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1076; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,122, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	overrideSpecifier() {
	    let localctx = new OverrideSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, SolidityParser.RULE_overrideSpecifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1078;
	        this.match(SolidityParser.T__94);
	        this.state = 1090;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SolidityParser.T__22) {
	            this.state = 1079;
	            this.match(SolidityParser.T__22);
	            this.state = 1080;
	            this.userDefinedTypeName();
	            this.state = 1085;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SolidityParser.T__15) {
	                this.state = 1081;
	                this.match(SolidityParser.T__15);
	                this.state = 1082;
	                this.userDefinedTypeName();
	                this.state = 1087;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1088;
	            this.match(SolidityParser.T__23);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteral() {
	    let localctx = new StringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, SolidityParser.RULE_stringLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1093; 
	        this._errHandler.sync(this);
	        let _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1092;
	        		this.match(SolidityParser.StringLiteralFragment);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1095; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,125, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

SolidityParser.EOF = antlr4.Token.EOF;
SolidityParser.T__0 = 1;
SolidityParser.T__1 = 2;
SolidityParser.T__2 = 3;
SolidityParser.T__3 = 4;
SolidityParser.T__4 = 5;
SolidityParser.T__5 = 6;
SolidityParser.T__6 = 7;
SolidityParser.T__7 = 8;
SolidityParser.T__8 = 9;
SolidityParser.T__9 = 10;
SolidityParser.T__10 = 11;
SolidityParser.T__11 = 12;
SolidityParser.T__12 = 13;
SolidityParser.T__13 = 14;
SolidityParser.T__14 = 15;
SolidityParser.T__15 = 16;
SolidityParser.T__16 = 17;
SolidityParser.T__17 = 18;
SolidityParser.T__18 = 19;
SolidityParser.T__19 = 20;
SolidityParser.T__20 = 21;
SolidityParser.T__21 = 22;
SolidityParser.T__22 = 23;
SolidityParser.T__23 = 24;
SolidityParser.T__24 = 25;
SolidityParser.T__25 = 26;
SolidityParser.T__26 = 27;
SolidityParser.T__27 = 28;
SolidityParser.T__28 = 29;
SolidityParser.T__29 = 30;
SolidityParser.T__30 = 31;
SolidityParser.T__31 = 32;
SolidityParser.T__32 = 33;
SolidityParser.T__33 = 34;
SolidityParser.T__34 = 35;
SolidityParser.T__35 = 36;
SolidityParser.T__36 = 37;
SolidityParser.T__37 = 38;
SolidityParser.T__38 = 39;
SolidityParser.T__39 = 40;
SolidityParser.T__40 = 41;
SolidityParser.T__41 = 42;
SolidityParser.T__42 = 43;
SolidityParser.T__43 = 44;
SolidityParser.T__44 = 45;
SolidityParser.T__45 = 46;
SolidityParser.T__46 = 47;
SolidityParser.T__47 = 48;
SolidityParser.T__48 = 49;
SolidityParser.T__49 = 50;
SolidityParser.T__50 = 51;
SolidityParser.T__51 = 52;
SolidityParser.T__52 = 53;
SolidityParser.T__53 = 54;
SolidityParser.T__54 = 55;
SolidityParser.T__55 = 56;
SolidityParser.T__56 = 57;
SolidityParser.T__57 = 58;
SolidityParser.T__58 = 59;
SolidityParser.T__59 = 60;
SolidityParser.T__60 = 61;
SolidityParser.T__61 = 62;
SolidityParser.T__62 = 63;
SolidityParser.T__63 = 64;
SolidityParser.T__64 = 65;
SolidityParser.T__65 = 66;
SolidityParser.T__66 = 67;
SolidityParser.T__67 = 68;
SolidityParser.T__68 = 69;
SolidityParser.T__69 = 70;
SolidityParser.T__70 = 71;
SolidityParser.T__71 = 72;
SolidityParser.T__72 = 73;
SolidityParser.T__73 = 74;
SolidityParser.T__74 = 75;
SolidityParser.T__75 = 76;
SolidityParser.T__76 = 77;
SolidityParser.T__77 = 78;
SolidityParser.T__78 = 79;
SolidityParser.T__79 = 80;
SolidityParser.T__80 = 81;
SolidityParser.T__81 = 82;
SolidityParser.T__82 = 83;
SolidityParser.T__83 = 84;
SolidityParser.T__84 = 85;
SolidityParser.T__85 = 86;
SolidityParser.T__86 = 87;
SolidityParser.T__87 = 88;
SolidityParser.T__88 = 89;
SolidityParser.T__89 = 90;
SolidityParser.T__90 = 91;
SolidityParser.T__91 = 92;
SolidityParser.T__92 = 93;
SolidityParser.T__93 = 94;
SolidityParser.T__94 = 95;
SolidityParser.Int = 96;
SolidityParser.Uint = 97;
SolidityParser.Byte = 98;
SolidityParser.Fixed = 99;
SolidityParser.Ufixed = 100;
SolidityParser.BooleanLiteral = 101;
SolidityParser.DecimalNumber = 102;
SolidityParser.HexNumber = 103;
SolidityParser.NumberUnit = 104;
SolidityParser.HexLiteralFragment = 105;
SolidityParser.ReservedKeyword = 106;
SolidityParser.AnonymousKeyword = 107;
SolidityParser.BreakKeyword = 108;
SolidityParser.ConstantKeyword = 109;
SolidityParser.ImmutableKeyword = 110;
SolidityParser.ContinueKeyword = 111;
SolidityParser.LeaveKeyword = 112;
SolidityParser.ExternalKeyword = 113;
SolidityParser.IndexedKeyword = 114;
SolidityParser.InternalKeyword = 115;
SolidityParser.PayableKeyword = 116;
SolidityParser.PrivateKeyword = 117;
SolidityParser.PublicKeyword = 118;
SolidityParser.VirtualKeyword = 119;
SolidityParser.PureKeyword = 120;
SolidityParser.TypeKeyword = 121;
SolidityParser.ViewKeyword = 122;
SolidityParser.ConstructorKeyword = 123;
SolidityParser.FallbackKeyword = 124;
SolidityParser.ReceiveKeyword = 125;
SolidityParser.Identifier = 126;
SolidityParser.StringLiteralFragment = 127;
SolidityParser.VersionLiteral = 128;
SolidityParser.WS = 129;
SolidityParser.COMMENT = 130;
SolidityParser.LINE_COMMENT = 131;

SolidityParser.RULE_sourceUnit = 0;
SolidityParser.RULE_pragmaDirective = 1;
SolidityParser.RULE_pragmaName = 2;
SolidityParser.RULE_pragmaValue = 3;
SolidityParser.RULE_version = 4;
SolidityParser.RULE_versionOperator = 5;
SolidityParser.RULE_versionConstraint = 6;
SolidityParser.RULE_importDeclaration = 7;
SolidityParser.RULE_importDirective = 8;
SolidityParser.RULE_contractDefinition = 9;
SolidityParser.RULE_inheritanceSpecifier = 10;
SolidityParser.RULE_contractPart = 11;
SolidityParser.RULE_stateVariableDeclaration = 12;
SolidityParser.RULE_fileLevelConstant = 13;
SolidityParser.RULE_usingForDeclaration = 14;
SolidityParser.RULE_structDefinition = 15;
SolidityParser.RULE_modifierDefinition = 16;
SolidityParser.RULE_modifierInvocation = 17;
SolidityParser.RULE_functionDefinition = 18;
SolidityParser.RULE_functionDescriptor = 19;
SolidityParser.RULE_returnParameters = 20;
SolidityParser.RULE_modifierList = 21;
SolidityParser.RULE_eventDefinition = 22;
SolidityParser.RULE_enumValue = 23;
SolidityParser.RULE_enumDefinition = 24;
SolidityParser.RULE_parameterList = 25;
SolidityParser.RULE_parameter = 26;
SolidityParser.RULE_eventParameterList = 27;
SolidityParser.RULE_eventParameter = 28;
SolidityParser.RULE_functionTypeParameterList = 29;
SolidityParser.RULE_functionTypeParameter = 30;
SolidityParser.RULE_variableDeclaration = 31;
SolidityParser.RULE_typeName = 32;
SolidityParser.RULE_userDefinedTypeName = 33;
SolidityParser.RULE_mappingKey = 34;
SolidityParser.RULE_mapping = 35;
SolidityParser.RULE_functionTypeName = 36;
SolidityParser.RULE_storageLocation = 37;
SolidityParser.RULE_stateMutability = 38;
SolidityParser.RULE_block = 39;
SolidityParser.RULE_statement = 40;
SolidityParser.RULE_expressionStatement = 41;
SolidityParser.RULE_ifStatement = 42;
SolidityParser.RULE_tryStatement = 43;
SolidityParser.RULE_catchClause = 44;
SolidityParser.RULE_whileStatement = 45;
SolidityParser.RULE_simpleStatement = 46;
SolidityParser.RULE_uncheckedStatement = 47;
SolidityParser.RULE_forStatement = 48;
SolidityParser.RULE_inlineAssemblyStatement = 49;
SolidityParser.RULE_doWhileStatement = 50;
SolidityParser.RULE_continueStatement = 51;
SolidityParser.RULE_breakStatement = 52;
SolidityParser.RULE_returnStatement = 53;
SolidityParser.RULE_throwStatement = 54;
SolidityParser.RULE_emitStatement = 55;
SolidityParser.RULE_variableDeclarationStatement = 56;
SolidityParser.RULE_variableDeclarationList = 57;
SolidityParser.RULE_identifierList = 58;
SolidityParser.RULE_elementaryTypeName = 59;
SolidityParser.RULE_expression = 60;
SolidityParser.RULE_primaryExpression = 61;
SolidityParser.RULE_expressionList = 62;
SolidityParser.RULE_nameValueList = 63;
SolidityParser.RULE_nameValue = 64;
SolidityParser.RULE_functionCallArguments = 65;
SolidityParser.RULE_functionCall = 66;
SolidityParser.RULE_assemblyBlock = 67;
SolidityParser.RULE_assemblyItem = 68;
SolidityParser.RULE_assemblyExpression = 69;
SolidityParser.RULE_assemblyMember = 70;
SolidityParser.RULE_assemblyCall = 71;
SolidityParser.RULE_assemblyLocalDefinition = 72;
SolidityParser.RULE_assemblyAssignment = 73;
SolidityParser.RULE_assemblyIdentifierOrList = 74;
SolidityParser.RULE_assemblyIdentifierList = 75;
SolidityParser.RULE_assemblyStackAssignment = 76;
SolidityParser.RULE_labelDefinition = 77;
SolidityParser.RULE_assemblySwitch = 78;
SolidityParser.RULE_assemblyCase = 79;
SolidityParser.RULE_assemblyFunctionDefinition = 80;
SolidityParser.RULE_assemblyFunctionReturns = 81;
SolidityParser.RULE_assemblyFor = 82;
SolidityParser.RULE_assemblyIf = 83;
SolidityParser.RULE_assemblyLiteral = 84;
SolidityParser.RULE_subAssembly = 85;
SolidityParser.RULE_tupleExpression = 86;
SolidityParser.RULE_typeNameExpression = 87;
SolidityParser.RULE_numberLiteral = 88;
SolidityParser.RULE_identifier = 89;
SolidityParser.RULE_hexLiteral = 90;
SolidityParser.RULE_overrideSpecifier = 91;
SolidityParser.RULE_stringLiteral = 92;

class SourceUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_sourceUnit;
    }

	EOF() {
	    return this.getToken(SolidityParser.EOF, 0);
	};

	pragmaDirective = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PragmaDirectiveContext);
	    } else {
	        return this.getTypedRuleContext(PragmaDirectiveContext,i);
	    }
	};

	importDirective = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportDirectiveContext);
	    } else {
	        return this.getTypedRuleContext(ImportDirectiveContext,i);
	    }
	};

	contractDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ContractDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(ContractDefinitionContext,i);
	    }
	};

	enumDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(EnumDefinitionContext,i);
	    }
	};

	structDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StructDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(StructDefinitionContext,i);
	    }
	};

	functionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(FunctionDefinitionContext,i);
	    }
	};

	fileLevelConstant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FileLevelConstantContext);
	    } else {
	        return this.getTypedRuleContext(FileLevelConstantContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterSourceUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitSourceUnit(this);
		}
	}


}



class PragmaDirectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_pragmaDirective;
    }

	pragmaName() {
	    return this.getTypedRuleContext(PragmaNameContext,0);
	};

	pragmaValue() {
	    return this.getTypedRuleContext(PragmaValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterPragmaDirective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitPragmaDirective(this);
		}
	}


}



class PragmaNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_pragmaName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterPragmaName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitPragmaName(this);
		}
	}


}



class PragmaValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_pragmaValue;
    }

	version() {
	    return this.getTypedRuleContext(VersionContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterPragmaValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitPragmaValue(this);
		}
	}


}



class VersionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_version;
    }

	versionConstraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VersionConstraintContext);
	    } else {
	        return this.getTypedRuleContext(VersionConstraintContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterVersion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitVersion(this);
		}
	}


}



class VersionOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_versionOperator;
    }


	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterVersionOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitVersionOperator(this);
		}
	}


}



class VersionConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_versionConstraint;
    }

	VersionLiteral() {
	    return this.getToken(SolidityParser.VersionLiteral, 0);
	};

	versionOperator() {
	    return this.getTypedRuleContext(VersionOperatorContext,0);
	};

	DecimalNumber() {
	    return this.getToken(SolidityParser.DecimalNumber, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterVersionConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitVersionConstraint(this);
		}
	}


}



class ImportDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_importDeclaration;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterImportDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitImportDeclaration(this);
		}
	}


}



class ImportDirectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_importDirective;
    }

	StringLiteralFragment() {
	    return this.getToken(SolidityParser.StringLiteralFragment, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	importDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ImportDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterImportDirective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitImportDirective(this);
		}
	}


}



class ContractDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_contractDefinition;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	inheritanceSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InheritanceSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(InheritanceSpecifierContext,i);
	    }
	};

	contractPart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ContractPartContext);
	    } else {
	        return this.getTypedRuleContext(ContractPartContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterContractDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitContractDefinition(this);
		}
	}


}



class InheritanceSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_inheritanceSpecifier;
    }

	userDefinedTypeName() {
	    return this.getTypedRuleContext(UserDefinedTypeNameContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterInheritanceSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitInheritanceSpecifier(this);
		}
	}


}



class ContractPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_contractPart;
    }

	stateVariableDeclaration() {
	    return this.getTypedRuleContext(StateVariableDeclarationContext,0);
	};

	usingForDeclaration() {
	    return this.getTypedRuleContext(UsingForDeclarationContext,0);
	};

	structDefinition() {
	    return this.getTypedRuleContext(StructDefinitionContext,0);
	};

	modifierDefinition() {
	    return this.getTypedRuleContext(ModifierDefinitionContext,0);
	};

	functionDefinition() {
	    return this.getTypedRuleContext(FunctionDefinitionContext,0);
	};

	eventDefinition() {
	    return this.getTypedRuleContext(EventDefinitionContext,0);
	};

	enumDefinition() {
	    return this.getTypedRuleContext(EnumDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterContractPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitContractPart(this);
		}
	}


}



class StateVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_stateVariableDeclaration;
    }

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	PublicKeyword = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.PublicKeyword);
	    } else {
	        return this.getToken(SolidityParser.PublicKeyword, i);
	    }
	};


	InternalKeyword = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.InternalKeyword);
	    } else {
	        return this.getToken(SolidityParser.InternalKeyword, i);
	    }
	};


	PrivateKeyword = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.PrivateKeyword);
	    } else {
	        return this.getToken(SolidityParser.PrivateKeyword, i);
	    }
	};


	ConstantKeyword = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.ConstantKeyword);
	    } else {
	        return this.getToken(SolidityParser.ConstantKeyword, i);
	    }
	};


	ImmutableKeyword = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.ImmutableKeyword);
	    } else {
	        return this.getToken(SolidityParser.ImmutableKeyword, i);
	    }
	};


	overrideSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OverrideSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(OverrideSpecifierContext,i);
	    }
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterStateVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitStateVariableDeclaration(this);
		}
	}


}



class FileLevelConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_fileLevelConstant;
    }

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	ConstantKeyword() {
	    return this.getToken(SolidityParser.ConstantKeyword, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterFileLevelConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitFileLevelConstant(this);
		}
	}


}



class UsingForDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_usingForDeclaration;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterUsingForDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitUsingForDeclaration(this);
		}
	}


}



class StructDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_structDefinition;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	variableDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterStructDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitStructDefinition(this);
		}
	}


}



class ModifierDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_modifierDefinition;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	parameterList() {
	    return this.getTypedRuleContext(ParameterListContext,0);
	};

	VirtualKeyword = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.VirtualKeyword);
	    } else {
	        return this.getToken(SolidityParser.VirtualKeyword, i);
	    }
	};


	overrideSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OverrideSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(OverrideSpecifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterModifierDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitModifierDefinition(this);
		}
	}


}



class ModifierInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_modifierInvocation;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterModifierInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitModifierInvocation(this);
		}
	}


}



class FunctionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_functionDefinition;
    }

	functionDescriptor() {
	    return this.getTypedRuleContext(FunctionDescriptorContext,0);
	};

	parameterList() {
	    return this.getTypedRuleContext(ParameterListContext,0);
	};

	modifierList() {
	    return this.getTypedRuleContext(ModifierListContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	returnParameters() {
	    return this.getTypedRuleContext(ReturnParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterFunctionDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitFunctionDefinition(this);
		}
	}


}



class FunctionDescriptorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_functionDescriptor;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ConstructorKeyword() {
	    return this.getToken(SolidityParser.ConstructorKeyword, 0);
	};

	FallbackKeyword() {
	    return this.getToken(SolidityParser.FallbackKeyword, 0);
	};

	ReceiveKeyword() {
	    return this.getToken(SolidityParser.ReceiveKeyword, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterFunctionDescriptor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitFunctionDescriptor(this);
		}
	}


}



class ReturnParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_returnParameters;
    }

	parameterList() {
	    return this.getTypedRuleContext(ParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterReturnParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitReturnParameters(this);
		}
	}


}



class ModifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_modifierList;
    }

	ExternalKeyword = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.ExternalKeyword);
	    } else {
	        return this.getToken(SolidityParser.ExternalKeyword, i);
	    }
	};


	PublicKeyword = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.PublicKeyword);
	    } else {
	        return this.getToken(SolidityParser.PublicKeyword, i);
	    }
	};


	InternalKeyword = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.InternalKeyword);
	    } else {
	        return this.getToken(SolidityParser.InternalKeyword, i);
	    }
	};


	PrivateKeyword = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.PrivateKeyword);
	    } else {
	        return this.getToken(SolidityParser.PrivateKeyword, i);
	    }
	};


	VirtualKeyword = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.VirtualKeyword);
	    } else {
	        return this.getToken(SolidityParser.VirtualKeyword, i);
	    }
	};


	stateMutability = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StateMutabilityContext);
	    } else {
	        return this.getTypedRuleContext(StateMutabilityContext,i);
	    }
	};

	modifierInvocation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModifierInvocationContext);
	    } else {
	        return this.getTypedRuleContext(ModifierInvocationContext,i);
	    }
	};

	overrideSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OverrideSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(OverrideSpecifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterModifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitModifierList(this);
		}
	}


}



class EventDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_eventDefinition;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	eventParameterList() {
	    return this.getTypedRuleContext(EventParameterListContext,0);
	};

	AnonymousKeyword() {
	    return this.getToken(SolidityParser.AnonymousKeyword, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterEventDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitEventDefinition(this);
		}
	}


}



class EnumValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_enumValue;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterEnumValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitEnumValue(this);
		}
	}


}



class EnumDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_enumDefinition;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enumValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumValueContext);
	    } else {
	        return this.getTypedRuleContext(EnumValueContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterEnumDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitEnumDefinition(this);
		}
	}


}



class ParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_parameterList;
    }

	parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterContext);
	    } else {
	        return this.getTypedRuleContext(ParameterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitParameterList(this);
		}
	}


}



class ParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_parameter;
    }

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	storageLocation() {
	    return this.getTypedRuleContext(StorageLocationContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitParameter(this);
		}
	}


}



class EventParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_eventParameterList;
    }

	eventParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EventParameterContext);
	    } else {
	        return this.getTypedRuleContext(EventParameterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterEventParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitEventParameterList(this);
		}
	}


}



class EventParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_eventParameter;
    }

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	IndexedKeyword() {
	    return this.getToken(SolidityParser.IndexedKeyword, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterEventParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitEventParameter(this);
		}
	}


}



class FunctionTypeParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_functionTypeParameterList;
    }

	functionTypeParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionTypeParameterContext);
	    } else {
	        return this.getTypedRuleContext(FunctionTypeParameterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterFunctionTypeParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitFunctionTypeParameterList(this);
		}
	}


}



class FunctionTypeParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_functionTypeParameter;
    }

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	storageLocation() {
	    return this.getTypedRuleContext(StorageLocationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterFunctionTypeParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitFunctionTypeParameter(this);
		}
	}


}



class VariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_variableDeclaration;
    }

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	storageLocation() {
	    return this.getTypedRuleContext(StorageLocationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitVariableDeclaration(this);
		}
	}


}



class TypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_typeName;
    }

	elementaryTypeName() {
	    return this.getTypedRuleContext(ElementaryTypeNameContext,0);
	};

	userDefinedTypeName() {
	    return this.getTypedRuleContext(UserDefinedTypeNameContext,0);
	};

	mapping() {
	    return this.getTypedRuleContext(MappingContext,0);
	};

	functionTypeName() {
	    return this.getTypedRuleContext(FunctionTypeNameContext,0);
	};

	PayableKeyword() {
	    return this.getToken(SolidityParser.PayableKeyword, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitTypeName(this);
		}
	}


}



class UserDefinedTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_userDefinedTypeName;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterUserDefinedTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitUserDefinedTypeName(this);
		}
	}


}



class MappingKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_mappingKey;
    }

	elementaryTypeName() {
	    return this.getTypedRuleContext(ElementaryTypeNameContext,0);
	};

	userDefinedTypeName() {
	    return this.getTypedRuleContext(UserDefinedTypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterMappingKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitMappingKey(this);
		}
	}


}



class MappingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_mapping;
    }

	mappingKey() {
	    return this.getTypedRuleContext(MappingKeyContext,0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterMapping(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitMapping(this);
		}
	}


}



class FunctionTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_functionTypeName;
    }

	functionTypeParameterList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionTypeParameterListContext);
	    } else {
	        return this.getTypedRuleContext(FunctionTypeParameterListContext,i);
	    }
	};

	InternalKeyword = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.InternalKeyword);
	    } else {
	        return this.getToken(SolidityParser.InternalKeyword, i);
	    }
	};


	ExternalKeyword = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.ExternalKeyword);
	    } else {
	        return this.getToken(SolidityParser.ExternalKeyword, i);
	    }
	};


	stateMutability = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StateMutabilityContext);
	    } else {
	        return this.getTypedRuleContext(StateMutabilityContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterFunctionTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitFunctionTypeName(this);
		}
	}


}



class StorageLocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_storageLocation;
    }


	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterStorageLocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitStorageLocation(this);
		}
	}


}



class StateMutabilityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_stateMutability;
    }

	PureKeyword() {
	    return this.getToken(SolidityParser.PureKeyword, 0);
	};

	ConstantKeyword() {
	    return this.getToken(SolidityParser.ConstantKeyword, 0);
	};

	ViewKeyword() {
	    return this.getToken(SolidityParser.ViewKeyword, 0);
	};

	PayableKeyword() {
	    return this.getToken(SolidityParser.PayableKeyword, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterStateMutability(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitStateMutability(this);
		}
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_block;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitBlock(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_statement;
    }

	ifStatement() {
	    return this.getTypedRuleContext(IfStatementContext,0);
	};

	tryStatement() {
	    return this.getTypedRuleContext(TryStatementContext,0);
	};

	whileStatement() {
	    return this.getTypedRuleContext(WhileStatementContext,0);
	};

	forStatement() {
	    return this.getTypedRuleContext(ForStatementContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	inlineAssemblyStatement() {
	    return this.getTypedRuleContext(InlineAssemblyStatementContext,0);
	};

	doWhileStatement() {
	    return this.getTypedRuleContext(DoWhileStatementContext,0);
	};

	continueStatement() {
	    return this.getTypedRuleContext(ContinueStatementContext,0);
	};

	breakStatement() {
	    return this.getTypedRuleContext(BreakStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	throwStatement() {
	    return this.getTypedRuleContext(ThrowStatementContext,0);
	};

	emitStatement() {
	    return this.getTypedRuleContext(EmitStatementContext,0);
	};

	simpleStatement() {
	    return this.getTypedRuleContext(SimpleStatementContext,0);
	};

	uncheckedStatement() {
	    return this.getTypedRuleContext(UncheckedStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitStatement(this);
		}
	}


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_expressionStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterExpressionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitExpressionStatement(this);
		}
	}


}



class IfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_ifStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitIfStatement(this);
		}
	}


}



class TryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_tryStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	returnParameters() {
	    return this.getTypedRuleContext(ReturnParametersContext,0);
	};

	catchClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CatchClauseContext);
	    } else {
	        return this.getTypedRuleContext(CatchClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterTryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitTryStatement(this);
		}
	}


}



class CatchClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_catchClause;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	parameterList() {
	    return this.getTypedRuleContext(ParameterListContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterCatchClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitCatchClause(this);
		}
	}


}



class WhileStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_whileStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitWhileStatement(this);
		}
	}


}



class SimpleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_simpleStatement;
    }

	variableDeclarationStatement() {
	    return this.getTypedRuleContext(VariableDeclarationStatementContext,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterSimpleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitSimpleStatement(this);
		}
	}


}



class UncheckedStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_uncheckedStatement;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterUncheckedStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitUncheckedStatement(this);
		}
	}


}



class ForStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_forStatement;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	simpleStatement() {
	    return this.getTypedRuleContext(SimpleStatementContext,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitForStatement(this);
		}
	}


}



class InlineAssemblyStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_inlineAssemblyStatement;
    }

	assemblyBlock() {
	    return this.getTypedRuleContext(AssemblyBlockContext,0);
	};

	StringLiteralFragment() {
	    return this.getToken(SolidityParser.StringLiteralFragment, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterInlineAssemblyStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitInlineAssemblyStatement(this);
		}
	}


}



class DoWhileStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_doWhileStatement;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterDoWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitDoWhileStatement(this);
		}
	}


}



class ContinueStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_continueStatement;
    }

	ContinueKeyword() {
	    return this.getToken(SolidityParser.ContinueKeyword, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterContinueStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitContinueStatement(this);
		}
	}


}



class BreakStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_breakStatement;
    }

	BreakKeyword() {
	    return this.getToken(SolidityParser.BreakKeyword, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterBreakStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitBreakStatement(this);
		}
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_returnStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitReturnStatement(this);
		}
	}


}



class ThrowStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_throwStatement;
    }


	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterThrowStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitThrowStatement(this);
		}
	}


}



class EmitStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_emitStatement;
    }

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterEmitStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitEmitStatement(this);
		}
	}


}



class VariableDeclarationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_variableDeclarationStatement;
    }

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	variableDeclaration() {
	    return this.getTypedRuleContext(VariableDeclarationContext,0);
	};

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterVariableDeclarationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitVariableDeclarationStatement(this);
		}
	}


}



class VariableDeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_variableDeclarationList;
    }

	variableDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterVariableDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitVariableDeclarationList(this);
		}
	}


}



class IdentifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_identifierList;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterIdentifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitIdentifierList(this);
		}
	}


}



class ElementaryTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_elementaryTypeName;
    }

	Int() {
	    return this.getToken(SolidityParser.Int, 0);
	};

	Uint() {
	    return this.getToken(SolidityParser.Uint, 0);
	};

	Byte() {
	    return this.getToken(SolidityParser.Byte, 0);
	};

	Fixed() {
	    return this.getToken(SolidityParser.Fixed, 0);
	};

	Ufixed() {
	    return this.getToken(SolidityParser.Ufixed, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterElementaryTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitElementaryTypeName(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_expression;
    }

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	nameValueList() {
	    return this.getTypedRuleContext(NameValueListContext,0);
	};

	functionCallArguments() {
	    return this.getTypedRuleContext(FunctionCallArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitExpression(this);
		}
	}


}



class PrimaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_primaryExpression;
    }

	BooleanLiteral() {
	    return this.getToken(SolidityParser.BooleanLiteral, 0);
	};

	numberLiteral() {
	    return this.getTypedRuleContext(NumberLiteralContext,0);
	};

	hexLiteral() {
	    return this.getTypedRuleContext(HexLiteralContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	TypeKeyword() {
	    return this.getToken(SolidityParser.TypeKeyword, 0);
	};

	PayableKeyword() {
	    return this.getToken(SolidityParser.PayableKeyword, 0);
	};

	tupleExpression() {
	    return this.getTypedRuleContext(TupleExpressionContext,0);
	};

	typeNameExpression() {
	    return this.getTypedRuleContext(TypeNameExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterPrimaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitPrimaryExpression(this);
		}
	}


}



class ExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_expressionList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitExpressionList(this);
		}
	}


}



class NameValueListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_nameValueList;
    }

	nameValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameValueContext);
	    } else {
	        return this.getTypedRuleContext(NameValueContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterNameValueList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitNameValueList(this);
		}
	}


}



class NameValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_nameValue;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterNameValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitNameValue(this);
		}
	}


}



class FunctionCallArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_functionCallArguments;
    }

	nameValueList() {
	    return this.getTypedRuleContext(NameValueListContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterFunctionCallArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitFunctionCallArguments(this);
		}
	}


}



class FunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_functionCall;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	functionCallArguments() {
	    return this.getTypedRuleContext(FunctionCallArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitFunctionCall(this);
		}
	}


}



class AssemblyBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyBlock;
    }

	assemblyItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssemblyItemContext);
	    } else {
	        return this.getTypedRuleContext(AssemblyItemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyBlock(this);
		}
	}


}



class AssemblyItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyItem;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	assemblyBlock() {
	    return this.getTypedRuleContext(AssemblyBlockContext,0);
	};

	assemblyExpression() {
	    return this.getTypedRuleContext(AssemblyExpressionContext,0);
	};

	assemblyLocalDefinition() {
	    return this.getTypedRuleContext(AssemblyLocalDefinitionContext,0);
	};

	assemblyAssignment() {
	    return this.getTypedRuleContext(AssemblyAssignmentContext,0);
	};

	assemblyStackAssignment() {
	    return this.getTypedRuleContext(AssemblyStackAssignmentContext,0);
	};

	labelDefinition() {
	    return this.getTypedRuleContext(LabelDefinitionContext,0);
	};

	assemblySwitch() {
	    return this.getTypedRuleContext(AssemblySwitchContext,0);
	};

	assemblyFunctionDefinition() {
	    return this.getTypedRuleContext(AssemblyFunctionDefinitionContext,0);
	};

	assemblyFor() {
	    return this.getTypedRuleContext(AssemblyForContext,0);
	};

	assemblyIf() {
	    return this.getTypedRuleContext(AssemblyIfContext,0);
	};

	BreakKeyword() {
	    return this.getToken(SolidityParser.BreakKeyword, 0);
	};

	ContinueKeyword() {
	    return this.getToken(SolidityParser.ContinueKeyword, 0);
	};

	LeaveKeyword() {
	    return this.getToken(SolidityParser.LeaveKeyword, 0);
	};

	subAssembly() {
	    return this.getTypedRuleContext(SubAssemblyContext,0);
	};

	numberLiteral() {
	    return this.getTypedRuleContext(NumberLiteralContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	hexLiteral() {
	    return this.getTypedRuleContext(HexLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyItem(this);
		}
	}


}



class AssemblyExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyExpression;
    }

	assemblyCall() {
	    return this.getTypedRuleContext(AssemblyCallContext,0);
	};

	assemblyLiteral() {
	    return this.getTypedRuleContext(AssemblyLiteralContext,0);
	};

	assemblyMember() {
	    return this.getTypedRuleContext(AssemblyMemberContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyExpression(this);
		}
	}


}



class AssemblyMemberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyMember;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyMember(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyMember(this);
		}
	}


}



class AssemblyCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyCall;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	assemblyExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssemblyExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AssemblyExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyCall(this);
		}
	}


}



class AssemblyLocalDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyLocalDefinition;
    }

	assemblyIdentifierOrList() {
	    return this.getTypedRuleContext(AssemblyIdentifierOrListContext,0);
	};

	assemblyExpression() {
	    return this.getTypedRuleContext(AssemblyExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyLocalDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyLocalDefinition(this);
		}
	}


}



class AssemblyAssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyAssignment;
    }

	assemblyIdentifierOrList() {
	    return this.getTypedRuleContext(AssemblyIdentifierOrListContext,0);
	};

	assemblyExpression() {
	    return this.getTypedRuleContext(AssemblyExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyAssignment(this);
		}
	}


}



class AssemblyIdentifierOrListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyIdentifierOrList;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	assemblyMember() {
	    return this.getTypedRuleContext(AssemblyMemberContext,0);
	};

	assemblyIdentifierList() {
	    return this.getTypedRuleContext(AssemblyIdentifierListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyIdentifierOrList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyIdentifierOrList(this);
		}
	}


}



class AssemblyIdentifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyIdentifierList;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyIdentifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyIdentifierList(this);
		}
	}


}



class AssemblyStackAssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyStackAssignment;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyStackAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyStackAssignment(this);
		}
	}


}



class LabelDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_labelDefinition;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterLabelDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitLabelDefinition(this);
		}
	}


}



class AssemblySwitchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblySwitch;
    }

	assemblyExpression() {
	    return this.getTypedRuleContext(AssemblyExpressionContext,0);
	};

	assemblyCase = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssemblyCaseContext);
	    } else {
	        return this.getTypedRuleContext(AssemblyCaseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblySwitch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblySwitch(this);
		}
	}


}



class AssemblyCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyCase;
    }

	assemblyLiteral() {
	    return this.getTypedRuleContext(AssemblyLiteralContext,0);
	};

	assemblyBlock() {
	    return this.getTypedRuleContext(AssemblyBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyCase(this);
		}
	}


}



class AssemblyFunctionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyFunctionDefinition;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	assemblyBlock() {
	    return this.getTypedRuleContext(AssemblyBlockContext,0);
	};

	assemblyIdentifierList() {
	    return this.getTypedRuleContext(AssemblyIdentifierListContext,0);
	};

	assemblyFunctionReturns() {
	    return this.getTypedRuleContext(AssemblyFunctionReturnsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyFunctionDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyFunctionDefinition(this);
		}
	}


}



class AssemblyFunctionReturnsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyFunctionReturns;
    }

	assemblyIdentifierList() {
	    return this.getTypedRuleContext(AssemblyIdentifierListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyFunctionReturns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyFunctionReturns(this);
		}
	}


}



class AssemblyForContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyFor;
    }

	assemblyExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssemblyExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AssemblyExpressionContext,i);
	    }
	};

	assemblyBlock = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssemblyBlockContext);
	    } else {
	        return this.getTypedRuleContext(AssemblyBlockContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyFor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyFor(this);
		}
	}


}



class AssemblyIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyIf;
    }

	assemblyExpression() {
	    return this.getTypedRuleContext(AssemblyExpressionContext,0);
	};

	assemblyBlock() {
	    return this.getTypedRuleContext(AssemblyBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyIf(this);
		}
	}


}



class AssemblyLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_assemblyLiteral;
    }

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	DecimalNumber() {
	    return this.getToken(SolidityParser.DecimalNumber, 0);
	};

	HexNumber() {
	    return this.getToken(SolidityParser.HexNumber, 0);
	};

	hexLiteral() {
	    return this.getTypedRuleContext(HexLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterAssemblyLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitAssemblyLiteral(this);
		}
	}


}



class SubAssemblyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_subAssembly;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	assemblyBlock() {
	    return this.getTypedRuleContext(AssemblyBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterSubAssembly(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitSubAssembly(this);
		}
	}


}



class TupleExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_tupleExpression;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterTupleExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitTupleExpression(this);
		}
	}


}



class TypeNameExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_typeNameExpression;
    }

	elementaryTypeName() {
	    return this.getTypedRuleContext(ElementaryTypeNameContext,0);
	};

	userDefinedTypeName() {
	    return this.getTypedRuleContext(UserDefinedTypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterTypeNameExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitTypeNameExpression(this);
		}
	}


}



class NumberLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_numberLiteral;
    }

	DecimalNumber() {
	    return this.getToken(SolidityParser.DecimalNumber, 0);
	};

	HexNumber() {
	    return this.getToken(SolidityParser.HexNumber, 0);
	};

	NumberUnit() {
	    return this.getToken(SolidityParser.NumberUnit, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterNumberLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitNumberLiteral(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_identifier;
    }

	ReceiveKeyword() {
	    return this.getToken(SolidityParser.ReceiveKeyword, 0);
	};

	PayableKeyword() {
	    return this.getToken(SolidityParser.PayableKeyword, 0);
	};

	LeaveKeyword() {
	    return this.getToken(SolidityParser.LeaveKeyword, 0);
	};

	Identifier() {
	    return this.getToken(SolidityParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class HexLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_hexLiteral;
    }

	HexLiteralFragment = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.HexLiteralFragment);
	    } else {
	        return this.getToken(SolidityParser.HexLiteralFragment, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterHexLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitHexLiteral(this);
		}
	}


}



class OverrideSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_overrideSpecifier;
    }

	userDefinedTypeName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserDefinedTypeNameContext);
	    } else {
	        return this.getTypedRuleContext(UserDefinedTypeNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterOverrideSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitOverrideSpecifier(this);
		}
	}


}



class StringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SolidityParser.RULE_stringLiteral;
    }

	StringLiteralFragment = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SolidityParser.StringLiteralFragment);
	    } else {
	        return this.getToken(SolidityParser.StringLiteralFragment, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.enterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SolidityListener ) {
	        listener.exitStringLiteral(this);
		}
	}


}




SolidityParser.SourceUnitContext = SourceUnitContext; 
SolidityParser.PragmaDirectiveContext = PragmaDirectiveContext; 
SolidityParser.PragmaNameContext = PragmaNameContext; 
SolidityParser.PragmaValueContext = PragmaValueContext; 
SolidityParser.VersionContext = VersionContext; 
SolidityParser.VersionOperatorContext = VersionOperatorContext; 
SolidityParser.VersionConstraintContext = VersionConstraintContext; 
SolidityParser.ImportDeclarationContext = ImportDeclarationContext; 
SolidityParser.ImportDirectiveContext = ImportDirectiveContext; 
SolidityParser.ContractDefinitionContext = ContractDefinitionContext; 
SolidityParser.InheritanceSpecifierContext = InheritanceSpecifierContext; 
SolidityParser.ContractPartContext = ContractPartContext; 
SolidityParser.StateVariableDeclarationContext = StateVariableDeclarationContext; 
SolidityParser.FileLevelConstantContext = FileLevelConstantContext; 
SolidityParser.UsingForDeclarationContext = UsingForDeclarationContext; 
SolidityParser.StructDefinitionContext = StructDefinitionContext; 
SolidityParser.ModifierDefinitionContext = ModifierDefinitionContext; 
SolidityParser.ModifierInvocationContext = ModifierInvocationContext; 
SolidityParser.FunctionDefinitionContext = FunctionDefinitionContext; 
SolidityParser.FunctionDescriptorContext = FunctionDescriptorContext; 
SolidityParser.ReturnParametersContext = ReturnParametersContext; 
SolidityParser.ModifierListContext = ModifierListContext; 
SolidityParser.EventDefinitionContext = EventDefinitionContext; 
SolidityParser.EnumValueContext = EnumValueContext; 
SolidityParser.EnumDefinitionContext = EnumDefinitionContext; 
SolidityParser.ParameterListContext = ParameterListContext; 
SolidityParser.ParameterContext = ParameterContext; 
SolidityParser.EventParameterListContext = EventParameterListContext; 
SolidityParser.EventParameterContext = EventParameterContext; 
SolidityParser.FunctionTypeParameterListContext = FunctionTypeParameterListContext; 
SolidityParser.FunctionTypeParameterContext = FunctionTypeParameterContext; 
SolidityParser.VariableDeclarationContext = VariableDeclarationContext; 
SolidityParser.TypeNameContext = TypeNameContext; 
SolidityParser.UserDefinedTypeNameContext = UserDefinedTypeNameContext; 
SolidityParser.MappingKeyContext = MappingKeyContext; 
SolidityParser.MappingContext = MappingContext; 
SolidityParser.FunctionTypeNameContext = FunctionTypeNameContext; 
SolidityParser.StorageLocationContext = StorageLocationContext; 
SolidityParser.StateMutabilityContext = StateMutabilityContext; 
SolidityParser.BlockContext = BlockContext; 
SolidityParser.StatementContext = StatementContext; 
SolidityParser.ExpressionStatementContext = ExpressionStatementContext; 
SolidityParser.IfStatementContext = IfStatementContext; 
SolidityParser.TryStatementContext = TryStatementContext; 
SolidityParser.CatchClauseContext = CatchClauseContext; 
SolidityParser.WhileStatementContext = WhileStatementContext; 
SolidityParser.SimpleStatementContext = SimpleStatementContext; 
SolidityParser.UncheckedStatementContext = UncheckedStatementContext; 
SolidityParser.ForStatementContext = ForStatementContext; 
SolidityParser.InlineAssemblyStatementContext = InlineAssemblyStatementContext; 
SolidityParser.DoWhileStatementContext = DoWhileStatementContext; 
SolidityParser.ContinueStatementContext = ContinueStatementContext; 
SolidityParser.BreakStatementContext = BreakStatementContext; 
SolidityParser.ReturnStatementContext = ReturnStatementContext; 
SolidityParser.ThrowStatementContext = ThrowStatementContext; 
SolidityParser.EmitStatementContext = EmitStatementContext; 
SolidityParser.VariableDeclarationStatementContext = VariableDeclarationStatementContext; 
SolidityParser.VariableDeclarationListContext = VariableDeclarationListContext; 
SolidityParser.IdentifierListContext = IdentifierListContext; 
SolidityParser.ElementaryTypeNameContext = ElementaryTypeNameContext; 
SolidityParser.ExpressionContext = ExpressionContext; 
SolidityParser.PrimaryExpressionContext = PrimaryExpressionContext; 
SolidityParser.ExpressionListContext = ExpressionListContext; 
SolidityParser.NameValueListContext = NameValueListContext; 
SolidityParser.NameValueContext = NameValueContext; 
SolidityParser.FunctionCallArgumentsContext = FunctionCallArgumentsContext; 
SolidityParser.FunctionCallContext = FunctionCallContext; 
SolidityParser.AssemblyBlockContext = AssemblyBlockContext; 
SolidityParser.AssemblyItemContext = AssemblyItemContext; 
SolidityParser.AssemblyExpressionContext = AssemblyExpressionContext; 
SolidityParser.AssemblyMemberContext = AssemblyMemberContext; 
SolidityParser.AssemblyCallContext = AssemblyCallContext; 
SolidityParser.AssemblyLocalDefinitionContext = AssemblyLocalDefinitionContext; 
SolidityParser.AssemblyAssignmentContext = AssemblyAssignmentContext; 
SolidityParser.AssemblyIdentifierOrListContext = AssemblyIdentifierOrListContext; 
SolidityParser.AssemblyIdentifierListContext = AssemblyIdentifierListContext; 
SolidityParser.AssemblyStackAssignmentContext = AssemblyStackAssignmentContext; 
SolidityParser.LabelDefinitionContext = LabelDefinitionContext; 
SolidityParser.AssemblySwitchContext = AssemblySwitchContext; 
SolidityParser.AssemblyCaseContext = AssemblyCaseContext; 
SolidityParser.AssemblyFunctionDefinitionContext = AssemblyFunctionDefinitionContext; 
SolidityParser.AssemblyFunctionReturnsContext = AssemblyFunctionReturnsContext; 
SolidityParser.AssemblyForContext = AssemblyForContext; 
SolidityParser.AssemblyIfContext = AssemblyIfContext; 
SolidityParser.AssemblyLiteralContext = AssemblyLiteralContext; 
SolidityParser.SubAssemblyContext = SubAssemblyContext; 
SolidityParser.TupleExpressionContext = TupleExpressionContext; 
SolidityParser.TypeNameExpressionContext = TypeNameExpressionContext; 
SolidityParser.NumberLiteralContext = NumberLiteralContext; 
SolidityParser.IdentifierContext = IdentifierContext; 
SolidityParser.HexLiteralContext = HexLiteralContext; 
SolidityParser.OverrideSpecifierContext = OverrideSpecifierContext; 
SolidityParser.StringLiteralContext = StringLiteralContext; 
