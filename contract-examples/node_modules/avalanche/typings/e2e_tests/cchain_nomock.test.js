"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const e2etestlib_1 = require("./e2etestlib");
const bn_js_1 = __importDefault(require("bn.js"));
describe("CChain", () => {
    const avalanche = (0, e2etestlib_1.getAvalanche)();
    const cchain = avalanche.CChain();
    const keystore = avalanche.NodeKeys();
    let exportTxHash = { value: "" };
    const user = "avalancheJsCChainUser";
    const passwd = "avalancheJsP@ssw4rd";
    const key = "PrivateKey-ewoqjP7PxY4yr3iLTpLisriqt94hdyDFNgchSxGGztUrTXtNN";
    const privateKeyHex = "0x56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027";
    const whaleAddr = "0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC";
    const xChainAddr = "X-custom18jma8ppw3nhx5r4ap8clazz0dps7rv5u9xde7p";
    // test_name        response_promise                            resp_fn          matcher           expected_value/obtained_value
    const tests_spec = [
        [
            "createUser",
            () => keystore.createUser(user, passwd),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => true
        ],
        [
            "importKey",
            () => cchain.importKey(user, passwd, key),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => whaleAddr
        ],
        [
            "exportAVAX",
            () => cchain.exportAVAX(user, passwd, xChainAddr, new bn_js_1.default(10)),
            (x) => x,
            e2etestlib_1.Matcher.Get,
            () => exportTxHash
        ],
        [
            "getBaseFee",
            () => cchain.getBaseFee(),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => "0x34630b8a00"
        ],
        [
            "getMaxPriorityFeePerGas",
            () => cchain.getMaxPriorityFeePerGas(),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => "0x0"
        ],
        [
            "exportKey",
            () => cchain.exportKey(user, passwd, whaleAddr),
            (x) => x,
            e2etestlib_1.Matcher.toEqual,
            () => ({
                privateKey: key,
                privateKeyHex: privateKeyHex
            })
        ]
    ];
    (0, e2etestlib_1.createTests)(tests_spec);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2NoYWluX25vbW9jay50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vZTJlX3Rlc3RzL2NjaGFpbl9ub21vY2sudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDZDQUFpRTtBQUVqRSxrREFBc0I7QUFJdEIsUUFBUSxDQUFDLFFBQVEsRUFBRSxHQUFTLEVBQUU7SUFDNUIsTUFBTSxTQUFTLEdBQWMsSUFBQSx5QkFBWSxHQUFFLENBQUE7SUFDM0MsTUFBTSxNQUFNLEdBQVcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFBO0lBQ3pDLE1BQU0sUUFBUSxHQUFnQixTQUFTLENBQUMsUUFBUSxFQUFFLENBQUE7SUFFbEQsSUFBSSxZQUFZLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUE7SUFFaEMsTUFBTSxJQUFJLEdBQVcsdUJBQXVCLENBQUE7SUFDNUMsTUFBTSxNQUFNLEdBQVcscUJBQXFCLENBQUE7SUFDNUMsTUFBTSxHQUFHLEdBQ1AsOERBQThELENBQUE7SUFDaEUsTUFBTSxhQUFhLEdBQ2pCLG9FQUFvRSxDQUFBO0lBQ3RFLE1BQU0sU0FBUyxHQUFXLDRDQUE0QyxDQUFBO0lBQ3RFLE1BQU0sVUFBVSxHQUFXLGlEQUFpRCxDQUFBO0lBRTVFLGdJQUFnSTtJQUNoSSxNQUFNLFVBQVUsR0FBUTtRQUN0QjtZQUNFLFlBQVk7WUFDWixHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUM7WUFDdkMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDUixvQkFBTyxDQUFDLElBQUk7WUFDWixHQUFHLEVBQUUsQ0FBQyxJQUFJO1NBQ1g7UUFDRDtZQUNFLFdBQVc7WUFDWCxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDO1lBQ3pDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ1Isb0JBQU8sQ0FBQyxJQUFJO1lBQ1osR0FBRyxFQUFFLENBQUMsU0FBUztTQUNoQjtRQUNEO1lBQ0UsWUFBWTtZQUNaLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsSUFBSSxlQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDN0QsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDUixvQkFBTyxDQUFDLEdBQUc7WUFDWCxHQUFHLEVBQUUsQ0FBQyxZQUFZO1NBQ25CO1FBQ0Q7WUFDRSxZQUFZO1lBQ1osR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTtZQUN6QixDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNSLG9CQUFPLENBQUMsSUFBSTtZQUNaLEdBQUcsRUFBRSxDQUFDLGNBQWM7U0FDckI7UUFDRDtZQUNFLHlCQUF5QjtZQUN6QixHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsdUJBQXVCLEVBQUU7WUFDdEMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDUixvQkFBTyxDQUFDLElBQUk7WUFDWixHQUFHLEVBQUUsQ0FBQyxLQUFLO1NBQ1o7UUFDRDtZQUNFLFdBQVc7WUFDWCxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDO1lBQy9DLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ1Isb0JBQU8sQ0FBQyxPQUFPO1lBQ2YsR0FBRyxFQUFFLENBQUMsQ0FBQztnQkFDTCxVQUFVLEVBQUUsR0FBRztnQkFDZixhQUFhLEVBQUUsYUFBYTthQUM3QixDQUFDO1NBQ0g7S0FDRixDQUFBO0lBRUQsSUFBQSx3QkFBVyxFQUFDLFVBQVUsQ0FBQyxDQUFBO0FBQ3pCLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QXZhbGFuY2hlLCBjcmVhdGVUZXN0cywgTWF0Y2hlciB9IGZyb20gXCIuL2UyZXRlc3RsaWJcIlxuaW1wb3J0IHsgS2V5c3RvcmVBUEkgfSBmcm9tIFwic3JjL2FwaXMva2V5c3RvcmUvYXBpXCJcbmltcG9ydCBCTiBmcm9tIFwiYm4uanNcIlxuaW1wb3J0IEF2YWxhbmNoZSBmcm9tIFwic3JjXCJcbmltcG9ydCB7IEVWTUFQSSB9IGZyb20gXCJzcmMvYXBpcy9ldm1cIlxuXG5kZXNjcmliZShcIkNDaGFpblwiLCAoKTogdm9pZCA9PiB7XG4gIGNvbnN0IGF2YWxhbmNoZTogQXZhbGFuY2hlID0gZ2V0QXZhbGFuY2hlKClcbiAgY29uc3QgY2NoYWluOiBFVk1BUEkgPSBhdmFsYW5jaGUuQ0NoYWluKClcbiAgY29uc3Qga2V5c3RvcmU6IEtleXN0b3JlQVBJID0gYXZhbGFuY2hlLk5vZGVLZXlzKClcblxuICBsZXQgZXhwb3J0VHhIYXNoID0geyB2YWx1ZTogXCJcIiB9XG5cbiAgY29uc3QgdXNlcjogc3RyaW5nID0gXCJhdmFsYW5jaGVKc0NDaGFpblVzZXJcIlxuICBjb25zdCBwYXNzd2Q6IHN0cmluZyA9IFwiYXZhbGFuY2hlSnNQQHNzdzRyZFwiXG4gIGNvbnN0IGtleTogc3RyaW5nID1cbiAgICBcIlByaXZhdGVLZXktZXdvcWpQN1B4WTR5cjNpTFRwTGlzcmlxdDk0aGR5REZOZ2NoU3hHR3p0VXJUWHROTlwiXG4gIGNvbnN0IHByaXZhdGVLZXlIZXg6IHN0cmluZyA9XG4gICAgXCIweDU2Mjg5ZTk5Yzk0YjY5MTJiZmMxMmFkYzA5M2M5YjUxMTI0ZjBkYzU0YWM3YTc2NmIyYmM1Y2NmNTU4ZDgwMjdcIlxuICBjb25zdCB3aGFsZUFkZHI6IHN0cmluZyA9IFwiMHg4ZGI5N0M3Y0VjRTI0OWMyYjk4YkRDMDIyNkNjNEMyQTU3QkY1MkZDXCJcbiAgY29uc3QgeENoYWluQWRkcjogc3RyaW5nID0gXCJYLWN1c3RvbTE4am1hOHBwdzNuaHg1cjRhcDhjbGF6ejBkcHM3cnY1dTl4ZGU3cFwiXG5cbiAgLy8gdGVzdF9uYW1lICAgICAgICByZXNwb25zZV9wcm9taXNlICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BfZm4gICAgICAgICAgbWF0Y2hlciAgICAgICAgICAgZXhwZWN0ZWRfdmFsdWUvb2J0YWluZWRfdmFsdWVcbiAgY29uc3QgdGVzdHNfc3BlYzogYW55ID0gW1xuICAgIFtcbiAgICAgIFwiY3JlYXRlVXNlclwiLFxuICAgICAgKCkgPT4ga2V5c3RvcmUuY3JlYXRlVXNlcih1c2VyLCBwYXNzd2QpLFxuICAgICAgKHgpID0+IHgsXG4gICAgICBNYXRjaGVyLnRvQmUsXG4gICAgICAoKSA9PiB0cnVlXG4gICAgXSxcbiAgICBbXG4gICAgICBcImltcG9ydEtleVwiLFxuICAgICAgKCkgPT4gY2NoYWluLmltcG9ydEtleSh1c2VyLCBwYXNzd2QsIGtleSksXG4gICAgICAoeCkgPT4geCxcbiAgICAgIE1hdGNoZXIudG9CZSxcbiAgICAgICgpID0+IHdoYWxlQWRkclxuICAgIF0sXG4gICAgW1xuICAgICAgXCJleHBvcnRBVkFYXCIsXG4gICAgICAoKSA9PiBjY2hhaW4uZXhwb3J0QVZBWCh1c2VyLCBwYXNzd2QsIHhDaGFpbkFkZHIsIG5ldyBCTigxMCkpLFxuICAgICAgKHgpID0+IHgsXG4gICAgICBNYXRjaGVyLkdldCxcbiAgICAgICgpID0+IGV4cG9ydFR4SGFzaFxuICAgIF0sXG4gICAgW1xuICAgICAgXCJnZXRCYXNlRmVlXCIsXG4gICAgICAoKSA9PiBjY2hhaW4uZ2V0QmFzZUZlZSgpLFxuICAgICAgKHgpID0+IHgsXG4gICAgICBNYXRjaGVyLnRvQmUsXG4gICAgICAoKSA9PiBcIjB4MzQ2MzBiOGEwMFwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImdldE1heFByaW9yaXR5RmVlUGVyR2FzXCIsXG4gICAgICAoKSA9PiBjY2hhaW4uZ2V0TWF4UHJpb3JpdHlGZWVQZXJHYXMoKSxcbiAgICAgICh4KSA9PiB4LFxuICAgICAgTWF0Y2hlci50b0JlLFxuICAgICAgKCkgPT4gXCIweDBcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJleHBvcnRLZXlcIixcbiAgICAgICgpID0+IGNjaGFpbi5leHBvcnRLZXkodXNlciwgcGFzc3dkLCB3aGFsZUFkZHIpLFxuICAgICAgKHgpID0+IHgsXG4gICAgICBNYXRjaGVyLnRvRXF1YWwsXG4gICAgICAoKSA9PiAoe1xuICAgICAgICBwcml2YXRlS2V5OiBrZXksXG4gICAgICAgIHByaXZhdGVLZXlIZXg6IHByaXZhdGVLZXlIZXhcbiAgICAgIH0pXG4gICAgXVxuICBdXG5cbiAgY3JlYXRlVGVzdHModGVzdHNfc3BlYylcbn0pIl19