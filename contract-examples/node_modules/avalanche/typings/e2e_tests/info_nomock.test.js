"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const e2etestlib_1 = require("./e2etestlib");
const bn_js_1 = __importDefault(require("bn.js"));
describe("Info", () => {
    const avalanche = (0, e2etestlib_1.getAvalanche)();
    const info = avalanche.Info();
    // test_name          response_promise               resp_fn                 matcher           expected_value/obtained_value
    const tests_spec = [
        [
            "getBlockchainID",
            () => info.getBlockchainID("X"),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => "qzfF3A11KzpcHkkqznEyQgupQrCNS6WV6fTUTwZpEKqhj1QE7"
        ],
        [
            "getNetworkID",
            () => info.getNetworkID(),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => "1337"
        ],
        [
            "getNetworkName",
            () => info.getNetworkName(),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => "network-1337"
        ],
        [
            "getNodeId",
            () => info.getNodeID(),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => "NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg"
        ],
        [
            "getNodeVersion",
            () => info.getNodeVersion(),
            (x) => x,
            e2etestlib_1.Matcher.toMatch,
            () => /^avalanche\/\d*\.\d*\.\d*$/
        ],
        [
            "isBootstrapped",
            () => info.isBootstrapped("X"),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => true
        ],
        ["peers", () => info.peers(), (x) => x.length, e2etestlib_1.Matcher.toBe, () => 4],
        [
            "getTxFee1",
            () => info.getTxFee(),
            (x) => x.txFee,
            e2etestlib_1.Matcher.toEqual,
            () => new bn_js_1.default(1000000)
        ],
        [
            "getTxFee2",
            () => info.getTxFee(),
            (x) => x.creationTxFee,
            e2etestlib_1.Matcher.toEqual,
            () => new bn_js_1.default(1000000)
        ]
    ];
    (0, e2etestlib_1.createTests)(tests_spec);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5mb19ub21vY2sudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2UyZV90ZXN0cy9pbmZvX25vbW9jay50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNkNBQWlFO0FBRWpFLGtEQUFzQjtBQUd0QixRQUFRLENBQUMsTUFBTSxFQUFFLEdBQVMsRUFBRTtJQUMxQixNQUFNLFNBQVMsR0FBYyxJQUFBLHlCQUFZLEdBQUUsQ0FBQTtJQUMzQyxNQUFNLElBQUksR0FBWSxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUE7SUFFdEMsNEhBQTRIO0lBQzVILE1BQU0sVUFBVSxHQUFRO1FBQ3RCO1lBQ0UsaUJBQWlCO1lBQ2pCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDO1lBQy9CLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ1Isb0JBQU8sQ0FBQyxJQUFJO1lBQ1osR0FBRyxFQUFFLENBQUMsbURBQW1EO1NBQzFEO1FBQ0Q7WUFDRSxjQUFjO1lBQ2QsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUN6QixDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNSLG9CQUFPLENBQUMsSUFBSTtZQUNaLEdBQUcsRUFBRSxDQUFDLE1BQU07U0FDYjtRQUNEO1lBQ0UsZ0JBQWdCO1lBQ2hCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDM0IsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDUixvQkFBTyxDQUFDLElBQUk7WUFDWixHQUFHLEVBQUUsQ0FBQyxjQUFjO1NBQ3JCO1FBQ0Q7WUFDRSxXQUFXO1lBQ1gsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUN0QixDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNSLG9CQUFPLENBQUMsSUFBSTtZQUNaLEdBQUcsRUFBRSxDQUFDLDBDQUEwQztTQUNqRDtRQUNEO1lBQ0UsZ0JBQWdCO1lBQ2hCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDM0IsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDUixvQkFBTyxDQUFDLE9BQU87WUFDZixHQUFHLEVBQUUsQ0FBQyw0QkFBNEI7U0FDbkM7UUFDRDtZQUNFLGdCQUFnQjtZQUNoQixHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQztZQUM5QixDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNSLG9CQUFPLENBQUMsSUFBSTtZQUNaLEdBQUcsRUFBRSxDQUFDLElBQUk7U0FDWDtRQUNELENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxvQkFBTyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDckU7WUFDRSxXQUFXO1lBQ1gsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNyQixDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUs7WUFDZCxvQkFBTyxDQUFDLE9BQU87WUFDZixHQUFHLEVBQUUsQ0FBQyxJQUFJLGVBQUUsQ0FBQyxPQUFPLENBQUM7U0FDdEI7UUFDRDtZQUNFLFdBQVc7WUFDWCxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ3JCLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYTtZQUN0QixvQkFBTyxDQUFDLE9BQU87WUFDZixHQUFHLEVBQUUsQ0FBQyxJQUFJLGVBQUUsQ0FBQyxPQUFPLENBQUM7U0FDdEI7S0FDRixDQUFBO0lBRUQsSUFBQSx3QkFBVyxFQUFDLFVBQVUsQ0FBQyxDQUFBO0FBQ3pCLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QXZhbGFuY2hlLCBjcmVhdGVUZXN0cywgTWF0Y2hlciB9IGZyb20gXCIuL2UyZXRlc3RsaWJcIlxuaW1wb3J0IHsgSW5mb0FQSSB9IGZyb20gXCJzcmMvYXBpcy9pbmZvL2FwaVwiXG5pbXBvcnQgQk4gZnJvbSBcImJuLmpzXCJcbmltcG9ydCBBdmFsYW5jaGUgZnJvbSBcInNyY1wiXG5cbmRlc2NyaWJlKFwiSW5mb1wiLCAoKTogdm9pZCA9PiB7XG4gIGNvbnN0IGF2YWxhbmNoZTogQXZhbGFuY2hlID0gZ2V0QXZhbGFuY2hlKClcbiAgY29uc3QgaW5mbzogSW5mb0FQSSA9IGF2YWxhbmNoZS5JbmZvKClcblxuICAvLyB0ZXN0X25hbWUgICAgICAgICAgcmVzcG9uc2VfcHJvbWlzZSAgICAgICAgICAgICAgIHJlc3BfZm4gICAgICAgICAgICAgICAgIG1hdGNoZXIgICAgICAgICAgIGV4cGVjdGVkX3ZhbHVlL29idGFpbmVkX3ZhbHVlXG4gIGNvbnN0IHRlc3RzX3NwZWM6IGFueSA9IFtcbiAgICBbXG4gICAgICBcImdldEJsb2NrY2hhaW5JRFwiLFxuICAgICAgKCkgPT4gaW5mby5nZXRCbG9ja2NoYWluSUQoXCJYXCIpLFxuICAgICAgKHgpID0+IHgsXG4gICAgICBNYXRjaGVyLnRvQmUsXG4gICAgICAoKSA9PiBcInF6ZkYzQTExS3pwY0hra3F6bkV5UWd1cFFyQ05TNldWNmZUVVR3WnBFS3FoajFRRTdcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJnZXROZXR3b3JrSURcIixcbiAgICAgICgpID0+IGluZm8uZ2V0TmV0d29ya0lEKCksXG4gICAgICAoeCkgPT4geCxcbiAgICAgIE1hdGNoZXIudG9CZSxcbiAgICAgICgpID0+IFwiMTMzN1wiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImdldE5ldHdvcmtOYW1lXCIsXG4gICAgICAoKSA9PiBpbmZvLmdldE5ldHdvcmtOYW1lKCksXG4gICAgICAoeCkgPT4geCxcbiAgICAgIE1hdGNoZXIudG9CZSxcbiAgICAgICgpID0+IFwibmV0d29yay0xMzM3XCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZ2V0Tm9kZUlkXCIsXG4gICAgICAoKSA9PiBpbmZvLmdldE5vZGVJRCgpLFxuICAgICAgKHgpID0+IHgsXG4gICAgICBNYXRjaGVyLnRvQmUsXG4gICAgICAoKSA9PiBcIk5vZGVJRC03WGh3Mm1EeHVEUzQ0ajQyVENCNlU1NTc5ZXNiU3QzTGdcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJnZXROb2RlVmVyc2lvblwiLFxuICAgICAgKCkgPT4gaW5mby5nZXROb2RlVmVyc2lvbigpLFxuICAgICAgKHgpID0+IHgsXG4gICAgICBNYXRjaGVyLnRvTWF0Y2gsXG4gICAgICAoKSA9PiAvXmF2YWxhbmNoZVxcL1xcZCpcXC5cXGQqXFwuXFxkKiQvXG4gICAgXSxcbiAgICBbXG4gICAgICBcImlzQm9vdHN0cmFwcGVkXCIsXG4gICAgICAoKSA9PiBpbmZvLmlzQm9vdHN0cmFwcGVkKFwiWFwiKSxcbiAgICAgICh4KSA9PiB4LFxuICAgICAgTWF0Y2hlci50b0JlLFxuICAgICAgKCkgPT4gdHJ1ZVxuICAgIF0sXG4gICAgW1wicGVlcnNcIiwgKCkgPT4gaW5mby5wZWVycygpLCAoeCkgPT4geC5sZW5ndGgsIE1hdGNoZXIudG9CZSwgKCkgPT4gNF0sXG4gICAgW1xuICAgICAgXCJnZXRUeEZlZTFcIixcbiAgICAgICgpID0+IGluZm8uZ2V0VHhGZWUoKSxcbiAgICAgICh4KSA9PiB4LnR4RmVlLFxuICAgICAgTWF0Y2hlci50b0VxdWFsLFxuICAgICAgKCkgPT4gbmV3IEJOKDEwMDAwMDApXG4gICAgXSxcbiAgICBbXG4gICAgICBcImdldFR4RmVlMlwiLFxuICAgICAgKCkgPT4gaW5mby5nZXRUeEZlZSgpLFxuICAgICAgKHgpID0+IHguY3JlYXRpb25UeEZlZSxcbiAgICAgIE1hdGNoZXIudG9FcXVhbCxcbiAgICAgICgpID0+IG5ldyBCTigxMDAwMDAwKVxuICAgIF1cbiAgXVxuXG4gIGNyZWF0ZVRlc3RzKHRlc3RzX3NwZWMpXG59KSJdfQ==