"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Vertex = void 0;
/**
 * @packageDocumentation
 * @module API-AVM-Vertex
 */
const buffer_1 = require("buffer/");
const bintools_1 = __importDefault(require("../../utils/bintools"));
const constants_1 = require("./constants");
const tx_1 = require("./tx");
const utils_1 = require("../../utils");
const bn_js_1 = __importDefault(require("bn.js"));
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
/**
 * Class representing a Vertex
 */
class Vertex extends utils_1.Serializable {
    /**
     * Class representing a Vertex which is a container for AVM Transactions.
     *
     * @param networkID Optional, [[DefaultNetworkID]]
     * @param blockchainID Optional, default "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
     * @param height Optional, default new BN(0)
     * @param epoch Optional, default new BN(0)
     * @param parentIDs Optional, default []
     * @param txs Optional, default []
     * @param restrictions Optional, default []
     */
    constructor(networkID = utils_1.DefaultNetworkID, blockchainID = "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", height = new bn_js_1.default(0), epoch = 0, parentIDs = [], txs = [], restrictions = []) {
        super();
        this._typeName = "Vertex";
        this._codecID = constants_1.AVMConstants.LATESTCODEC;
        this.networkID = networkID;
        this.blockchainID = bintools.cb58Decode(blockchainID);
        this.height = height;
        this.epoch = epoch;
        this.parentIDs = parentIDs;
        this.numParentIDs = parentIDs.length;
        this.txs = txs;
        this.numTxs = txs.length;
        this.restrictions = restrictions;
        this.numRestrictions = restrictions.length;
    }
    /**
     * Returns the NetworkID as a number
     */
    getNetworkID() {
        return this.networkID;
    }
    /**
     * Returns the BlockchainID as a CB58 string
     */
    getBlockchainID() {
        return bintools.cb58Encode(this.blockchainID);
    }
    /**
     * Returns the Height as a {@link https://github.com/indutny/bn.js/|BN}.
     */
    getHeight() {
        return this.height;
    }
    /**
     * Returns the Epoch as a number.
     */
    getEpoch() {
        return this.epoch;
    }
    /**
     * @returns An array of Buffers
     */
    getParentIDs() {
        return this.parentIDs;
    }
    /**
     * Returns array of UnsignedTxs.
     */
    getTxs() {
        return this.txs;
    }
    /**
     * @returns An array of Buffers
     */
    getRestrictions() {
        return this.restrictions;
    }
    /**
     * Set the codecID
     *
     * @param codecID The codecID to set
     */
    setCodecID(codecID) {
        if (codecID !== 0 && codecID !== 1) {
            /* istanbul ignore next */
            throw new utils_1.CodecIdError("Error - Vertex.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.");
        }
        this._codecID = codecID;
        this._typeID =
            this._codecID === 0 ? constants_1.AVMConstants.VERTEX : constants_1.AVMConstants.VERTEX_CODECONE;
    }
    /**
     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[Vertex]], parses it, populates the class, and returns the length of the Vertex in bytes.
     *
     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[Vertex]]
     *
     * @returns The length of the raw [[Vertex]]
     *
     * @remarks assume not-checksummed
     */
    fromBuffer(bytes, offset = 0) {
        offset += 2;
        this.blockchainID = bintools.copyFrom(bytes, offset, offset + 32);
        offset += 32;
        const h = bintools.copyFrom(bytes, offset, offset + 8);
        this.height = bintools.fromBufferToBN(h);
        offset += 8;
        const e = bintools.copyFrom(bytes, offset, offset + 4);
        this.epoch = e.readInt32BE(0);
        offset += 4;
        const nPIDs = bintools.copyFrom(bytes, offset, offset + 4);
        this.numParentIDs = nPIDs.readInt32BE(0);
        offset += 4;
        for (let i = 0; i < this.numParentIDs; i++) {
            const parentID = bintools.copyFrom(bytes, offset, offset + 32);
            offset += 32;
            this.parentIDs.push(parentID);
        }
        const nTxs = bintools.copyFrom(bytes, offset, offset + 4);
        this.numTxs = nTxs.readInt32BE(0);
        // account for tx-size bytes
        offset += 8;
        for (let i = 0; i < this.numTxs; i++) {
            const tx = new tx_1.Tx();
            offset += tx.fromBuffer(bintools.copyFrom(bytes, offset));
            this.txs.push(tx);
        }
        if (bytes.byteLength > offset && bytes.byteLength - offset > 4) {
            const nRs = bintools.copyFrom(bytes, offset, offset + 4);
            this.numRestrictions = nRs.readInt32BE(0);
            offset += 4;
            for (let i = 0; i < this.numRestrictions; i++) {
                const tx = bintools.copyFrom(bytes, offset, offset + 32);
                offset += 32;
                this.restrictions.push(tx);
            }
        }
        return offset;
    }
    /**
     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[Vertex]].
     */
    toBuffer() {
        const codec = this.getCodecID();
        const codecBuf = buffer_1.Buffer.alloc(2);
        codecBuf.writeUInt16BE(codec, 0);
        const epochBuf = buffer_1.Buffer.alloc(4);
        epochBuf.writeInt32BE(this.epoch, 0);
        const numParentIDsBuf = buffer_1.Buffer.alloc(4);
        numParentIDsBuf.writeInt32BE(this.numParentIDs, 0);
        let barr = [
            codecBuf,
            this.blockchainID,
            bintools.fromBNToBuffer(this.height, 8),
            epochBuf,
            numParentIDsBuf
        ];
        this.parentIDs.forEach((parentID) => {
            barr.push(parentID);
        });
        const txs = this.getTxs();
        const numTxs = buffer_1.Buffer.alloc(4);
        numTxs.writeUInt32BE(txs.length, 0);
        barr.push(numTxs);
        let size = 0;
        const txSize = buffer_1.Buffer.alloc(4);
        txs.forEach((tx) => {
            const b = tx.toBuffer();
            size += b.byteLength;
        });
        txSize.writeUInt32BE(size, 0);
        barr.push(txSize);
        txs.forEach((tx) => {
            const b = tx.toBuffer();
            barr.push(b);
        });
        return buffer_1.Buffer.concat(barr);
    }
    clone() {
        let vertex = new Vertex();
        vertex.fromBuffer(this.toBuffer());
        return vertex;
    }
}
exports.Vertex = Vertex;
//# sourceMappingURL=data:application/json;base64,