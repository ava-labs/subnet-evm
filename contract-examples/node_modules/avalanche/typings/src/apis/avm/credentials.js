"use strict";
/**
 * @packageDocumentation
 * @module API-AVM-Credentials
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NFTCredential = exports.SECPCredential = exports.SelectCredentialClass = void 0;
const constants_1 = require("./constants");
const credentials_1 = require("../../common/credentials");
const errors_1 = require("../../utils/errors");
/**
 * Takes a buffer representing the credential and returns the proper [[Credential]] instance.
 *
 * @param credid A number representing the credential ID parsed prior to the bytes passed in
 *
 * @returns An instance of an [[Credential]]-extended class.
 */
const SelectCredentialClass = (credid, ...args) => {
    if (credid === constants_1.AVMConstants.SECPCREDENTIAL ||
        credid === constants_1.AVMConstants.SECPCREDENTIAL_CODECONE) {
        return new SECPCredential(...args);
    }
    if (credid === constants_1.AVMConstants.NFTCREDENTIAL ||
        credid === constants_1.AVMConstants.NFTCREDENTIAL_CODECONE) {
        return new NFTCredential(...args);
    }
    /* istanbul ignore next */
    throw new errors_1.CredIdError("Error - SelectCredentialClass: unknown credid");
};
exports.SelectCredentialClass = SelectCredentialClass;
class SECPCredential extends credentials_1.Credential {
    constructor() {
        super(...arguments);
        this._typeName = "SECPCredential";
        this._codecID = constants_1.AVMConstants.LATESTCODEC;
        this._typeID = this._codecID === 0
            ? constants_1.AVMConstants.SECPCREDENTIAL
            : constants_1.AVMConstants.SECPCREDENTIAL_CODECONE;
    }
    //serialize and deserialize both are inherited
    /**
     * Set the codecID
     *
     * @param codecID The codecID to set
     */
    setCodecID(codecID) {
        if (codecID !== 0 && codecID !== 1) {
            /* istanbul ignore next */
            throw new errors_1.CodecIdError("Error - SECPCredential.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.");
        }
        this._codecID = codecID;
        this._typeID =
            this._codecID === 0
                ? constants_1.AVMConstants.SECPCREDENTIAL
                : constants_1.AVMConstants.SECPCREDENTIAL_CODECONE;
    }
    getCredentialID() {
        return this._typeID;
    }
    clone() {
        let newbase = new SECPCredential();
        newbase.fromBuffer(this.toBuffer());
        return newbase;
    }
    create(...args) {
        return new SECPCredential(...args);
    }
    select(id, ...args) {
        let newbasetx = (0, exports.SelectCredentialClass)(id, ...args);
        return newbasetx;
    }
}
exports.SECPCredential = SECPCredential;
class NFTCredential extends credentials_1.Credential {
    constructor() {
        super(...arguments);
        this._typeName = "NFTCredential";
        this._codecID = constants_1.AVMConstants.LATESTCODEC;
        this._typeID = this._codecID === 0
            ? constants_1.AVMConstants.NFTCREDENTIAL
            : constants_1.AVMConstants.NFTCREDENTIAL_CODECONE;
    }
    //serialize and deserialize both are inherited
    /**
     * Set the codecID
     *
     * @param codecID The codecID to set
     */
    setCodecID(codecID) {
        if (codecID !== 0 && codecID !== 1) {
            /* istanbul ignore next */
            throw new errors_1.CodecIdError("Error - NFTCredential.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.");
        }
        this._codecID = codecID;
        this._typeID =
            this._codecID === 0
                ? constants_1.AVMConstants.NFTCREDENTIAL
                : constants_1.AVMConstants.NFTCREDENTIAL_CODECONE;
    }
    getCredentialID() {
        return this._typeID;
    }
    clone() {
        let newbase = new NFTCredential();
        newbase.fromBuffer(this.toBuffer());
        return newbase;
    }
    create(...args) {
        return new NFTCredential(...args);
    }
    select(id, ...args) {
        let newbasetx = (0, exports.SelectCredentialClass)(id, ...args);
        return newbasetx;
    }
}
exports.NFTCredential = NFTCredential;
//# sourceMappingURL=data:application/json;base64,