"use strict";
/**
 * @packageDocumentation
 * @module Utils-HelperFunctions
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.costExportTx = exports.calcBytesCost = exports.costImportTx = exports.NodeIDStringToBuffer = exports.bufferToNodeIDString = exports.privateKeyStringToBuffer = exports.bufferToPrivateKeyString = exports.UnixNow = exports.MaxWeightFormula = exports.getPreferredHRP = void 0;
const constants_1 = require("./constants");
const bn_js_1 = __importDefault(require("bn.js"));
const bintools_1 = __importDefault(require("../utils/bintools"));
const errors_1 = require("../utils/errors");
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
function getPreferredHRP(networkID = undefined) {
    if (networkID in constants_1.NetworkIDToHRP) {
        return constants_1.NetworkIDToHRP[`${networkID}`];
    }
    else if (typeof networkID === "undefined") {
        return constants_1.NetworkIDToHRP[`${constants_1.DefaultNetworkID}`];
    }
    return constants_1.FallbackHRP;
}
exports.getPreferredHRP = getPreferredHRP;
function MaxWeightFormula(staked, cap) {
    return bn_js_1.default.min(staked.mul(new bn_js_1.default(5)), cap);
}
exports.MaxWeightFormula = MaxWeightFormula;
/**
 * Function providing the current UNIX time using a {@link https://github.com/indutny/bn.js/|BN}.
 */
function UnixNow() {
    return new bn_js_1.default(Math.round(new Date().getTime() / 1000));
}
exports.UnixNow = UnixNow;
/**
 * Takes a private key buffer and produces a private key string with prefix.
 *
 * @param pk A {@link https://github.com/feross/buffer|Buffer} for the private key.
 */
function bufferToPrivateKeyString(pk) {
    return `PrivateKey-${bintools.cb58Encode(pk)}`;
}
exports.bufferToPrivateKeyString = bufferToPrivateKeyString;
/**
 * Takes a private key string and produces a private key {@link https://github.com/feross/buffer|Buffer}.
 *
 * @param pk A string for the private key.
 */
function privateKeyStringToBuffer(pk) {
    if (!pk.startsWith("PrivateKey-")) {
        throw new errors_1.PrivateKeyError("Error - privateKeyStringToBuffer: private keys must start with 'PrivateKey-'");
    }
    const pksplit = pk.split("-");
    return bintools.cb58Decode(pksplit[pksplit.length - 1]);
}
exports.privateKeyStringToBuffer = privateKeyStringToBuffer;
/**
 * Takes a nodeID buffer and produces a nodeID string with prefix.
 *
 * @param pk A {@link https://github.com/feross/buffer|Buffer} for the nodeID.
 */
function bufferToNodeIDString(pk) {
    return `NodeID-${bintools.cb58Encode(pk)}`;
}
exports.bufferToNodeIDString = bufferToNodeIDString;
/**
 * Takes a nodeID string and produces a nodeID {@link https://github.com/feross/buffer|Buffer}.
 *
 * @param pk A string for the nodeID.
 */
function NodeIDStringToBuffer(pk) {
    if (!pk.startsWith("NodeID-")) {
        throw new errors_1.NodeIdError("Error - privateNodeIDToBuffer: nodeID must start with 'NodeID-'");
    }
    const pksplit = pk.split("-");
    return bintools.cb58Decode(pksplit[pksplit.length - 1]);
}
exports.NodeIDStringToBuffer = NodeIDStringToBuffer;
function costImportTx(tx) {
    let bytesCost = calcBytesCost(tx.toBuffer().byteLength);
    const importTx = tx.getTransaction();
    importTx.getImportInputs().forEach((input) => {
        const inCost = input.getCost();
        bytesCost += inCost;
    });
    const fixedFee = 10000;
    return bytesCost + fixedFee;
}
exports.costImportTx = costImportTx;
function calcBytesCost(len) {
    return len * constants_1.Defaults.network[1].C.txBytesGas;
}
exports.calcBytesCost = calcBytesCost;
function costExportTx(tx) {
    const bytesCost = calcBytesCost(tx.toBuffer().byteLength);
    const exportTx = tx.getTransaction();
    const numSigs = exportTx.getInputs().length;
    const sigCost = numSigs * constants_1.Defaults.network[1].C.costPerSignature;
    const fixedFee = 10000;
    return bytesCost + sigCost + fixedFee;
}
exports.costExportTx = costExportTx;
//# sourceMappingURL=data:application/json;base64,