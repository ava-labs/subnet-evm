"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const buffer_1 = require("buffer/");
const payload_1 = require("../../src/utils/payload");
const bintools_1 = __importDefault(require("../../src/utils/bintools"));
const bn_js_1 = __importDefault(require("bn.js"));
const bech32 = __importStar(require("bech32"));
const payloadTypes = payload_1.PayloadTypes.getInstance();
const bintools = bintools_1.default.getInstance();
describe("Payload", () => {
    const hrp = "tests";
    const cb58str = "MBcQpm1PsdfBKYscN3AYP56MusRDMZGF9";
    const cb58buf = bintools.bufferToB58(bintools.cb58Decode(cb58str));
    const bech = bech32.bech32.encode(hrp, bech32.bech32.toWords(bintools.b58ToBuffer(cb58buf)));
    const binstr = "Bx4v7ytutz3";
    const utf8str = "I am the very model of a modern Major-General.";
    const utf8b58 = bintools.bufferToB58(buffer_1.Buffer.from(utf8str));
    const utf8hex = buffer_1.Buffer.from(utf8str).toString("hex");
    const utf8b64 = buffer_1.Buffer.from(utf8str).toString("base64");
    const bnhex = "deadbeef";
    const svgstr = "<svg>hi mom</svg>";
    const csvstr = "1,2,3,4,5\neverybody,in the,house,come along, let's ride";
    const jsonobj = { boom: "goes the dynamite" };
    const yamlstr = "---\nrootproperty: blah\nsection:\n  one: two\n  three: four\n  Foo: Bar\n  empty: ~";
    const emailstr = "example@example.com";
    const urlstr = "https://example.com";
    const ipfsstr = "QmUy4jh5mGNZvLkjies1RWM4YuvJh5o2FYopNPVYwrRVGV";
    const onionstr = "https://el33th4xor.onion";
    const magnetstr = "magnet:?xt=urn:btih:c12fe1c06bba254a9dc9f519b335aa7c1367a88a";
    test("PayloadTypes", () => {
        expect(() => {
            payloadTypes.select(867309);
        }).toThrow();
        expect(payloadTypes.lookupID("BIN")).toBe(0);
        const binpayload = payloadTypes.select(0, binstr);
        const utf8payload = payloadTypes.select(1, utf8str);
        const hexstrpayload = payloadTypes.select(2, bnhex);
        const emailpayload = payloadTypes.select(26, emailstr);
        expect(payloadTypes.getTypeID(binpayload.toBuffer())).toBe(0);
        expect(payloadTypes.getTypeID(utf8payload.toBuffer())).toBe(1);
        expect(payloadTypes.getTypeID(hexstrpayload.toBuffer())).toBe(2);
        expect(payloadTypes.getTypeID(emailpayload.toBuffer())).toBe(26);
        const pp = payloadTypes.getContent(binpayload.toBuffer());
        expect(bintools.b58ToBuffer(binstr).toString("hex")).toBe(pp.toString("hex"));
        expect(payloadTypes.lookupType(0)).toBe("BIN");
        expect(payloadTypes.recast(binpayload).toBuffer().toString("hex")).toBe(binpayload.toBuffer().toString("hex"));
    });
    const testTable = [
        ["BIN", binstr, binstr],
        ["UTF8", utf8str, utf8b58],
        ["HEXSTR", utf8hex, utf8b58],
        ["B58STR", utf8b58, utf8b58],
        ["B64STR", utf8b64, utf8b58],
        ["BIGNUM", bnhex, bintools.bufferToB58(buffer_1.Buffer.from(bnhex, "hex"))],
        ["XCHAINADDR", "X-" + bech, cb58buf],
        ["PCHAINADDR", "P-" + bech, cb58buf],
        ["CCHAINADDR", "C-" + bech, cb58buf],
        ["TXID", cb58str, cb58buf],
        ["ASSETID", cb58str, cb58buf],
        ["UTXOID", cb58str, cb58buf],
        ["NFTID", cb58str, cb58buf],
        ["SUBNETID", cb58str, cb58buf],
        ["CHAINID", cb58str, cb58buf],
        ["NODEID", cb58str, cb58buf],
        ["SECPSIG", cb58str, cb58str],
        ["SECPENC", cb58str, cb58str],
        ["JPEG", binstr, binstr],
        ["PNG", binstr, binstr],
        ["BMP", binstr, binstr],
        ["ICO", binstr, binstr],
        ["SVG", svgstr, bintools.bufferToB58(buffer_1.Buffer.from(svgstr))],
        ["CSV", csvstr, bintools.bufferToB58(buffer_1.Buffer.from(csvstr))],
        [
            "JSON",
            JSON.stringify(jsonobj),
            bintools.bufferToB58(buffer_1.Buffer.from(JSON.stringify(jsonobj)))
        ],
        ["YAML", yamlstr, bintools.bufferToB58(buffer_1.Buffer.from(yamlstr))],
        ["EMAIL", emailstr, bintools.bufferToB58(buffer_1.Buffer.from(emailstr))],
        ["URL", urlstr, bintools.bufferToB58(buffer_1.Buffer.from(urlstr))],
        ["IPFS", ipfsstr, ipfsstr],
        ["ONION", onionstr, bintools.bufferToB58(buffer_1.Buffer.from(onionstr))],
        ["MAGNET", magnetstr, bintools.bufferToB58(buffer_1.Buffer.from(magnetstr))]
    ];
    test.each(testTable)("Basic Payload Test: typestr %s input %s inputbuff %s", (typestr, inputstr, inputbuff) => {
        const buff = bintools.b58ToBuffer(inputbuff);
        const typeid = payloadTypes.lookupID(typestr);
        const typename = payloadTypes.lookupType(typeid);
        expect(typename).toBe(typestr);
        const c0 = payloadTypes.select(typeid);
        expect(c0.typeID()).toBe(typeid);
        expect(c0.typeName()).toBe(typename);
        const c1 = payloadTypes.select(typeid, buff);
        const c2 = payloadTypes.select(typeid, inputstr, hrp);
        const c3 = payloadTypes.select(typeid);
        c3.fromBuffer(c1.toBuffer());
        const c4 = payloadTypes.select(typeid);
        c4.fromBuffer(c2.toBuffer());
        const s1 = c1.toBuffer().toString("hex");
        const s2 = c2.toBuffer().toString("hex");
        const s3 = c3.toBuffer().toString("hex");
        const s4 = c4.toBuffer().toString("hex");
        expect(s1).toBe(s2);
        expect(s2).toBe(s3);
        expect(s3).toBe(s4);
    });
    test("BINPayload special cases", () => {
        const pl = payloadTypes.select(0, binstr);
        expect(bintools.bufferToB58(pl.returnType())).toBe(binstr);
    });
    test("UTF8Payload special cases", () => {
        const pl = new payload_1.UTF8Payload(utf8str);
        expect(pl.returnType()).toBe(utf8str);
    });
    test("HEXSTRPayload special cases", () => {
        const pl = new payload_1.HEXSTRPayload(utf8hex);
        expect(pl.returnType()).toBe(utf8hex);
    });
    test("B58STRPayload special cases", () => {
        const pl = new payload_1.B58STRPayload(utf8b58);
        expect(pl.returnType()).toBe(utf8b58);
    });
    test("B64STRPayload special cases", () => {
        const pl = new payload_1.B64STRPayload(utf8b64);
        expect(pl.returnType()).toBe(utf8b64);
    });
    test("BIGNUMPayload special cases", () => {
        const jenny = new bn_js_1.default(8675309);
        const pl = new payload_1.BIGNUMPayload(jenny);
        expect(pl.returnType().toString("hex")).toBe(jenny.toString("hex"));
    });
    test("XCHAINADDRPayload special cases", () => {
        const addr = `X-${bech}`;
        const pl = new payload_1.XCHAINADDRPayload(addr, hrp);
        expect(pl.returnType(hrp)).toBe(addr);
        expect(pl.returnChainID()).toBe("X");
    });
    test("PCHAINADDRPayload special cases", () => {
        const addr = `P-${bech}`;
        const pl = new payload_1.PCHAINADDRPayload(addr, hrp);
        expect(pl.returnType(hrp)).toBe(addr);
        expect(pl.returnChainID()).toBe("P");
    });
    test("CCHAINADDRPayload special cases", () => {
        const addr = `C-${bech}`;
        const pl = new payload_1.CCHAINADDRPayload(addr, hrp);
        expect(pl.returnType(hrp)).toBe(addr);
        expect(pl.returnChainID()).toBe("C");
    });
    // handles all of cb58EncodedPayload
    test("TXIDPayload special cases", () => {
        const pl = new payload_1.TXIDPayload(cb58str);
        expect(pl.returnType()).toBe(cb58str);
    });
    test("JSONPayload special cases", () => {
        const pl = new payload_1.JSONPayload(jsonobj);
        expect(JSON.stringify(pl.returnType())).toBe(JSON.stringify(jsonobj));
    });
});
//# sourceMappingURL=data:application/json;base64,