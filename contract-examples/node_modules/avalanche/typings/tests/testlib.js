"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestAPI = void 0;
const apibase_1 = require("../src/common/apibase");
class TestAPI extends apibase_1.APIBase {
    constructor(avax, endpoint = "/ext/testing") {
        super(avax, endpoint);
        this.TestGET = (input, path = "", axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () { return this._TestMethod("get", path, { input }, axiosConfig); });
        this.TestDELETE = (input, path = "", axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () { return this._TestMethod("delete", path, { input }, axiosConfig); });
        this.TestPOST = (input, path = "", axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () { return this._TestMethod("post", path, {}, { input }, axiosConfig); });
        this.TestPUT = (input, path = "", axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () { return this._TestMethod("put", path, {}, { input }, axiosConfig); });
        this.TestPATCH = (input, path = "", axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () { return this._TestMethod("patch", path, {}, { input }, axiosConfig); });
        this._respFn = (res) => {
            let response;
            if (typeof res.data === "string") {
                response = JSON.parse(res.data);
            }
            else {
                response = res.data;
            }
            return response.result;
        };
        this._TestMethod = (method, path = "", getdata = {}, postdata = undefined, axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () {
            if (postdata === undefined) {
                const res = yield this.core[method](this.baseURL + path, getdata, {}, axiosConfig);
                return this._respFn(res);
            }
            const res = yield this.core[method](this.baseURL + path, getdata, postdata, {}, axiosConfig);
            res.data = JSON.stringify(res.data); // coverage completeness
            return this._respFn(res);
        });
    }
}
exports.TestAPI = TestAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdGxpYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3RzL3Rlc3RsaWIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBRUEsbURBQW9FO0FBRXBFLE1BQWEsT0FBUSxTQUFRLGlCQUFPO0lBbUVsQyxZQUFZLElBQW1CLEVBQUUsV0FBbUIsY0FBYztRQUNoRSxLQUFLLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBbkV2QixZQUFPLEdBQUcsQ0FDUixLQUFhLEVBQ2IsT0FBZSxFQUFFLEVBQ2pCLGNBQWtDLFNBQVMsRUFDMUIsRUFBRSxnREFBQyxPQUFBLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLFdBQVcsQ0FBQyxDQUFBLEdBQUEsQ0FBQTtRQUMzRSxlQUFVLEdBQUcsQ0FDWCxLQUFhLEVBQ2IsT0FBZSxFQUFFLEVBQ2pCLGNBQWtDLFNBQVMsRUFDMUIsRUFBRSxnREFBQyxPQUFBLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLFdBQVcsQ0FBQyxDQUFBLEdBQUEsQ0FBQTtRQUM5RSxhQUFRLEdBQUcsQ0FDVCxLQUFhLEVBQ2IsT0FBZSxFQUFFLEVBQ2pCLGNBQWtDLFNBQVMsRUFDMUIsRUFBRSxnREFDbkIsT0FBQSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUEsR0FBQSxDQUFBO1FBQzVELFlBQU8sR0FBRyxDQUNSLEtBQWEsRUFDYixPQUFlLEVBQUUsRUFDakIsY0FBa0MsU0FBUyxFQUMxQixFQUFFLGdEQUNuQixPQUFBLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQSxHQUFBLENBQUE7UUFDM0QsY0FBUyxHQUFHLENBQ1YsS0FBYSxFQUNiLE9BQWUsRUFBRSxFQUNqQixjQUFrQyxTQUFTLEVBQzFCLEVBQUUsZ0RBQ25CLE9BQUEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLFdBQVcsQ0FBQyxDQUFBLEdBQUEsQ0FBQTtRQUVuRCxZQUFPLEdBQUcsQ0FBQyxHQUF3QixFQUFPLEVBQUU7WUFDcEQsSUFBSSxRQUFhLENBQUE7WUFDakIsSUFBSSxPQUFPLEdBQUcsQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO2dCQUNoQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7YUFDaEM7aUJBQU07Z0JBQ0wsUUFBUSxHQUFHLEdBQUcsQ0FBQyxJQUFjLENBQUE7YUFDOUI7WUFDRCxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUE7UUFDeEIsQ0FBQyxDQUFBO1FBRVMsZ0JBQVcsR0FBRyxDQUN0QixNQUFjLEVBQ2QsT0FBZSxFQUFFLEVBQ2pCLFVBQWtCLEVBQUUsRUFDcEIsV0FBbUIsU0FBUyxFQUM1QixjQUFrQyxTQUFTLEVBQzFCLEVBQUU7WUFDbkIsSUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFO2dCQUMxQixNQUFNLEdBQUcsR0FBd0IsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUN0RCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksRUFDbkIsT0FBTyxFQUNQLEVBQUUsRUFDRixXQUFXLENBQ1osQ0FBQTtnQkFDRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUE7YUFDekI7WUFDRCxNQUFNLEdBQUcsR0FBd0IsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUN0RCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksRUFDbkIsT0FBTyxFQUNQLFFBQVEsRUFDUixFQUFFLEVBQ0YsV0FBVyxDQUNaLENBQUE7WUFDRCxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUMsd0JBQXdCO1lBQzVELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUMxQixDQUFDLENBQUEsQ0FBQTtJQUlELENBQUM7Q0FDRjtBQXRFRCwwQkFzRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXZhbGFuY2hlQ29yZSBmcm9tIFwiLi4vc3JjL2F2YWxhbmNoZVwiXG5pbXBvcnQgeyBBeGlvc1JlcXVlc3RDb25maWcgfSBmcm9tIFwiYXhpb3NcIlxuaW1wb3J0IHsgQVBJQmFzZSwgUmVxdWVzdFJlc3BvbnNlRGF0YSB9IGZyb20gXCIuLi9zcmMvY29tbW9uL2FwaWJhc2VcIlxuXG5leHBvcnQgY2xhc3MgVGVzdEFQSSBleHRlbmRzIEFQSUJhc2Uge1xuICBUZXN0R0VUID0gYXN5bmMgKFxuICAgIGlucHV0OiBzdHJpbmcsXG4gICAgcGF0aDogc3RyaW5nID0gXCJcIixcbiAgICBheGlvc0NvbmZpZzogQXhpb3NSZXF1ZXN0Q29uZmlnID0gdW5kZWZpbmVkXG4gICk6IFByb21pc2U8b2JqZWN0PiA9PiB0aGlzLl9UZXN0TWV0aG9kKFwiZ2V0XCIsIHBhdGgsIHsgaW5wdXQgfSwgYXhpb3NDb25maWcpXG4gIFRlc3RERUxFVEUgPSBhc3luYyAoXG4gICAgaW5wdXQ6IHN0cmluZyxcbiAgICBwYXRoOiBzdHJpbmcgPSBcIlwiLFxuICAgIGF4aW9zQ29uZmlnOiBBeGlvc1JlcXVlc3RDb25maWcgPSB1bmRlZmluZWRcbiAgKTogUHJvbWlzZTxvYmplY3Q+ID0+IHRoaXMuX1Rlc3RNZXRob2QoXCJkZWxldGVcIiwgcGF0aCwgeyBpbnB1dCB9LCBheGlvc0NvbmZpZylcbiAgVGVzdFBPU1QgPSBhc3luYyAoXG4gICAgaW5wdXQ6IHN0cmluZyxcbiAgICBwYXRoOiBzdHJpbmcgPSBcIlwiLFxuICAgIGF4aW9zQ29uZmlnOiBBeGlvc1JlcXVlc3RDb25maWcgPSB1bmRlZmluZWRcbiAgKTogUHJvbWlzZTxvYmplY3Q+ID0+XG4gICAgdGhpcy5fVGVzdE1ldGhvZChcInBvc3RcIiwgcGF0aCwge30sIHsgaW5wdXQgfSwgYXhpb3NDb25maWcpXG4gIFRlc3RQVVQgPSBhc3luYyAoXG4gICAgaW5wdXQ6IHN0cmluZyxcbiAgICBwYXRoOiBzdHJpbmcgPSBcIlwiLFxuICAgIGF4aW9zQ29uZmlnOiBBeGlvc1JlcXVlc3RDb25maWcgPSB1bmRlZmluZWRcbiAgKTogUHJvbWlzZTxvYmplY3Q+ID0+XG4gICAgdGhpcy5fVGVzdE1ldGhvZChcInB1dFwiLCBwYXRoLCB7fSwgeyBpbnB1dCB9LCBheGlvc0NvbmZpZylcbiAgVGVzdFBBVENIID0gYXN5bmMgKFxuICAgIGlucHV0OiBzdHJpbmcsXG4gICAgcGF0aDogc3RyaW5nID0gXCJcIixcbiAgICBheGlvc0NvbmZpZzogQXhpb3NSZXF1ZXN0Q29uZmlnID0gdW5kZWZpbmVkXG4gICk6IFByb21pc2U8b2JqZWN0PiA9PlxuICAgIHRoaXMuX1Rlc3RNZXRob2QoXCJwYXRjaFwiLCBwYXRoLCB7fSwgeyBpbnB1dCB9LCBheGlvc0NvbmZpZylcblxuICBwcm90ZWN0ZWQgX3Jlc3BGbiA9IChyZXM6IFJlcXVlc3RSZXNwb25zZURhdGEpOiBhbnkgPT4ge1xuICAgIGxldCByZXNwb25zZTogYW55XG4gICAgaWYgKHR5cGVvZiByZXMuZGF0YSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmVzcG9uc2UgPSBKU09OLnBhcnNlKHJlcy5kYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXNwb25zZSA9IHJlcy5kYXRhIGFzIG9iamVjdFxuICAgIH1cbiAgICByZXR1cm4gcmVzcG9uc2UucmVzdWx0XG4gIH1cblxuICBwcm90ZWN0ZWQgX1Rlc3RNZXRob2QgPSBhc3luYyAoXG4gICAgbWV0aG9kOiBzdHJpbmcsXG4gICAgcGF0aDogc3RyaW5nID0gXCJcIixcbiAgICBnZXRkYXRhOiBvYmplY3QgPSB7fSxcbiAgICBwb3N0ZGF0YTogb2JqZWN0ID0gdW5kZWZpbmVkLFxuICAgIGF4aW9zQ29uZmlnOiBBeGlvc1JlcXVlc3RDb25maWcgPSB1bmRlZmluZWRcbiAgKTogUHJvbWlzZTxvYmplY3Q+ID0+IHtcbiAgICBpZiAocG9zdGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgcmVzOiBSZXF1ZXN0UmVzcG9uc2VEYXRhID0gYXdhaXQgdGhpcy5jb3JlW21ldGhvZF0oXG4gICAgICAgIHRoaXMuYmFzZVVSTCArIHBhdGgsXG4gICAgICAgIGdldGRhdGEsXG4gICAgICAgIHt9LFxuICAgICAgICBheGlvc0NvbmZpZ1xuICAgICAgKVxuICAgICAgcmV0dXJuIHRoaXMuX3Jlc3BGbihyZXMpXG4gICAgfVxuICAgIGNvbnN0IHJlczogUmVxdWVzdFJlc3BvbnNlRGF0YSA9IGF3YWl0IHRoaXMuY29yZVttZXRob2RdKFxuICAgICAgdGhpcy5iYXNlVVJMICsgcGF0aCxcbiAgICAgIGdldGRhdGEsXG4gICAgICBwb3N0ZGF0YSxcbiAgICAgIHt9LFxuICAgICAgYXhpb3NDb25maWdcbiAgICApXG4gICAgcmVzLmRhdGEgPSBKU09OLnN0cmluZ2lmeShyZXMuZGF0YSkgLy8gY292ZXJhZ2UgY29tcGxldGVuZXNzXG4gICAgcmV0dXJuIHRoaXMuX3Jlc3BGbihyZXMpXG4gIH1cblxuICBjb25zdHJ1Y3RvcihhdmF4OiBBdmFsYW5jaGVDb3JlLCBlbmRwb2ludDogc3RyaW5nID0gXCIvZXh0L3Rlc3RpbmdcIikge1xuICAgIHN1cGVyKGF2YXgsIGVuZHBvaW50KVxuICB9XG59XG4iXX0=