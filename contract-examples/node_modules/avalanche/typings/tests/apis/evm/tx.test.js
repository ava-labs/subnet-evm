"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const evm_1 = require("../../../src/apis/evm");
const constants_1 = require("../../../src/utils/constants");
const constants_2 = require("../../../src/utils/constants");
const evm_2 = require("../../../src/apis/evm");
const bn_js_1 = __importDefault(require("bn.js"));
const src_1 = require("src");
const networkID = 1337;
const cHexAddress1 = "0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC";
const bintools = src_1.BinTools.getInstance();
const cHexAddress2 = "0xecC3B2968B277b837a81A7181e0b94EB1Ca54EdE";
const antAssetID = "F4MyJcUvq3Rxbqgd4Zs8sUpvwLHApyrp4yxJXe2bAV86Vvp38";
const avaxAssetID = constants_1.Defaults.network[networkID].X.avaxAssetID;
const txID = "QVb7DtKjcwVYLFWHgnGSdzQtQSc29KeRBYFNCBnbFu6dFqX7z";
const blockchainID = constants_1.Defaults.network[networkID].C.blockchainID;
const sourcechainID = constants_1.Defaults.network[networkID].X.blockchainID;
let evmOutputs;
let importedIns;
const fee = constants_1.Defaults.network[networkID].C.txFee;
beforeEach(() => {
    evmOutputs = [];
    importedIns = [];
});
describe("EVM Transactions", () => {
    describe("ImportTx", () => {
        test("Multiple AVAX EVMOutput fail", () => {
            const outputidx = src_1.Buffer.from("");
            const input = new evm_1.SECPTransferInput(constants_2.ONEAVAX);
            const xferin = new evm_1.TransferableInput(bintools.cb58Decode(txID), outputidx, bintools.cb58Decode(avaxAssetID), input);
            importedIns.push(xferin);
            // Creating 2 outputs with the same address and AVAX assetID is invalid
            let evmOutput = new evm_2.EVMOutput(cHexAddress1, constants_2.ONEAVAX, avaxAssetID);
            evmOutputs.push(evmOutput);
            evmOutput = new evm_2.EVMOutput(cHexAddress1, constants_2.ONEAVAX, avaxAssetID);
            evmOutputs.push(evmOutput);
            expect(() => {
                new evm_1.ImportTx(networkID, bintools.cb58Decode(blockchainID), bintools.cb58Decode(sourcechainID), importedIns, evmOutputs);
            }).toThrow("Error - ImportTx: duplicate (address, assetId) pair found in outputs: (0x8db97c7cece249c2b98bdc0226cc4c2a57bf52fc, BUuypiq2wyuLMvyhzFXcPyxPMCgSp7eeDohhQRqTChoBjKziC)");
        });
        test("Multiple AVAX EVMOutput success", () => {
            const outputidx = src_1.Buffer.from("");
            const input = new evm_1.SECPTransferInput(constants_2.ONEAVAX);
            const xferin = new evm_1.TransferableInput(bintools.cb58Decode(txID), outputidx, bintools.cb58Decode(avaxAssetID), input);
            importedIns.push(xferin);
            // Creating 2 outputs with different addresses valid
            let evmOutput = new evm_2.EVMOutput(cHexAddress1, constants_2.ONEAVAX.div(new bn_js_1.default(3)), avaxAssetID);
            evmOutputs.push(evmOutput);
            evmOutput = new evm_2.EVMOutput(cHexAddress2, constants_2.ONEAVAX.div(new bn_js_1.default(3)), avaxAssetID);
            evmOutputs.push(evmOutput);
            const importTx = new evm_1.ImportTx(networkID, bintools.cb58Decode(blockchainID), bintools.cb58Decode(sourcechainID), importedIns, evmOutputs);
            expect(importTx).toBeInstanceOf(evm_1.ImportTx);
            expect(importTx.getSourceChain().toString("hex")).toBe(bintools.cb58Decode(sourcechainID).toString("hex"));
        });
        test("Multiple ANT EVMOutput fail", () => {
            const outputidx = src_1.Buffer.from("");
            const input = new evm_1.SECPTransferInput(new bn_js_1.default(507));
            const xferin = new evm_1.TransferableInput(bintools.cb58Decode(txID), outputidx, bintools.cb58Decode(avaxAssetID), input);
            importedIns.push(xferin);
            // Creating 2 outputs with the same address and ANT assetID is invalid
            let evmOutput = new evm_2.EVMOutput(cHexAddress1, constants_2.ONEAVAX, antAssetID);
            evmOutputs.push(evmOutput);
            evmOutput = new evm_2.EVMOutput(cHexAddress1, constants_2.ONEAVAX, antAssetID);
            evmOutputs.push(evmOutput);
            expect(() => {
                new evm_1.ImportTx(networkID, bintools.cb58Decode(blockchainID), bintools.cb58Decode(sourcechainID), importedIns, evmOutputs);
            }).toThrow("Error - ImportTx: duplicate (address, assetId) pair found in outputs: (0x8db97c7cece249c2b98bdc0226cc4c2a57bf52fc, F4MyJcUvq3Rxbqgd4Zs8sUpvwLHApyrp4yxJXe2bAV86Vvp38)");
        });
        test("Multiple ANT EVMOutput success", () => {
            const outputidx = src_1.Buffer.from("");
            const input = new evm_1.SECPTransferInput(fee);
            const xferin = new evm_1.TransferableInput(bintools.cb58Decode(txID), outputidx, bintools.cb58Decode(avaxAssetID), input);
            importedIns.push(xferin);
            let evmOutput = new evm_2.EVMOutput(cHexAddress1, constants_2.ONEAVAX, antAssetID);
            evmOutputs.push(evmOutput);
            evmOutput = new evm_2.EVMOutput(cHexAddress2, constants_2.ONEAVAX, antAssetID);
            evmOutputs.push(evmOutput);
            const importTx = new evm_1.ImportTx(networkID, bintools.cb58Decode(blockchainID), bintools.cb58Decode(sourcechainID), importedIns, evmOutputs);
            expect(importTx).toBeInstanceOf(evm_1.ImportTx);
        });
        test("Single ANT EVMOutput fail", () => {
            const outputidx = src_1.Buffer.from("");
            const input = new evm_1.SECPTransferInput(new bn_js_1.default(0));
            const xferin = new evm_1.TransferableInput(bintools.cb58Decode(txID), outputidx, bintools.cb58Decode(avaxAssetID), input);
            importedIns.push(xferin);
            // If the output is a non-avax assetID then don't subtract a fee
            const evmOutput = new evm_2.EVMOutput(cHexAddress1, constants_2.ONEAVAX, antAssetID);
            evmOutputs.push(evmOutput);
            const baseFee = new bn_js_1.default(25000000000);
            expect(() => {
                new evm_1.ImportTx(networkID, bintools.cb58Decode(blockchainID), bintools.cb58Decode(sourcechainID), importedIns, evmOutputs, baseFee);
            }).toThrow("Error - 25000000000 nAVAX required for fee and only 0 nAVAX provided");
        });
        test("Single ANT EVMOutput success", () => {
            const outputidx = src_1.Buffer.from("");
            const input = new evm_1.SECPTransferInput(constants_2.ONEAVAX);
            const xferin = new evm_1.TransferableInput(bintools.cb58Decode(txID), outputidx, bintools.cb58Decode(avaxAssetID), input);
            importedIns.push(xferin);
            const evmOutput = new evm_2.EVMOutput(cHexAddress1, constants_2.ONEAVAX, antAssetID);
            evmOutputs.push(evmOutput);
            const importTx = new evm_1.ImportTx(networkID, bintools.cb58Decode(blockchainID), bintools.cb58Decode(sourcechainID), importedIns, evmOutputs);
            expect(importTx).toBeInstanceOf(evm_1.ImportTx);
        });
        test("Single AVAX EVMOutput fail", () => {
            const outputidx = src_1.Buffer.from("");
            const input = new evm_1.SECPTransferInput(new bn_js_1.default(507));
            const xferin = new evm_1.TransferableInput(bintools.cb58Decode(txID), outputidx, bintools.cb58Decode(avaxAssetID), input);
            importedIns.push(xferin);
            const evmOutput = new evm_2.EVMOutput(cHexAddress1, new bn_js_1.default(0), avaxAssetID);
            evmOutputs.push(evmOutput);
            const baseFee = new bn_js_1.default(25000000000);
            expect(() => {
                new evm_1.ImportTx(networkID, bintools.cb58Decode(blockchainID), bintools.cb58Decode(sourcechainID), importedIns, evmOutputs, baseFee);
            }).toThrow("Error - 25000000000 nAVAX required for fee and only 507 nAVAX provided");
        });
        test("Single AVAX EVMOutput success", () => {
            const outputidx = src_1.Buffer.from("");
            const input = new evm_1.SECPTransferInput(constants_2.ONEAVAX);
            const xferin = new evm_1.TransferableInput(bintools.cb58Decode(txID), outputidx, bintools.cb58Decode(avaxAssetID), input);
            importedIns.push(xferin);
            const evmOutput = new evm_2.EVMOutput(cHexAddress1, constants_2.ONEAVAX.sub(constants_1.MILLIAVAX), avaxAssetID);
            evmOutputs.push(evmOutput);
            const importTx = new evm_1.ImportTx(networkID, bintools.cb58Decode(blockchainID), bintools.cb58Decode(sourcechainID), importedIns, evmOutputs);
            expect(importTx).toBeInstanceOf(evm_1.ImportTx);
        });
    });
    describe("ExportTx", () => {
        test("getDestinationChain", () => {
            const exportTx = new evm_1.ExportTx(networkID, bintools.cb58Decode(blockchainID), bintools.cb58Decode(constants_1.PlatformChainID));
            expect(exportTx).toBeInstanceOf(evm_1.ExportTx);
            expect(exportTx.getDestinationChain().toString("hex")).toBe(bintools.cb58Decode(constants_1.PlatformChainID).toString("hex"));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,