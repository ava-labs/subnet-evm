"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const buffer_1 = require("buffer/");
const constants_1 = require("../../../src/apis/platformvm/constants");
const platformvm_1 = require("src/apis/platformvm");
describe("CreateSubnetTx", () => {
    const createSubnetTxHex = "0000053900000000000000000000000000000000000000000000000000000000000000000000000117cc8b1578ba383544d163958822d8abd3849bb9dfabe39fcbc3e7ee8811fe2f00000007006a94d69c2656c0000000000000000000000001000000023cb7d3842e8cee6a0ebd09f1fe884f6861e1b29ca43c1f6ecdcb1fcec86d78446b9cf619c64c604b00000001ec7f57aeda7824b9d785e5ca631d96ef7323988a9fcfc6832cbc73ac4b27f7040000000017cc8b1578ba383544d163958822d8abd3849bb9dfabe39fcbc3e7ee8811fe2f00000005006a94d6d7c120c00000000100000000000000594d616e75616c6c79206372656174652061204372656174655375626e657454782077686963682063726561746573206120312d6f662d322041564158207574786f20616e64206120322d6f662d33205375626e6574417574680000000b000000000000000000000002000000035c412ef1414c4903c49dffc0ba9286c47fa27689a43c1f6ecdcb1fcec86d78446b9cf619c64c604be6b2bba9288c499d477327292839728ab52e902c";
    const createSubnetTxBuf = buffer_1.Buffer.from(createSubnetTxHex, "hex");
    const createSubnetTx = new platformvm_1.CreateSubnetTx();
    createSubnetTx.fromBuffer(createSubnetTxBuf);
    test("getTypeName", () => __awaiter(void 0, void 0, void 0, function* () {
        const createSubnetTxTypeName = createSubnetTx.getTypeName();
        expect(createSubnetTxTypeName).toBe("CreateSubnetTx");
    }));
    test("getTypeID", () => __awaiter(void 0, void 0, void 0, function* () {
        const createSubnetTxTypeID = createSubnetTx.getTypeID();
        expect(createSubnetTxTypeID).toBe(constants_1.PlatformVMConstants.CREATESUBNETTX);
    }));
    test("toBuffer and fromBuffer", () => __awaiter(void 0, void 0, void 0, function* () {
        const buf = createSubnetTx.toBuffer();
        const csTx = new platformvm_1.CreateSubnetTx();
        csTx.fromBuffer(buf);
        const buf2 = csTx.toBuffer();
        expect(buf.toString("hex")).toBe(buf2.toString("hex"));
    }));
    describe("SubnetOwners", () => {
        const subnetOwners = createSubnetTx.getSubnetOwners();
        test("getTypeName", () => __awaiter(void 0, void 0, void 0, function* () {
            const subnetOwnersTypeName = subnetOwners.getTypeName();
            expect(subnetOwnersTypeName).toBe("SECPOwnerOutput");
        }));
        test("getTypeID", () => __awaiter(void 0, void 0, void 0, function* () {
            const subnetOwnersTypeID = subnetOwners.getTypeID();
            expect(subnetOwnersTypeID).toBe(constants_1.PlatformVMConstants.SECPOWNEROUTPUTID);
        }));
        test("getOutputID", () => __awaiter(void 0, void 0, void 0, function* () {
            const outputID = subnetOwners.getOutputID();
            expect(outputID).toBe(constants_1.PlatformVMConstants.SECPOWNEROUTPUTID);
        }));
        test("get addresses", () => __awaiter(void 0, void 0, void 0, function* () {
            const addresses = subnetOwners.getAddresses();
            expect(addresses.length).toBe(3);
        }));
        test("get threshold", () => __awaiter(void 0, void 0, void 0, function* () {
            const threshold = subnetOwners.getThreshold();
            expect(threshold).toBe(2);
        }));
        test("get locktime", () => __awaiter(void 0, void 0, void 0, function* () {
            const locktime = subnetOwners.getLocktime();
            expect(locktime.toNumber()).toBe(0);
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlc3VibmV0dHgudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Rlc3RzL2FwaXMvcGxhdGZvcm12bS9jcmVhdGVzdWJuZXR0eC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0Esb0NBQWdDO0FBRWhDLHNFQUE0RTtBQUM1RSxvREFBb0Q7QUFFcEQsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQVMsRUFBRTtJQUNwQyxNQUFNLGlCQUFpQixHQUNyQiw0eUJBQTR5QixDQUFBO0lBQzl5QixNQUFNLGlCQUFpQixHQUFXLGVBQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLENBQUE7SUFDdkUsTUFBTSxjQUFjLEdBQW1CLElBQUksMkJBQWMsRUFBRSxDQUFBO0lBQzNELGNBQWMsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtJQUU1QyxJQUFJLENBQUMsYUFBYSxFQUFFLEdBQXdCLEVBQUU7UUFDNUMsTUFBTSxzQkFBc0IsR0FBVyxjQUFjLENBQUMsV0FBVyxFQUFFLENBQUE7UUFDbkUsTUFBTSxDQUFDLHNCQUFzQixDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUE7SUFDdkQsQ0FBQyxDQUFBLENBQUMsQ0FBQTtJQUVGLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBd0IsRUFBRTtRQUMxQyxNQUFNLG9CQUFvQixHQUFXLGNBQWMsQ0FBQyxTQUFTLEVBQUUsQ0FBQTtRQUMvRCxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxJQUFJLENBQUMsK0JBQW1CLENBQUMsY0FBYyxDQUFDLENBQUE7SUFDdkUsQ0FBQyxDQUFBLENBQUMsQ0FBQTtJQUVGLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxHQUF3QixFQUFFO1FBQ3hELE1BQU0sR0FBRyxHQUFXLGNBQWMsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtRQUM3QyxNQUFNLElBQUksR0FBbUIsSUFBSSwyQkFBYyxFQUFFLENBQUE7UUFDakQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNwQixNQUFNLElBQUksR0FBVyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUE7UUFDcEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBQ3hELENBQUMsQ0FBQSxDQUFDLENBQUE7SUFFRixRQUFRLENBQUMsY0FBYyxFQUFFLEdBQVMsRUFBRTtRQUNsQyxNQUFNLFlBQVksR0FBb0IsY0FBYyxDQUFDLGVBQWUsRUFBRSxDQUFBO1FBRXRFLElBQUksQ0FBQyxhQUFhLEVBQUUsR0FBd0IsRUFBRTtZQUM1QyxNQUFNLG9CQUFvQixHQUFXLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtZQUMvRCxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtRQUN0RCxDQUFDLENBQUEsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLFdBQVcsRUFBRSxHQUF3QixFQUFFO1lBQzFDLE1BQU0sa0JBQWtCLEdBQVcsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFBO1lBQzNELE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLElBQUksQ0FBQywrQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1FBQ3hFLENBQUMsQ0FBQSxDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsYUFBYSxFQUFFLEdBQXdCLEVBQUU7WUFDNUMsTUFBTSxRQUFRLEdBQVcsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFBO1lBQ25ELE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsK0JBQW1CLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtRQUM5RCxDQUFDLENBQUEsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLGVBQWUsRUFBRSxHQUF3QixFQUFFO1lBQzlDLE1BQU0sU0FBUyxHQUFhLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQTtZQUN2RCxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNsQyxDQUFDLENBQUEsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLGVBQWUsRUFBRSxHQUF3QixFQUFFO1lBQzlDLE1BQU0sU0FBUyxHQUFXLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQTtZQUNyRCxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQzNCLENBQUMsQ0FBQSxDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsY0FBYyxFQUFFLEdBQXdCLEVBQUU7WUFDN0MsTUFBTSxRQUFRLEdBQU8sWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFBO1lBQy9DLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDckMsQ0FBQyxDQUFBLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQk4gZnJvbSBcImJuLmpzXCJcbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gXCJidWZmZXIvXCJcbmltcG9ydCB7IFNFQ1BPd25lck91dHB1dCB9IGZyb20gXCIuLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL291dHB1dHNcIlxuaW1wb3J0IHsgUGxhdGZvcm1WTUNvbnN0YW50cyB9IGZyb20gXCIuLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL2NvbnN0YW50c1wiXG5pbXBvcnQgeyBDcmVhdGVTdWJuZXRUeCB9IGZyb20gXCJzcmMvYXBpcy9wbGF0Zm9ybXZtXCJcblxuZGVzY3JpYmUoXCJDcmVhdGVTdWJuZXRUeFwiLCAoKTogdm9pZCA9PiB7XG4gIGNvbnN0IGNyZWF0ZVN1Ym5ldFR4SGV4OiBzdHJpbmcgPVxuICAgIFwiMDAwMDA1MzkwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExN2NjOGIxNTc4YmEzODM1NDRkMTYzOTU4ODIyZDhhYmQzODQ5YmI5ZGZhYmUzOWZjYmMzZTdlZTg4MTFmZTJmMDAwMDAwMDcwMDZhOTRkNjljMjY1NmMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDIzY2I3ZDM4NDJlOGNlZTZhMGViZDA5ZjFmZTg4NGY2ODYxZTFiMjljYTQzYzFmNmVjZGNiMWZjZWM4NmQ3ODQ0NmI5Y2Y2MTljNjRjNjA0YjAwMDAwMDAxZWM3ZjU3YWVkYTc4MjRiOWQ3ODVlNWNhNjMxZDk2ZWY3MzIzOTg4YTlmY2ZjNjgzMmNiYzczYWM0YjI3ZjcwNDAwMDAwMDAwMTdjYzhiMTU3OGJhMzgzNTQ0ZDE2Mzk1ODgyMmQ4YWJkMzg0OWJiOWRmYWJlMzlmY2JjM2U3ZWU4ODExZmUyZjAwMDAwMDA1MDA2YTk0ZDZkN2MxMjBjMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDA1OTRkNjE2ZTc1NjE2YzZjNzkyMDYzNzI2NTYxNzQ2NTIwNjEyMDQzNzI2NTYxNzQ2NTUzNzU2MjZlNjU3NDU0NzgyMDc3Njg2OTYzNjgyMDYzNzI2NTYxNzQ2NTczMjA2MTIwMzEyZDZmNjYyZDMyMjA0MTU2NDE1ODIwNzU3NDc4NmYyMDYxNmU2NDIwNjEyMDMyMmQ2ZjY2MmQzMzIwNTM3NTYyNmU2NTc0NDE3NTc0NjgwMDAwMDAwYjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjAwMDAwMDAzNWM0MTJlZjE0MTRjNDkwM2M0OWRmZmMwYmE5Mjg2YzQ3ZmEyNzY4OWE0M2MxZjZlY2RjYjFmY2VjODZkNzg0NDZiOWNmNjE5YzY0YzYwNGJlNmIyYmJhOTI4OGM0OTlkNDc3MzI3MjkyODM5NzI4YWI1MmU5MDJjXCJcbiAgY29uc3QgY3JlYXRlU3VibmV0VHhCdWY6IEJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGNyZWF0ZVN1Ym5ldFR4SGV4LCBcImhleFwiKVxuICBjb25zdCBjcmVhdGVTdWJuZXRUeDogQ3JlYXRlU3VibmV0VHggPSBuZXcgQ3JlYXRlU3VibmV0VHgoKVxuICBjcmVhdGVTdWJuZXRUeC5mcm9tQnVmZmVyKGNyZWF0ZVN1Ym5ldFR4QnVmKVxuXG4gIHRlc3QoXCJnZXRUeXBlTmFtZVwiLCBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgY29uc3QgY3JlYXRlU3VibmV0VHhUeXBlTmFtZTogc3RyaW5nID0gY3JlYXRlU3VibmV0VHguZ2V0VHlwZU5hbWUoKVxuICAgIGV4cGVjdChjcmVhdGVTdWJuZXRUeFR5cGVOYW1lKS50b0JlKFwiQ3JlYXRlU3VibmV0VHhcIilcbiAgfSlcblxuICB0ZXN0KFwiZ2V0VHlwZUlEXCIsIGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBjb25zdCBjcmVhdGVTdWJuZXRUeFR5cGVJRDogbnVtYmVyID0gY3JlYXRlU3VibmV0VHguZ2V0VHlwZUlEKClcbiAgICBleHBlY3QoY3JlYXRlU3VibmV0VHhUeXBlSUQpLnRvQmUoUGxhdGZvcm1WTUNvbnN0YW50cy5DUkVBVEVTVUJORVRUWClcbiAgfSlcblxuICB0ZXN0KFwidG9CdWZmZXIgYW5kIGZyb21CdWZmZXJcIiwgYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGNvbnN0IGJ1ZjogQnVmZmVyID0gY3JlYXRlU3VibmV0VHgudG9CdWZmZXIoKVxuICAgIGNvbnN0IGNzVHg6IENyZWF0ZVN1Ym5ldFR4ID0gbmV3IENyZWF0ZVN1Ym5ldFR4KClcbiAgICBjc1R4LmZyb21CdWZmZXIoYnVmKVxuICAgIGNvbnN0IGJ1ZjI6IEJ1ZmZlciA9IGNzVHgudG9CdWZmZXIoKVxuICAgIGV4cGVjdChidWYudG9TdHJpbmcoXCJoZXhcIikpLnRvQmUoYnVmMi50b1N0cmluZyhcImhleFwiKSlcbiAgfSlcblxuICBkZXNjcmliZShcIlN1Ym5ldE93bmVyc1wiLCAoKTogdm9pZCA9PiB7XG4gICAgY29uc3Qgc3VibmV0T3duZXJzOiBTRUNQT3duZXJPdXRwdXQgPSBjcmVhdGVTdWJuZXRUeC5nZXRTdWJuZXRPd25lcnMoKVxuXG4gICAgdGVzdChcImdldFR5cGVOYW1lXCIsIGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAgIGNvbnN0IHN1Ym5ldE93bmVyc1R5cGVOYW1lOiBzdHJpbmcgPSBzdWJuZXRPd25lcnMuZ2V0VHlwZU5hbWUoKVxuICAgICAgZXhwZWN0KHN1Ym5ldE93bmVyc1R5cGVOYW1lKS50b0JlKFwiU0VDUE93bmVyT3V0cHV0XCIpXG4gICAgfSlcblxuICAgIHRlc3QoXCJnZXRUeXBlSURcIiwgYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgICAgY29uc3Qgc3VibmV0T3duZXJzVHlwZUlEOiBudW1iZXIgPSBzdWJuZXRPd25lcnMuZ2V0VHlwZUlEKClcbiAgICAgIGV4cGVjdChzdWJuZXRPd25lcnNUeXBlSUQpLnRvQmUoUGxhdGZvcm1WTUNvbnN0YW50cy5TRUNQT1dORVJPVVRQVVRJRClcbiAgICB9KVxuXG4gICAgdGVzdChcImdldE91dHB1dElEXCIsIGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAgIGNvbnN0IG91dHB1dElEOiBudW1iZXIgPSBzdWJuZXRPd25lcnMuZ2V0T3V0cHV0SUQoKVxuICAgICAgZXhwZWN0KG91dHB1dElEKS50b0JlKFBsYXRmb3JtVk1Db25zdGFudHMuU0VDUE9XTkVST1VUUFVUSUQpXG4gICAgfSlcblxuICAgIHRlc3QoXCJnZXQgYWRkcmVzc2VzXCIsIGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAgIGNvbnN0IGFkZHJlc3NlczogQnVmZmVyW10gPSBzdWJuZXRPd25lcnMuZ2V0QWRkcmVzc2VzKClcbiAgICAgIGV4cGVjdChhZGRyZXNzZXMubGVuZ3RoKS50b0JlKDMpXG4gICAgfSlcblxuICAgIHRlc3QoXCJnZXQgdGhyZXNob2xkXCIsIGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAgIGNvbnN0IHRocmVzaG9sZDogbnVtYmVyID0gc3VibmV0T3duZXJzLmdldFRocmVzaG9sZCgpXG4gICAgICBleHBlY3QodGhyZXNob2xkKS50b0JlKDIpXG4gICAgfSlcblxuICAgIHRlc3QoXCJnZXQgbG9ja3RpbWVcIiwgYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgICAgY29uc3QgbG9ja3RpbWU6IEJOID0gc3VibmV0T3duZXJzLmdldExvY2t0aW1lKClcbiAgICAgIGV4cGVjdChsb2NrdGltZS50b051bWJlcigpKS50b0JlKDApXG4gICAgfSlcbiAgfSlcbn0pXG4iXX0=