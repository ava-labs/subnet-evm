"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bintools_1 = __importDefault(require("../../../src/utils/bintools"));
const buffer_1 = require("buffer/");
const constants_1 = require("../../../src/apis/platformvm/constants");
const index_1 = require("../../../src/index");
const platformvm_1 = require("src/apis/platformvm");
describe("CreateChainTx", () => {
    /**
     * @ignore
     */
    const bintools = bintools_1.default.getInstance();
    const createChainTxHex = "0000053900000000000000000000000000000000000000000000000000000000000000000000000117cc8b1578ba383544d163958822d8abd3849bb9dfabe39fcbc3e7ee8811fe2f00000007006a94d6d80d6c00000000000000000000000001000000023cb7d3842e8cee6a0ebd09f1fe884f6861e1b29ca43c1f6ecdcb1fcec86d78446b9cf619c64c604b000000017fe044f9e97347c0a5ffe5a0f5773b42398c0e2b85948616da681585d460e1a80000000017cc8b1578ba383544d163958822d8abd3849bb9dfabe39fcbc3e7ee8811fe2f00000005006a94d713a836000000000100000000000000934d616e75616c6c7920637265617465206120437265617465436861696e54782077686963682063726561746573206120312d6f662d322041564158207574786f20616e6420696e7374616e746961746573206120564d20696e746f206120626c6f636b636861696e20627920636f72726563746c79207369676e696e672074686520322d6f662d33205375626e6574417574687fe044f9e97347c0a5ffe5a0f5773b42398c0e2b85948616da681585d460e1a80008455049432041564d61766d0000000000000000000000000000000000000000000000000000000000000000036e6674667800000000000000000000000000000000000000000000000000000070726f7065727479667800000000000000000000000000000000000000000000736563703235366b3166780000000000000000000000000000000000000000000000013c000000000001000e4173736574416c696173546573740000053900000000000000000000000000000000000000000000000000000000000000000000000000000000000000934d616e75616c6c7920637265617465206120437265617465436861696e54782077686963682063726561746573206120312d6f662d322041564158207574786f20616e6420696e7374616e746961746573206120564d20696e746f206120626c6f636b636861696e20627920636f72726563746c79207369676e696e672074686520322d6f662d33205375626e657441757468000a54657374204173736574000454455354000000000100000000000000010000000700000000000001fb000000000000000000000001000000023cb7d3842e8cee6a0ebd09f1fe884f6861e1b29ca43c1f6ecdcb1fcec86d78446b9cf619c64c604b0000000a000000020000000000000001";
    const createChainTxBuf = buffer_1.Buffer.from(createChainTxHex, "hex");
    const createChainTx = new platformvm_1.CreateChainTx();
    createChainTx.fromBuffer(createChainTxBuf);
    test("getTypeName", () => __awaiter(void 0, void 0, void 0, function* () {
        const createChainTxTypeName = createChainTx.getTypeName();
        expect(createChainTxTypeName).toBe("CreateChainTx");
    }));
    test("getTypeID", () => __awaiter(void 0, void 0, void 0, function* () {
        const createChainTxTypeID = createChainTx.getTypeID();
        expect(createChainTxTypeID).toBe(constants_1.PlatformVMConstants.CREATECHAINTX);
    }));
    test("toBuffer and fromBuffer", () => __awaiter(void 0, void 0, void 0, function* () {
        const buf = createChainTx.toBuffer();
        const ccTx = new platformvm_1.CreateChainTx();
        ccTx.fromBuffer(buf);
        const buf2 = ccTx.toBuffer();
        expect(buf.toString("hex")).toBe(buf2.toString("hex"));
    }));
    test("getSubnetID", () => {
        const snID = "yKRV4EvGYWj7HHXUxSYzaAQVazEvaFPKPhJie4paqbrML5dub";
        const subnetID = createChainTx.getSubnetID();
        expect(subnetID).toBe(snID);
    });
    test("getChainName", () => {
        const cn = "EPIC AVM";
        const chainName = createChainTx.getChainName();
        expect(chainName).toBe(cn);
    });
    test("getVMID", () => {
        const vmIDHex = "61766d0000000000000000000000000000000000000000000000000000000000";
        const vmID = createChainTx.getVMID().toString("hex");
        expect(vmID).toBe(vmIDHex);
    });
    test("getFXIDs", () => {
        const fxIDsHex = [
            "6e66746678000000000000000000000000000000000000000000000000000000",
            "70726f7065727479667800000000000000000000000000000000000000000000",
            "736563703235366b316678000000000000000000000000000000000000000000"
        ];
        const fxIDs = createChainTx.getFXIDs();
        expect(fxIDs.length).toBe(3);
        fxIDs.forEach((fxID, index) => {
            expect(fxID.toString("hex")).toBe(fxIDsHex[index]);
        });
    });
    test("getGenesisData", () => {
        const gd = createChainTx.getGenesisData();
        const genesisData = new index_1.GenesisData();
        const buf = bintools.cb58Decode(gd);
        genesisData.fromBuffer(buf);
        const genesisAssets = genesisData.getGenesisAssets();
        const genesisAsset = genesisAssets[0];
        const n = "Test Asset";
        const name = genesisAsset.getName();
        expect(name).toBe(n);
        const s = "TEST";
        const symbol = genesisAsset.getSymbol();
        expect(symbol).toBe(s);
        const d = 0;
        const denomination = genesisAsset.getDenomination();
        expect(denomination).toBe(d);
    });
    describe("SubnetAuth", () => {
        const sa = createChainTx.getSubnetAuth();
        test("getTypeName", () => __awaiter(void 0, void 0, void 0, function* () {
            const subnetAuthTypeName = sa.getTypeName();
            expect(subnetAuthTypeName).toBe("SubnetAuth");
        }));
        test("getTypeID", () => __awaiter(void 0, void 0, void 0, function* () {
            const subnetAuthTypeID = sa.getTypeID();
            expect(subnetAuthTypeID).toBe(constants_1.PlatformVMConstants.SUBNETAUTH);
        }));
        test("getNumAddressIndices", () => __awaiter(void 0, void 0, void 0, function* () {
            const numAddressIndices = sa.getNumAddressIndices();
            const nAI = 2;
            expect(numAddressIndices).toBe(nAI);
        }));
        test("addressIndices", () => __awaiter(void 0, void 0, void 0, function* () {
            const ai = [0, 1];
            const addressIndices = sa.getAddressIndices();
            addressIndices.forEach((addressIndex, index) => {
                expect(addressIndex.readInt32BE(0)).toBe(ai[index]);
            });
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,