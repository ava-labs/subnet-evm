"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bintools_1 = __importDefault(require("../../../src/utils/bintools"));
const bn_js_1 = __importDefault(require("bn.js"));
const avm_1 = require("src/apis/avm");
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
describe("Vertex", () => {
    beforeEach(() => { });
    describe("constructor", () => {
        const networkID = 1;
        const blockchainID = "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM";
        const height = new bn_js_1.default(12345);
        const epoch = 0;
        const parentIDBuf = bintools.cb58Decode("2HCoR1WzY3TEFipaxeyXhnKa4MYTjfUc4zN5SFhZHoTJGquVfp");
        const parentIDs = [parentIDBuf];
        const txs = [];
        const vertex = new avm_1.Vertex(networkID, blockchainID, height, epoch, parentIDs, txs);
        test("getNetworkID", () => {
            const nID = vertex.getNetworkID();
            expect(nID).toBe(networkID);
        });
        test("getBlockchainID", () => {
            const bID = vertex.getBlockchainID();
            expect(bID).toBe(blockchainID);
        });
        test("getHeight", () => {
            const h = vertex.getHeight();
            expect(h).toBe(height);
        });
        test("getEpoch", () => {
            const e = vertex.getEpoch();
            expect(e).toBe(epoch);
        });
        test("getParentIDs", () => {
            const pIDs = vertex.getParentIDs();
            expect(pIDs).toEqual(parentIDs);
        });
        test("getTxs", () => {
            const t = vertex.getTxs();
            expect(t).toBe(txs);
        });
        test("toBuffer", () => {
            const b = vertex.toBuffer();
            const v = new avm_1.Vertex();
            v.fromBuffer(b);
            expect(v.toBuffer().toString("hex")).toEqual(vertex.toBuffer().toString("hex"));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVydGV4LnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90ZXN0cy9hcGlzL2F2bS92ZXJ0ZXgudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDJFQUFrRDtBQUNsRCxrREFBc0I7QUFFdEIsc0NBQXlDO0FBRXpDOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQWEsa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtBQUVqRCxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQVMsRUFBRTtJQUM1QixVQUFVLENBQUMsR0FBUyxFQUFFLEdBQUUsQ0FBQyxDQUFDLENBQUE7SUFDMUIsUUFBUSxDQUFDLGFBQWEsRUFBRSxHQUFTLEVBQUU7UUFDakMsTUFBTSxTQUFTLEdBQVcsQ0FBQyxDQUFBO1FBQzNCLE1BQU0sWUFBWSxHQUNoQixvREFBb0QsQ0FBQTtRQUN0RCxNQUFNLE1BQU0sR0FBTyxJQUFJLGVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUNoQyxNQUFNLEtBQUssR0FBVyxDQUFDLENBQUE7UUFDdkIsTUFBTSxXQUFXLEdBQVcsUUFBUSxDQUFDLFVBQVUsQ0FDN0Msb0RBQW9ELENBQ3JELENBQUE7UUFDRCxNQUFNLFNBQVMsR0FBYSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQ3pDLE1BQU0sR0FBRyxHQUFTLEVBQUUsQ0FBQTtRQUVwQixNQUFNLE1BQU0sR0FBVyxJQUFJLFlBQU0sQ0FDL0IsU0FBUyxFQUNULFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLFNBQVMsRUFDVCxHQUFHLENBQ0osQ0FBQTtRQUVELElBQUksQ0FBQyxjQUFjLEVBQUUsR0FBUyxFQUFFO1lBQzlCLE1BQU0sR0FBRyxHQUFXLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQTtZQUN6QyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQzdCLENBQUMsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLGlCQUFpQixFQUFFLEdBQVMsRUFBRTtZQUNqQyxNQUFNLEdBQUcsR0FBVyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUE7WUFDNUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUNoQyxDQUFDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBUyxFQUFFO1lBQzNCLE1BQU0sQ0FBQyxHQUFPLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQTtZQUNoQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3hCLENBQUMsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFTLEVBQUU7WUFDMUIsTUFBTSxDQUFDLEdBQVcsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFBO1lBQ25DLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDdkIsQ0FBQyxDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsY0FBYyxFQUFFLEdBQVMsRUFBRTtZQUM5QixNQUFNLElBQUksR0FBYSxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUE7WUFDNUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUNqQyxDQUFDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBUyxFQUFFO1lBQ3hCLE1BQU0sQ0FBQyxHQUFTLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTtZQUMvQixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3JCLENBQUMsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFTLEVBQUU7WUFDMUIsTUFBTSxDQUFDLEdBQVcsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFBO1lBQ25DLE1BQU0sQ0FBQyxHQUFXLElBQUksWUFBTSxFQUFFLENBQUE7WUFDOUIsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUNmLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUMxQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUNsQyxDQUFBO1FBQ0gsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJpblRvb2xzIGZyb20gXCIuLi8uLi8uLi9zcmMvdXRpbHMvYmludG9vbHNcIlxuaW1wb3J0IEJOIGZyb20gXCJibi5qc1wiXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiYnVmZmVyL1wiXG5pbXBvcnQgeyBWZXJ0ZXgsIFR4IH0gZnJvbSBcInNyYy9hcGlzL2F2bVwiXG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29sczogQmluVG9vbHMgPSBCaW5Ub29scy5nZXRJbnN0YW5jZSgpXG5cbmRlc2NyaWJlKFwiVmVydGV4XCIsICgpOiB2b2lkID0+IHtcbiAgYmVmb3JlRWFjaCgoKTogdm9pZCA9PiB7fSlcbiAgZGVzY3JpYmUoXCJjb25zdHJ1Y3RvclwiLCAoKTogdm9pZCA9PiB7XG4gICAgY29uc3QgbmV0d29ya0lEOiBudW1iZXIgPSAxXG4gICAgY29uc3QgYmxvY2tjaGFpbklEOiBzdHJpbmcgPVxuICAgICAgXCIyb1lNQk5WNGVOSHlxazJmampWNW5WUUxEYnRtTkp6cTVzM3FzM0xvNmZ0bkM2RkJ5TVwiXG4gICAgY29uc3QgaGVpZ2h0OiBCTiA9IG5ldyBCTigxMjM0NSlcbiAgICBjb25zdCBlcG9jaDogbnVtYmVyID0gMFxuICAgIGNvbnN0IHBhcmVudElEQnVmOiBCdWZmZXIgPSBiaW50b29scy5jYjU4RGVjb2RlKFxuICAgICAgXCIySENvUjFXelkzVEVGaXBheGV5WGhuS2E0TVlUamZVYzR6TjVTRmhaSG9USkdxdVZmcFwiXG4gICAgKVxuICAgIGNvbnN0IHBhcmVudElEczogQnVmZmVyW10gPSBbcGFyZW50SURCdWZdXG4gICAgY29uc3QgdHhzOiBUeFtdID0gW11cblxuICAgIGNvbnN0IHZlcnRleDogVmVydGV4ID0gbmV3IFZlcnRleChcbiAgICAgIG5ldHdvcmtJRCxcbiAgICAgIGJsb2NrY2hhaW5JRCxcbiAgICAgIGhlaWdodCxcbiAgICAgIGVwb2NoLFxuICAgICAgcGFyZW50SURzLFxuICAgICAgdHhzXG4gICAgKVxuXG4gICAgdGVzdChcImdldE5ldHdvcmtJRFwiLCAoKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCBuSUQ6IG51bWJlciA9IHZlcnRleC5nZXROZXR3b3JrSUQoKVxuICAgICAgZXhwZWN0KG5JRCkudG9CZShuZXR3b3JrSUQpXG4gICAgfSlcblxuICAgIHRlc3QoXCJnZXRCbG9ja2NoYWluSURcIiwgKCk6IHZvaWQgPT4ge1xuICAgICAgY29uc3QgYklEOiBzdHJpbmcgPSB2ZXJ0ZXguZ2V0QmxvY2tjaGFpbklEKClcbiAgICAgIGV4cGVjdChiSUQpLnRvQmUoYmxvY2tjaGFpbklEKVxuICAgIH0pXG5cbiAgICB0ZXN0KFwiZ2V0SGVpZ2h0XCIsICgpOiB2b2lkID0+IHtcbiAgICAgIGNvbnN0IGg6IEJOID0gdmVydGV4LmdldEhlaWdodCgpXG4gICAgICBleHBlY3QoaCkudG9CZShoZWlnaHQpXG4gICAgfSlcblxuICAgIHRlc3QoXCJnZXRFcG9jaFwiLCAoKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCBlOiBudW1iZXIgPSB2ZXJ0ZXguZ2V0RXBvY2goKVxuICAgICAgZXhwZWN0KGUpLnRvQmUoZXBvY2gpXG4gICAgfSlcblxuICAgIHRlc3QoXCJnZXRQYXJlbnRJRHNcIiwgKCk6IHZvaWQgPT4ge1xuICAgICAgY29uc3QgcElEczogQnVmZmVyW10gPSB2ZXJ0ZXguZ2V0UGFyZW50SURzKClcbiAgICAgIGV4cGVjdChwSURzKS50b0VxdWFsKHBhcmVudElEcylcbiAgICB9KVxuXG4gICAgdGVzdChcImdldFR4c1wiLCAoKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCB0OiBUeFtdID0gdmVydGV4LmdldFR4cygpXG4gICAgICBleHBlY3QodCkudG9CZSh0eHMpXG4gICAgfSlcblxuICAgIHRlc3QoXCJ0b0J1ZmZlclwiLCAoKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCBiOiBCdWZmZXIgPSB2ZXJ0ZXgudG9CdWZmZXIoKVxuICAgICAgY29uc3QgdjogVmVydGV4ID0gbmV3IFZlcnRleCgpXG4gICAgICB2LmZyb21CdWZmZXIoYilcbiAgICAgIGV4cGVjdCh2LnRvQnVmZmVyKCkudG9TdHJpbmcoXCJoZXhcIikpLnRvRXF1YWwoXG4gICAgICAgIHZlcnRleC50b0J1ZmZlcigpLnRvU3RyaW5nKFwiaGV4XCIpXG4gICAgICApXG4gICAgfSlcbiAgfSlcbn0pXG4iXX0=