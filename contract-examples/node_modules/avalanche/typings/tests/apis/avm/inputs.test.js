"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utxos_1 = require("../../../src/apis/avm/utxos");
const keychain_1 = require("../../../src/apis/avm/keychain");
const inputs_1 = require("../../../src/apis/avm/inputs");
const create_hash_1 = __importDefault(require("create-hash"));
const bintools_1 = __importDefault(require("../../../src/utils/bintools"));
const bn_js_1 = __importDefault(require("bn.js"));
const buffer_1 = require("buffer/");
const outputs_1 = require("../../../src/apis/avm/outputs");
const constants_1 = require("../../../src/apis/avm/constants");
const input_1 = require("../../../src/common/input");
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
describe("Inputs", () => {
    let set;
    let keymgr1;
    let keymgr2;
    let addrs1;
    let addrs2;
    let utxos;
    let hrp = "tests";
    const amnt = 10000;
    const codecID_zero = 0;
    const codecID_one = 1;
    beforeEach(() => {
        set = new utxos_1.UTXOSet();
        keymgr1 = new keychain_1.KeyChain(hrp, "X");
        keymgr2 = new keychain_1.KeyChain(hrp, "X");
        addrs1 = [];
        addrs2 = [];
        utxos = [];
        for (let i = 0; i < 3; i++) {
            addrs1.push(keymgr1.makeKey().getAddress());
            addrs2.push(keymgr2.makeKey().getAddress());
        }
        const amount = new bn_js_1.default(amnt);
        const addresses = keymgr1.getAddresses();
        const locktime = new bn_js_1.default(54321);
        const threshold = 3;
        for (let i = 0; i < 3; i++) {
            const txid = buffer_1.Buffer.from((0, create_hash_1.default)("sha256")
                .update(bintools.fromBNToBuffer(new bn_js_1.default(i), 32))
                .digest());
            const txidx = buffer_1.Buffer.from(bintools.fromBNToBuffer(new bn_js_1.default(i), 4));
            const assetID = buffer_1.Buffer.from((0, create_hash_1.default)("sha256").update(txid).digest());
            const out = new outputs_1.SECPTransferOutput(amount.add(new bn_js_1.default(i)), addresses, locktime, threshold);
            const xferout = new outputs_1.TransferableOutput(assetID, out);
            const u = new utxos_1.UTXO(constants_1.AVMConstants.LATESTCODEC, txid, txidx, assetID, out);
            u.fromBuffer(buffer_1.Buffer.concat([u.getCodecIDBuffer(), txid, txidx, xferout.toBuffer()]));
            utxos.push(u);
        }
        set.addArray(utxos);
    });
    test("SECPInput", () => {
        let u;
        let txid;
        let txidx;
        const amount = new bn_js_1.default(amnt);
        let input;
        let xferinput;
        u = utxos[0];
        txid = u.getTxID();
        txidx = u.getOutputIdx();
        const asset = u.getAssetID();
        input = new inputs_1.SECPTransferInput(amount);
        xferinput = new inputs_1.TransferableInput(txid, txidx, asset, input);
        expect(xferinput.getUTXOID()).toBe(u.getUTXOID());
        expect(input.getInputID()).toBe(constants_1.AVMConstants.SECPINPUTID);
        input.addSignatureIdx(0, addrs2[0]);
        input.addSignatureIdx(1, addrs2[1]);
        const newin = new inputs_1.SECPTransferInput();
        newin.fromBuffer(bintools.b58ToBuffer(input.toString()));
        expect(newin.toBuffer().toString("hex")).toBe(input.toBuffer().toString("hex"));
        expect(newin.getSigIdxs().toString()).toBe(input.getSigIdxs().toString());
    });
    test("Input comparator", () => {
        const inpt1 = new inputs_1.SECPTransferInput(utxos[0].getOutput().getAmount());
        const inpt2 = new inputs_1.SECPTransferInput(utxos[1].getOutput().getAmount());
        const inpt3 = new inputs_1.SECPTransferInput(utxos[2].getOutput().getAmount());
        const cmp = input_1.Input.comparator();
        expect(cmp(inpt1, inpt2)).toBe(-1);
        expect(cmp(inpt1, inpt3)).toBe(-1);
        expect(cmp(inpt1, inpt1)).toBe(0);
        expect(cmp(inpt2, inpt2)).toBe(0);
        expect(cmp(inpt3, inpt3)).toBe(0);
    });
    test("TransferableInput comparator", () => {
        const inpt1 = new inputs_1.SECPTransferInput(utxos[0].getOutput().getAmount());
        const in1 = new inputs_1.TransferableInput(utxos[0].getTxID(), utxos[0].getOutputIdx(), utxos[0].getAssetID(), inpt1);
        const inpt2 = new inputs_1.SECPTransferInput(utxos[1].getOutput().getAmount());
        const in2 = new inputs_1.TransferableInput(utxos[1].getTxID(), utxos[1].getOutputIdx(), utxos[1].getAssetID(), inpt2);
        const inpt3 = new inputs_1.SECPTransferInput(utxos[2].getOutput().getAmount());
        const in3 = new inputs_1.TransferableInput(utxos[2].getTxID(), utxos[2].getOutputIdx(), utxos[2].getAssetID(), inpt3);
        const cmp = inputs_1.TransferableInput.comparator();
        expect(cmp(in1, in2)).toBe(-1);
        expect(cmp(in1, in3)).toBe(-1);
        expect(cmp(in1, in1)).toBe(0);
        expect(cmp(in2, in2)).toBe(0);
        expect(cmp(in3, in3)).toBe(0);
    });
    test("SECPTransferInput codecIDs", () => {
        const secpTransferInput = new inputs_1.SECPTransferInput(utxos[0].getOutput().getAmount());
        expect(secpTransferInput.getCodecID()).toBe(codecID_zero);
        expect(secpTransferInput.getInputID()).toBe(constants_1.AVMConstants.SECPINPUTID);
        secpTransferInput.setCodecID(codecID_one);
        expect(secpTransferInput.getCodecID()).toBe(codecID_one);
        expect(secpTransferInput.getInputID()).toBe(constants_1.AVMConstants.SECPINPUTID_CODECONE);
        secpTransferInput.setCodecID(codecID_zero);
        expect(secpTransferInput.getCodecID()).toBe(codecID_zero);
        expect(secpTransferInput.getInputID()).toBe(constants_1.AVMConstants.SECPINPUTID);
    });
    test("Invalid SECPTransferInput codecID", () => {
        const secpTransferInput = new inputs_1.SECPTransferInput(utxos[0].getOutput().getAmount());
        expect(() => {
            secpTransferInput.setCodecID(2);
        }).toThrow("Error - SECPTransferInput.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.");
    });
});
//# sourceMappingURL=data:application/json;base64,